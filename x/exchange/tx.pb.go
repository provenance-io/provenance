// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/exchange/v1/tx.proto

package exchange

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateAskRequest is a request message for the CreateAsk endpoint.
type MsgCreateAskRequest struct {
	// ask_order is the details of the order being created.
	AskOrder AskOrder `protobuf:"bytes,1,opt,name=ask_order,json=askOrder,proto3" json:"ask_order"`
	// order_creation_fee is the fee that is being paid to create this order.
	OrderCreationFee *types.Coin `protobuf:"bytes,2,opt,name=order_creation_fee,json=orderCreationFee,proto3" json:"order_creation_fee,omitempty"`
}

func (m *MsgCreateAskRequest) Reset()         { *m = MsgCreateAskRequest{} }
func (m *MsgCreateAskRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAskRequest) ProtoMessage()    {}
func (*MsgCreateAskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{0}
}
func (m *MsgCreateAskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAskRequest.Merge(m, src)
}
func (m *MsgCreateAskRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAskRequest proto.InternalMessageInfo

func (m *MsgCreateAskRequest) GetAskOrder() AskOrder {
	if m != nil {
		return m.AskOrder
	}
	return AskOrder{}
}

func (m *MsgCreateAskRequest) GetOrderCreationFee() *types.Coin {
	if m != nil {
		return m.OrderCreationFee
	}
	return nil
}

// MsgCreateAskResponse is a response message for the CreateAsk endpoint.
type MsgCreateAskResponse struct {
	// order_id is the id of the order created.
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCreateAskResponse) Reset()         { *m = MsgCreateAskResponse{} }
func (m *MsgCreateAskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAskResponse) ProtoMessage()    {}
func (*MsgCreateAskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{1}
}
func (m *MsgCreateAskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAskResponse.Merge(m, src)
}
func (m *MsgCreateAskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAskResponse proto.InternalMessageInfo

func (m *MsgCreateAskResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// MsgCreateBidRequest is a request message for the CreateBid endpoint.
type MsgCreateBidRequest struct {
	// bid_order is the details of the order being created.
	BidOrder BidOrder `protobuf:"bytes,1,opt,name=bid_order,json=bidOrder,proto3" json:"bid_order"`
	// order_creation_fee is the fee that is being paid to create this order.
	OrderCreationFee *types.Coin `protobuf:"bytes,2,opt,name=order_creation_fee,json=orderCreationFee,proto3" json:"order_creation_fee,omitempty"`
}

func (m *MsgCreateBidRequest) Reset()         { *m = MsgCreateBidRequest{} }
func (m *MsgCreateBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBidRequest) ProtoMessage()    {}
func (*MsgCreateBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{2}
}
func (m *MsgCreateBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBidRequest.Merge(m, src)
}
func (m *MsgCreateBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBidRequest proto.InternalMessageInfo

func (m *MsgCreateBidRequest) GetBidOrder() BidOrder {
	if m != nil {
		return m.BidOrder
	}
	return BidOrder{}
}

func (m *MsgCreateBidRequest) GetOrderCreationFee() *types.Coin {
	if m != nil {
		return m.OrderCreationFee
	}
	return nil
}

// MsgCreateBidResponse is a response message for the CreateBid endpoint.
type MsgCreateBidResponse struct {
	// order_id is the id of the order created.
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCreateBidResponse) Reset()         { *m = MsgCreateBidResponse{} }
func (m *MsgCreateBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBidResponse) ProtoMessage()    {}
func (*MsgCreateBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{3}
}
func (m *MsgCreateBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBidResponse.Merge(m, src)
}
func (m *MsgCreateBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBidResponse proto.InternalMessageInfo

func (m *MsgCreateBidResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// MsgCommitFundsRequest is a request message for the CommitFunds endpoint.
type MsgCommitFundsRequest struct {
	// account is the address of the account with the funds being committed.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// market_id is the numerical identifier of the market the funds will be committed to.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// amount is the funds being committed to the market.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	// creation_fee is the fee that is being paid to create this commitment.
	CreationFee *types.Coin `protobuf:"bytes,4,opt,name=creation_fee,json=creationFee,proto3" json:"creation_fee,omitempty"`
	// event_tag is a string that is included in the funds-committed event. Max length is 100 characters.
	EventTag string `protobuf:"bytes,5,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
}

func (m *MsgCommitFundsRequest) Reset()         { *m = MsgCommitFundsRequest{} }
func (m *MsgCommitFundsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCommitFundsRequest) ProtoMessage()    {}
func (*MsgCommitFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{4}
}
func (m *MsgCommitFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitFundsRequest.Merge(m, src)
}
func (m *MsgCommitFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitFundsRequest proto.InternalMessageInfo

func (m *MsgCommitFundsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgCommitFundsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgCommitFundsRequest) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgCommitFundsRequest) GetCreationFee() *types.Coin {
	if m != nil {
		return m.CreationFee
	}
	return nil
}

func (m *MsgCommitFundsRequest) GetEventTag() string {
	if m != nil {
		return m.EventTag
	}
	return ""
}

// MsgCommitFundsResponse is a response message for the CommitFunds endpoint.
type MsgCommitFundsResponse struct {
}

func (m *MsgCommitFundsResponse) Reset()         { *m = MsgCommitFundsResponse{} }
func (m *MsgCommitFundsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitFundsResponse) ProtoMessage()    {}
func (*MsgCommitFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{5}
}
func (m *MsgCommitFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitFundsResponse.Merge(m, src)
}
func (m *MsgCommitFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitFundsResponse proto.InternalMessageInfo

// MsgCancelOrderRequest is a request message for the CancelOrder endpoint.
type MsgCancelOrderRequest struct {
	// signer is the account requesting the order cancellation.
	// It must be either the order owner (e.g. the buyer or seller), the governance module account address, or an account
	// with cancel permission with the market that the order is in.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// order_id is the id of the order to cancel.
	OrderId uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelOrderRequest) Reset()         { *m = MsgCancelOrderRequest{} }
func (m *MsgCancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrderRequest) ProtoMessage()    {}
func (*MsgCancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{6}
}
func (m *MsgCancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrderRequest.Merge(m, src)
}
func (m *MsgCancelOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrderRequest proto.InternalMessageInfo

func (m *MsgCancelOrderRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgCancelOrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

// MsgCancelOrderResponse is a response message for the CancelOrder endpoint.
type MsgCancelOrderResponse struct {
}

func (m *MsgCancelOrderResponse) Reset()         { *m = MsgCancelOrderResponse{} }
func (m *MsgCancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelOrderResponse) ProtoMessage()    {}
func (*MsgCancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{7}
}
func (m *MsgCancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelOrderResponse.Merge(m, src)
}
func (m *MsgCancelOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelOrderResponse proto.InternalMessageInfo

// MsgFillBidsRequest is a request message for the FillBids endpoint.
type MsgFillBidsRequest struct {
	// seller is the address of the account with the assets to sell.
	Seller string `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	// market_id is the numerical identifier of the market with the bids to fill.
	// All bid orders being filled must be in this market.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// total_assets are the things that the seller wishes to sell.
	// It must be the sum of all bid order assets.
	TotalAssets github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=total_assets,json=totalAssets,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_assets"`
	// bid_order_ids are the ids of the bid orders that you are trying to fill.
	// All ids must be for bid orders, and must be in the same market as the market_id.
	BidOrderIds []uint64 `protobuf:"varint,4,rep,packed,name=bid_order_ids,json=bidOrderIds,proto3" json:"bid_order_ids,omitempty"`
	// seller_settlement_flat_fee is the flat fee for sellers that will be charged for this settlement.
	SellerSettlementFlatFee *types.Coin `protobuf:"bytes,5,opt,name=seller_settlement_flat_fee,json=sellerSettlementFlatFee,proto3" json:"seller_settlement_flat_fee,omitempty"`
	// ask_order_creation_fee is the fee that is being paid to create this order (which is immediately then settled).
	AskOrderCreationFee *types.Coin `protobuf:"bytes,6,opt,name=ask_order_creation_fee,json=askOrderCreationFee,proto3" json:"ask_order_creation_fee,omitempty"`
}

func (m *MsgFillBidsRequest) Reset()         { *m = MsgFillBidsRequest{} }
func (m *MsgFillBidsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFillBidsRequest) ProtoMessage()    {}
func (*MsgFillBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{8}
}
func (m *MsgFillBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFillBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFillBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFillBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFillBidsRequest.Merge(m, src)
}
func (m *MsgFillBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFillBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFillBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFillBidsRequest proto.InternalMessageInfo

func (m *MsgFillBidsRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *MsgFillBidsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgFillBidsRequest) GetTotalAssets() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalAssets
	}
	return nil
}

func (m *MsgFillBidsRequest) GetBidOrderIds() []uint64 {
	if m != nil {
		return m.BidOrderIds
	}
	return nil
}

func (m *MsgFillBidsRequest) GetSellerSettlementFlatFee() *types.Coin {
	if m != nil {
		return m.SellerSettlementFlatFee
	}
	return nil
}

func (m *MsgFillBidsRequest) GetAskOrderCreationFee() *types.Coin {
	if m != nil {
		return m.AskOrderCreationFee
	}
	return nil
}

// MsgFillBidsResponse is a response message for the FillBids endpoint.
type MsgFillBidsResponse struct {
}

func (m *MsgFillBidsResponse) Reset()         { *m = MsgFillBidsResponse{} }
func (m *MsgFillBidsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFillBidsResponse) ProtoMessage()    {}
func (*MsgFillBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{9}
}
func (m *MsgFillBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFillBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFillBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFillBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFillBidsResponse.Merge(m, src)
}
func (m *MsgFillBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFillBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFillBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFillBidsResponse proto.InternalMessageInfo

// MsgFillAsksRequest is a request message for the FillAsks endpoint.
type MsgFillAsksRequest struct {
	// buyer is the address of the account attempting to buy some assets.
	Buyer string `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	// market_id is the numerical identifier of the market with the asks to fill.
	// All ask orders being filled must be in this market.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// total_price is the total amount being spent on some assets.
	// It must be the sum of all ask order prices.
	TotalPrice types.Coin `protobuf:"bytes,3,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`
	// ask_order_ids are the ids of the ask orders that you are trying to fill.
	// All ids must be for ask orders, and must be in the same market as the market_id.
	AskOrderIds []uint64 `protobuf:"varint,4,rep,packed,name=ask_order_ids,json=askOrderIds,proto3" json:"ask_order_ids,omitempty"`
	// buyer_settlement_fees are the fees (both flat and proportional) that the buyer will pay (in addition to the price)
	// for this settlement.
	BuyerSettlementFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=buyer_settlement_fees,json=buyerSettlementFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"buyer_settlement_fees"`
	// bid_order_creation_fee is the fee that is being paid to create this order (which is immediately then settled).
	BidOrderCreationFee *types.Coin `protobuf:"bytes,6,opt,name=bid_order_creation_fee,json=bidOrderCreationFee,proto3" json:"bid_order_creation_fee,omitempty"`
}

func (m *MsgFillAsksRequest) Reset()         { *m = MsgFillAsksRequest{} }
func (m *MsgFillAsksRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFillAsksRequest) ProtoMessage()    {}
func (*MsgFillAsksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{10}
}
func (m *MsgFillAsksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFillAsksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFillAsksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFillAsksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFillAsksRequest.Merge(m, src)
}
func (m *MsgFillAsksRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFillAsksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFillAsksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFillAsksRequest proto.InternalMessageInfo

func (m *MsgFillAsksRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *MsgFillAsksRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgFillAsksRequest) GetTotalPrice() types.Coin {
	if m != nil {
		return m.TotalPrice
	}
	return types.Coin{}
}

func (m *MsgFillAsksRequest) GetAskOrderIds() []uint64 {
	if m != nil {
		return m.AskOrderIds
	}
	return nil
}

func (m *MsgFillAsksRequest) GetBuyerSettlementFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.BuyerSettlementFees
	}
	return nil
}

func (m *MsgFillAsksRequest) GetBidOrderCreationFee() *types.Coin {
	if m != nil {
		return m.BidOrderCreationFee
	}
	return nil
}

// MsgFillAsksResponse is a response message for the FillAsks endpoint.
type MsgFillAsksResponse struct {
}

func (m *MsgFillAsksResponse) Reset()         { *m = MsgFillAsksResponse{} }
func (m *MsgFillAsksResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFillAsksResponse) ProtoMessage()    {}
func (*MsgFillAsksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{11}
}
func (m *MsgFillAsksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFillAsksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFillAsksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFillAsksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFillAsksResponse.Merge(m, src)
}
func (m *MsgFillAsksResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFillAsksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFillAsksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFillAsksResponse proto.InternalMessageInfo

// MsgMarketSettleRequest is a request message for the MarketSettle endpoint.
type MsgMarketSettleRequest struct {
	// admin is the account with "settle" permission requesting this settlement.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market requesting this settlement.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// ask_order_ids are the ask orders being filled.
	AskOrderIds []uint64 `protobuf:"varint,3,rep,packed,name=ask_order_ids,json=askOrderIds,proto3" json:"ask_order_ids,omitempty"`
	// bid_order_ids are the bid orders being filled.
	BidOrderIds []uint64 `protobuf:"varint,4,rep,packed,name=bid_order_ids,json=bidOrderIds,proto3" json:"bid_order_ids,omitempty"`
	// expect_partial is whether to expect an order to only be partially filled. Set to true to indicate that either
	// the last ask order, or last bid order will be partially filled by this settlement. Set to false to indicate
	// that all provided orders will be filled in full during this settlement.
	ExpectPartial bool `protobuf:"varint,5,opt,name=expect_partial,json=expectPartial,proto3" json:"expect_partial,omitempty"`
}

func (m *MsgMarketSettleRequest) Reset()         { *m = MsgMarketSettleRequest{} }
func (m *MsgMarketSettleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketSettleRequest) ProtoMessage()    {}
func (*MsgMarketSettleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{12}
}
func (m *MsgMarketSettleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketSettleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketSettleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketSettleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketSettleRequest.Merge(m, src)
}
func (m *MsgMarketSettleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketSettleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketSettleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketSettleRequest proto.InternalMessageInfo

func (m *MsgMarketSettleRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketSettleRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketSettleRequest) GetAskOrderIds() []uint64 {
	if m != nil {
		return m.AskOrderIds
	}
	return nil
}

func (m *MsgMarketSettleRequest) GetBidOrderIds() []uint64 {
	if m != nil {
		return m.BidOrderIds
	}
	return nil
}

func (m *MsgMarketSettleRequest) GetExpectPartial() bool {
	if m != nil {
		return m.ExpectPartial
	}
	return false
}

// MsgMarketSettleResponse is a response message for the MarketSettle endpoint.
type MsgMarketSettleResponse struct {
}

func (m *MsgMarketSettleResponse) Reset()         { *m = MsgMarketSettleResponse{} }
func (m *MsgMarketSettleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketSettleResponse) ProtoMessage()    {}
func (*MsgMarketSettleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{13}
}
func (m *MsgMarketSettleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketSettleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketSettleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketSettleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketSettleResponse.Merge(m, src)
}
func (m *MsgMarketSettleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketSettleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketSettleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketSettleResponse proto.InternalMessageInfo

// MsgMarketCommitmentSettleRequest is a request message for the MarketCommitmentSettle endpoint.
type MsgMarketCommitmentSettleRequest struct {
	// admin is the account with "settle" permission requesting this settlement.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market requesting this settlement.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// inputs defines where the funds are coming from. All of these funds must be already committed to the market.
	Inputs []AccountAmount `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs"`
	// outputs defines how the funds are to be distributed. These funds will be re-committed in the destination accounts.
	Outputs []AccountAmount `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs"`
	// fees is the funds that the market is collecting as part of this settlement.
	// All of these funds must be already committed to the market.
	Fees []AccountAmount `protobuf:"bytes,5,rep,name=fees,proto3" json:"fees"`
	// navs are any NAV info that should be updated at the beginning of this settlement.
	Navs []NetAssetPrice `protobuf:"bytes,6,rep,name=navs,proto3" json:"navs"`
	// event_tag is a string that is included in the funds-committed/released events. Max length is 100 characters.
	EventTag string `protobuf:"bytes,7,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
}

func (m *MsgMarketCommitmentSettleRequest) Reset()         { *m = MsgMarketCommitmentSettleRequest{} }
func (m *MsgMarketCommitmentSettleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketCommitmentSettleRequest) ProtoMessage()    {}
func (*MsgMarketCommitmentSettleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{14}
}
func (m *MsgMarketCommitmentSettleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketCommitmentSettleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketCommitmentSettleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketCommitmentSettleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketCommitmentSettleRequest.Merge(m, src)
}
func (m *MsgMarketCommitmentSettleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketCommitmentSettleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketCommitmentSettleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketCommitmentSettleRequest proto.InternalMessageInfo

func (m *MsgMarketCommitmentSettleRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketCommitmentSettleRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketCommitmentSettleRequest) GetInputs() []AccountAmount {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MsgMarketCommitmentSettleRequest) GetOutputs() []AccountAmount {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MsgMarketCommitmentSettleRequest) GetFees() []AccountAmount {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *MsgMarketCommitmentSettleRequest) GetNavs() []NetAssetPrice {
	if m != nil {
		return m.Navs
	}
	return nil
}

func (m *MsgMarketCommitmentSettleRequest) GetEventTag() string {
	if m != nil {
		return m.EventTag
	}
	return ""
}

// MsgMarketCommitmentSettleResponse is a response message for the MarketCommitmentSettle endpoint.
type MsgMarketCommitmentSettleResponse struct {
}

func (m *MsgMarketCommitmentSettleResponse) Reset()         { *m = MsgMarketCommitmentSettleResponse{} }
func (m *MsgMarketCommitmentSettleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketCommitmentSettleResponse) ProtoMessage()    {}
func (*MsgMarketCommitmentSettleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{15}
}
func (m *MsgMarketCommitmentSettleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketCommitmentSettleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketCommitmentSettleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketCommitmentSettleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketCommitmentSettleResponse.Merge(m, src)
}
func (m *MsgMarketCommitmentSettleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketCommitmentSettleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketCommitmentSettleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketCommitmentSettleResponse proto.InternalMessageInfo

// MsgMarketReleaseCommitmentsRequest is a request message for the MarketReleaseCommitments endpoint.
type MsgMarketReleaseCommitmentsRequest struct {
	// admin is the account with "cancel" permission requesting this release.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market releasing these funds.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// to_release is the funds that are to be released.
	// An entry with a zero amount indicates that all committed funds for that account should be released.
	ToRelease []AccountAmount `protobuf:"bytes,3,rep,name=to_release,json=toRelease,proto3" json:"to_release"`
	// event_tag is a string that is included in the funds-released events. Max length is 100 characters.
	EventTag string `protobuf:"bytes,4,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
}

func (m *MsgMarketReleaseCommitmentsRequest) Reset()         { *m = MsgMarketReleaseCommitmentsRequest{} }
func (m *MsgMarketReleaseCommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketReleaseCommitmentsRequest) ProtoMessage()    {}
func (*MsgMarketReleaseCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{16}
}
func (m *MsgMarketReleaseCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketReleaseCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketReleaseCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketReleaseCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketReleaseCommitmentsRequest.Merge(m, src)
}
func (m *MsgMarketReleaseCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketReleaseCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketReleaseCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketReleaseCommitmentsRequest proto.InternalMessageInfo

func (m *MsgMarketReleaseCommitmentsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketReleaseCommitmentsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketReleaseCommitmentsRequest) GetToRelease() []AccountAmount {
	if m != nil {
		return m.ToRelease
	}
	return nil
}

func (m *MsgMarketReleaseCommitmentsRequest) GetEventTag() string {
	if m != nil {
		return m.EventTag
	}
	return ""
}

// MsgMarketReleaseCommitmentsResponse is a response message for the MarketReleaseCommitments endpoint.
type MsgMarketReleaseCommitmentsResponse struct {
}

func (m *MsgMarketReleaseCommitmentsResponse) Reset()         { *m = MsgMarketReleaseCommitmentsResponse{} }
func (m *MsgMarketReleaseCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketReleaseCommitmentsResponse) ProtoMessage()    {}
func (*MsgMarketReleaseCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{17}
}
func (m *MsgMarketReleaseCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketReleaseCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketReleaseCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketReleaseCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketReleaseCommitmentsResponse.Merge(m, src)
}
func (m *MsgMarketReleaseCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketReleaseCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketReleaseCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketReleaseCommitmentsResponse proto.InternalMessageInfo

// MsgMarketSetOrderExternalIDRequest is a request message for the MarketSetOrderExternalID endpoint.
type MsgMarketSetOrderExternalIDRequest struct {
	// admin is the account with "set_ids" permission requesting this settlement.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market with the orders to update.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// order_id is the numerical identifier of the order to update.
	OrderId uint64 `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// external_id is the new external id to associate with the order. Max length is 100 characters.
	// If the external id is already associated with another order in this market, this update will fail.
	ExternalId string `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (m *MsgMarketSetOrderExternalIDRequest) Reset()         { *m = MsgMarketSetOrderExternalIDRequest{} }
func (m *MsgMarketSetOrderExternalIDRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketSetOrderExternalIDRequest) ProtoMessage()    {}
func (*MsgMarketSetOrderExternalIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{18}
}
func (m *MsgMarketSetOrderExternalIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketSetOrderExternalIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketSetOrderExternalIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketSetOrderExternalIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketSetOrderExternalIDRequest.Merge(m, src)
}
func (m *MsgMarketSetOrderExternalIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketSetOrderExternalIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketSetOrderExternalIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketSetOrderExternalIDRequest proto.InternalMessageInfo

func (m *MsgMarketSetOrderExternalIDRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketSetOrderExternalIDRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketSetOrderExternalIDRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *MsgMarketSetOrderExternalIDRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// MsgMarketSetOrderExternalIDResponse is a response message for the MarketSetOrderExternalID endpoint.
type MsgMarketSetOrderExternalIDResponse struct {
}

func (m *MsgMarketSetOrderExternalIDResponse) Reset()         { *m = MsgMarketSetOrderExternalIDResponse{} }
func (m *MsgMarketSetOrderExternalIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketSetOrderExternalIDResponse) ProtoMessage()    {}
func (*MsgMarketSetOrderExternalIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{19}
}
func (m *MsgMarketSetOrderExternalIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketSetOrderExternalIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketSetOrderExternalIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketSetOrderExternalIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketSetOrderExternalIDResponse.Merge(m, src)
}
func (m *MsgMarketSetOrderExternalIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketSetOrderExternalIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketSetOrderExternalIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketSetOrderExternalIDResponse proto.InternalMessageInfo

// MsgMarketWithdrawRequest is a request message for the MarketWithdraw endpoint.
type MsgMarketWithdrawRequest struct {
	// admin is the account with withdraw permission requesting the withdrawal.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to withdraw from.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// to_address is the address that will receive the funds.
	ToAddress string `protobuf:"bytes,3,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// amount is the funds to withdraw.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgMarketWithdrawRequest) Reset()         { *m = MsgMarketWithdrawRequest{} }
func (m *MsgMarketWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketWithdrawRequest) ProtoMessage()    {}
func (*MsgMarketWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{20}
}
func (m *MsgMarketWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketWithdrawRequest.Merge(m, src)
}
func (m *MsgMarketWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketWithdrawRequest proto.InternalMessageInfo

func (m *MsgMarketWithdrawRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketWithdrawRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketWithdrawRequest) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *MsgMarketWithdrawRequest) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgMarketWithdrawResponse is a response message for the MarketWithdraw endpoint.
type MsgMarketWithdrawResponse struct {
}

func (m *MsgMarketWithdrawResponse) Reset()         { *m = MsgMarketWithdrawResponse{} }
func (m *MsgMarketWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketWithdrawResponse) ProtoMessage()    {}
func (*MsgMarketWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{21}
}
func (m *MsgMarketWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketWithdrawResponse.Merge(m, src)
}
func (m *MsgMarketWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketWithdrawResponse proto.InternalMessageInfo

// MsgMarketUpdateDetailsRequest is a request message for the MarketUpdateDetails endpoint.
type MsgMarketUpdateDetailsRequest struct {
	// admin is the account with "update" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to update details for.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// market_details is some information about this market.
	MarketDetails MarketDetails `protobuf:"bytes,3,opt,name=market_details,json=marketDetails,proto3" json:"market_details"`
}

func (m *MsgMarketUpdateDetailsRequest) Reset()         { *m = MsgMarketUpdateDetailsRequest{} }
func (m *MsgMarketUpdateDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateDetailsRequest) ProtoMessage()    {}
func (*MsgMarketUpdateDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{22}
}
func (m *MsgMarketUpdateDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateDetailsRequest.Merge(m, src)
}
func (m *MsgMarketUpdateDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateDetailsRequest proto.InternalMessageInfo

func (m *MsgMarketUpdateDetailsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketUpdateDetailsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketUpdateDetailsRequest) GetMarketDetails() MarketDetails {
	if m != nil {
		return m.MarketDetails
	}
	return MarketDetails{}
}

// MsgMarketUpdateDetailsResponse is a response message for the MarketUpdateDetails endpoint.
type MsgMarketUpdateDetailsResponse struct {
}

func (m *MsgMarketUpdateDetailsResponse) Reset()         { *m = MsgMarketUpdateDetailsResponse{} }
func (m *MsgMarketUpdateDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateDetailsResponse) ProtoMessage()    {}
func (*MsgMarketUpdateDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{23}
}
func (m *MsgMarketUpdateDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateDetailsResponse.Merge(m, src)
}
func (m *MsgMarketUpdateDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateDetailsResponse proto.InternalMessageInfo

// MsgMarketUpdateEnabledRequest is a request message for the MarketUpdateEnabled endpoint.
// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
//
// Deprecated: Do not use.
type MsgMarketUpdateEnabledRequest struct {
	// admin is the account with "update" permission requesting this change.
	// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"` // Deprecated: Do not use.
	// market_id is the numerical identifier of the market to enable or disable.
	// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"` // Deprecated: Do not use.
	// accepting_orders is whether this market is allowing orders to be created for it.
	// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
	AcceptingOrders bool `protobuf:"varint,3,opt,name=accepting_orders,json=acceptingOrders,proto3" json:"accepting_orders,omitempty"` // Deprecated: Do not use.
}

func (m *MsgMarketUpdateEnabledRequest) Reset()         { *m = MsgMarketUpdateEnabledRequest{} }
func (m *MsgMarketUpdateEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateEnabledRequest) ProtoMessage()    {}
func (*MsgMarketUpdateEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{24}
}
func (m *MsgMarketUpdateEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateEnabledRequest.Merge(m, src)
}
func (m *MsgMarketUpdateEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateEnabledRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *MsgMarketUpdateEnabledRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

// Deprecated: Do not use.
func (m *MsgMarketUpdateEnabledRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// Deprecated: Do not use.
func (m *MsgMarketUpdateEnabledRequest) GetAcceptingOrders() bool {
	if m != nil {
		return m.AcceptingOrders
	}
	return false
}

// MsgMarketUpdateEnabledResponse is a response message for the MarketUpdateEnabled endpoint.
// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
//
// Deprecated: Do not use.
type MsgMarketUpdateEnabledResponse struct {
}

func (m *MsgMarketUpdateEnabledResponse) Reset()         { *m = MsgMarketUpdateEnabledResponse{} }
func (m *MsgMarketUpdateEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateEnabledResponse) ProtoMessage()    {}
func (*MsgMarketUpdateEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{25}
}
func (m *MsgMarketUpdateEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateEnabledResponse.Merge(m, src)
}
func (m *MsgMarketUpdateEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateEnabledResponse proto.InternalMessageInfo

// MsgMarketUpdateAcceptingOrdersRequest is a request message for the MarketUpdateAcceptingOrders endpoint.
type MsgMarketUpdateAcceptingOrdersRequest struct {
	// admin is the account with "update" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to enable or disable.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// accepting_orders is whether this market is allowing orders to be created for it.
	AcceptingOrders bool `protobuf:"varint,3,opt,name=accepting_orders,json=acceptingOrders,proto3" json:"accepting_orders,omitempty"`
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) Reset()         { *m = MsgMarketUpdateAcceptingOrdersRequest{} }
func (m *MsgMarketUpdateAcceptingOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateAcceptingOrdersRequest) ProtoMessage()    {}
func (*MsgMarketUpdateAcceptingOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{26}
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateAcceptingOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateAcceptingOrdersRequest.Merge(m, src)
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateAcceptingOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateAcceptingOrdersRequest proto.InternalMessageInfo

func (m *MsgMarketUpdateAcceptingOrdersRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) GetAcceptingOrders() bool {
	if m != nil {
		return m.AcceptingOrders
	}
	return false
}

// MsgMarketUpdateAcceptingOrdersResponse is a response message for the MarketUpdateAcceptingOrders endpoint.
type MsgMarketUpdateAcceptingOrdersResponse struct {
}

func (m *MsgMarketUpdateAcceptingOrdersResponse) Reset() {
	*m = MsgMarketUpdateAcceptingOrdersResponse{}
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateAcceptingOrdersResponse) ProtoMessage()    {}
func (*MsgMarketUpdateAcceptingOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{27}
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateAcceptingOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateAcceptingOrdersResponse.Merge(m, src)
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateAcceptingOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateAcceptingOrdersResponse proto.InternalMessageInfo

// MsgMarketUpdateUserSettleRequest is a request message for the MarketUpdateUserSettle endpoint.
type MsgMarketUpdateUserSettleRequest struct {
	// admin is the account with "update" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to enable or disable user-settlement for.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// allow_user_settlement is whether this market allows users to initiate their own settlements.
	// For example, the FillBids and FillAsks endpoints are available if and only if this is true.
	// The MarketSettle endpoint is available (only to market actors) regardless of the value of this field.
	AllowUserSettlement bool `protobuf:"varint,3,opt,name=allow_user_settlement,json=allowUserSettlement,proto3" json:"allow_user_settlement,omitempty"`
}

func (m *MsgMarketUpdateUserSettleRequest) Reset()         { *m = MsgMarketUpdateUserSettleRequest{} }
func (m *MsgMarketUpdateUserSettleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateUserSettleRequest) ProtoMessage()    {}
func (*MsgMarketUpdateUserSettleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{28}
}
func (m *MsgMarketUpdateUserSettleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateUserSettleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateUserSettleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateUserSettleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateUserSettleRequest.Merge(m, src)
}
func (m *MsgMarketUpdateUserSettleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateUserSettleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateUserSettleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateUserSettleRequest proto.InternalMessageInfo

func (m *MsgMarketUpdateUserSettleRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketUpdateUserSettleRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketUpdateUserSettleRequest) GetAllowUserSettlement() bool {
	if m != nil {
		return m.AllowUserSettlement
	}
	return false
}

// MsgMarketUpdateUserSettleResponse is a response message for the MarketUpdateUserSettle endpoint.
type MsgMarketUpdateUserSettleResponse struct {
}

func (m *MsgMarketUpdateUserSettleResponse) Reset()         { *m = MsgMarketUpdateUserSettleResponse{} }
func (m *MsgMarketUpdateUserSettleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateUserSettleResponse) ProtoMessage()    {}
func (*MsgMarketUpdateUserSettleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{29}
}
func (m *MsgMarketUpdateUserSettleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateUserSettleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateUserSettleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateUserSettleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateUserSettleResponse.Merge(m, src)
}
func (m *MsgMarketUpdateUserSettleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateUserSettleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateUserSettleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateUserSettleResponse proto.InternalMessageInfo

// MsgMarketUpdateAcceptingCommitmentsRequest is a request message for the MarketUpdateAcceptingCommitments endpoint.
type MsgMarketUpdateAcceptingCommitmentsRequest struct {
	// admin is the account with "update" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to enable or disable commitments for.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// accepting_commitments is whether this market allows users to commit funds to it.
	// For example, the CommitFunds endpoint is available if and only if this is true.
	// The MarketCommitmentSettle endpoint is available (only to market actors) regardless of the value of this field.
	AcceptingCommitments bool `protobuf:"varint,3,opt,name=accepting_commitments,json=acceptingCommitments,proto3" json:"accepting_commitments,omitempty"`
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) Reset() {
	*m = MsgMarketUpdateAcceptingCommitmentsRequest{}
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*MsgMarketUpdateAcceptingCommitmentsRequest) ProtoMessage() {}
func (*MsgMarketUpdateAcceptingCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{30}
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsRequest.Merge(m, src)
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsRequest proto.InternalMessageInfo

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) GetAcceptingCommitments() bool {
	if m != nil {
		return m.AcceptingCommitments
	}
	return false
}

// MsgMarketUpdateAcceptingCommitmentsResponse is a response message for the MarketUpdateAcceptingCommitments endpoint.
type MsgMarketUpdateAcceptingCommitmentsResponse struct {
}

func (m *MsgMarketUpdateAcceptingCommitmentsResponse) Reset() {
	*m = MsgMarketUpdateAcceptingCommitmentsResponse{}
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgMarketUpdateAcceptingCommitmentsResponse) ProtoMessage() {}
func (*MsgMarketUpdateAcceptingCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{31}
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsResponse.Merge(m, src)
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateAcceptingCommitmentsResponse proto.InternalMessageInfo

// MsgMarketUpdateIntermediaryDenomRequest is a request message for the MarketUpdateIntermediaryDenom endpoint.
type MsgMarketUpdateIntermediaryDenomRequest struct {
	// admin is the account with "update" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market changing the intermediary denom.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// intermediary_denom is the new intermediary denom for this market to use.
	IntermediaryDenom string `protobuf:"bytes,3,opt,name=intermediary_denom,json=intermediaryDenom,proto3" json:"intermediary_denom,omitempty"`
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) Reset() {
	*m = MsgMarketUpdateIntermediaryDenomRequest{}
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateIntermediaryDenomRequest) ProtoMessage()    {}
func (*MsgMarketUpdateIntermediaryDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{32}
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateIntermediaryDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateIntermediaryDenomRequest.Merge(m, src)
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateIntermediaryDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateIntermediaryDenomRequest proto.InternalMessageInfo

func (m *MsgMarketUpdateIntermediaryDenomRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) GetIntermediaryDenom() string {
	if m != nil {
		return m.IntermediaryDenom
	}
	return ""
}

// MsgMarketUpdateIntermediaryDenomResponse is a response message for the MarketUpdateIntermediaryDenom endpoint.
type MsgMarketUpdateIntermediaryDenomResponse struct {
}

func (m *MsgMarketUpdateIntermediaryDenomResponse) Reset() {
	*m = MsgMarketUpdateIntermediaryDenomResponse{}
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketUpdateIntermediaryDenomResponse) ProtoMessage()    {}
func (*MsgMarketUpdateIntermediaryDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{33}
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketUpdateIntermediaryDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketUpdateIntermediaryDenomResponse.Merge(m, src)
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketUpdateIntermediaryDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketUpdateIntermediaryDenomResponse proto.InternalMessageInfo

// MsgMarketManagePermissionsRequest is a request message for the MarketManagePermissions endpoint.
type MsgMarketManagePermissionsRequest struct {
	// admin is the account with "permissions" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to manage permissions for.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// revoke_all are addresses that should have all their permissions revoked.
	RevokeAll []string `protobuf:"bytes,3,rep,name=revoke_all,json=revokeAll,proto3" json:"revoke_all,omitempty"`
	// to_revoke are the specific permissions to remove for addresses.
	ToRevoke []AccessGrant `protobuf:"bytes,4,rep,name=to_revoke,json=toRevoke,proto3" json:"to_revoke"`
	// to_grant are the permissions to grant to addresses.
	ToGrant []AccessGrant `protobuf:"bytes,5,rep,name=to_grant,json=toGrant,proto3" json:"to_grant"`
}

func (m *MsgMarketManagePermissionsRequest) Reset()         { *m = MsgMarketManagePermissionsRequest{} }
func (m *MsgMarketManagePermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketManagePermissionsRequest) ProtoMessage()    {}
func (*MsgMarketManagePermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{34}
}
func (m *MsgMarketManagePermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketManagePermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketManagePermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketManagePermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketManagePermissionsRequest.Merge(m, src)
}
func (m *MsgMarketManagePermissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketManagePermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketManagePermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketManagePermissionsRequest proto.InternalMessageInfo

func (m *MsgMarketManagePermissionsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketManagePermissionsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketManagePermissionsRequest) GetRevokeAll() []string {
	if m != nil {
		return m.RevokeAll
	}
	return nil
}

func (m *MsgMarketManagePermissionsRequest) GetToRevoke() []AccessGrant {
	if m != nil {
		return m.ToRevoke
	}
	return nil
}

func (m *MsgMarketManagePermissionsRequest) GetToGrant() []AccessGrant {
	if m != nil {
		return m.ToGrant
	}
	return nil
}

// MsgMarketManagePermissionsResponse is a response message for the MarketManagePermissions endpoint.
type MsgMarketManagePermissionsResponse struct {
}

func (m *MsgMarketManagePermissionsResponse) Reset()         { *m = MsgMarketManagePermissionsResponse{} }
func (m *MsgMarketManagePermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketManagePermissionsResponse) ProtoMessage()    {}
func (*MsgMarketManagePermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{35}
}
func (m *MsgMarketManagePermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketManagePermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketManagePermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketManagePermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketManagePermissionsResponse.Merge(m, src)
}
func (m *MsgMarketManagePermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketManagePermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketManagePermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketManagePermissionsResponse proto.InternalMessageInfo

// MsgMarketManageReqAttrsRequest is a request message for the MarketManageReqAttrs endpoint.
type MsgMarketManageReqAttrsRequest struct {
	// admin is the account with "attributes" permission requesting this change.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// market_id is the numerical identifier of the market to update required attributes for.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// create_ask_to_add are the attributes that should now also be required to create an ask order.
	CreateAskToAdd []string `protobuf:"bytes,3,rep,name=create_ask_to_add,json=createAskToAdd,proto3" json:"create_ask_to_add,omitempty"`
	// create_ask_to_remove are the attributes that should no longer be required to create an ask order.
	CreateAskToRemove []string `protobuf:"bytes,4,rep,name=create_ask_to_remove,json=createAskToRemove,proto3" json:"create_ask_to_remove,omitempty"`
	// create_bid_to_add are the attributes that should now also be required to create a bid order.
	CreateBidToAdd []string `protobuf:"bytes,5,rep,name=create_bid_to_add,json=createBidToAdd,proto3" json:"create_bid_to_add,omitempty"`
	// create_bid_to_remove are the attributes that should no longer be required to create a bid order.
	CreateBidToRemove []string `protobuf:"bytes,6,rep,name=create_bid_to_remove,json=createBidToRemove,proto3" json:"create_bid_to_remove,omitempty"`
	// create_commitment_to_add are the attributes that should now also be required to create a commitment.
	CreateCommitmentToAdd []string `protobuf:"bytes,7,rep,name=create_commitment_to_add,json=createCommitmentToAdd,proto3" json:"create_commitment_to_add,omitempty"`
	// create_commitment_to_remove are the attributes that should no longer be required to create a commitment.
	CreateCommitmentToRemove []string `protobuf:"bytes,8,rep,name=create_commitment_to_remove,json=createCommitmentToRemove,proto3" json:"create_commitment_to_remove,omitempty"`
}

func (m *MsgMarketManageReqAttrsRequest) Reset()         { *m = MsgMarketManageReqAttrsRequest{} }
func (m *MsgMarketManageReqAttrsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketManageReqAttrsRequest) ProtoMessage()    {}
func (*MsgMarketManageReqAttrsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{36}
}
func (m *MsgMarketManageReqAttrsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketManageReqAttrsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketManageReqAttrsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketManageReqAttrsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketManageReqAttrsRequest.Merge(m, src)
}
func (m *MsgMarketManageReqAttrsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketManageReqAttrsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketManageReqAttrsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketManageReqAttrsRequest proto.InternalMessageInfo

func (m *MsgMarketManageReqAttrsRequest) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgMarketManageReqAttrsRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateAskToAdd() []string {
	if m != nil {
		return m.CreateAskToAdd
	}
	return nil
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateAskToRemove() []string {
	if m != nil {
		return m.CreateAskToRemove
	}
	return nil
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateBidToAdd() []string {
	if m != nil {
		return m.CreateBidToAdd
	}
	return nil
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateBidToRemove() []string {
	if m != nil {
		return m.CreateBidToRemove
	}
	return nil
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateCommitmentToAdd() []string {
	if m != nil {
		return m.CreateCommitmentToAdd
	}
	return nil
}

func (m *MsgMarketManageReqAttrsRequest) GetCreateCommitmentToRemove() []string {
	if m != nil {
		return m.CreateCommitmentToRemove
	}
	return nil
}

// MsgMarketManageReqAttrsResponse is a response message for the MarketManageReqAttrs endpoint.
type MsgMarketManageReqAttrsResponse struct {
}

func (m *MsgMarketManageReqAttrsResponse) Reset()         { *m = MsgMarketManageReqAttrsResponse{} }
func (m *MsgMarketManageReqAttrsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketManageReqAttrsResponse) ProtoMessage()    {}
func (*MsgMarketManageReqAttrsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{37}
}
func (m *MsgMarketManageReqAttrsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketManageReqAttrsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketManageReqAttrsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketManageReqAttrsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketManageReqAttrsResponse.Merge(m, src)
}
func (m *MsgMarketManageReqAttrsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketManageReqAttrsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketManageReqAttrsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketManageReqAttrsResponse proto.InternalMessageInfo

// MsgCreatePaymentRequest is a request message for the CreatePayment endpoint.
type MsgCreatePaymentRequest struct {
	// payment is the details of the payment to create.
	Payment Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment"`
}

func (m *MsgCreatePaymentRequest) Reset()         { *m = MsgCreatePaymentRequest{} }
func (m *MsgCreatePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePaymentRequest) ProtoMessage()    {}
func (*MsgCreatePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{38}
}
func (m *MsgCreatePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePaymentRequest.Merge(m, src)
}
func (m *MsgCreatePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePaymentRequest proto.InternalMessageInfo

func (m *MsgCreatePaymentRequest) GetPayment() Payment {
	if m != nil {
		return m.Payment
	}
	return Payment{}
}

// MsgCreatePaymentResponse is a response message for the CreatePayment endpoint.
type MsgCreatePaymentResponse struct {
}

func (m *MsgCreatePaymentResponse) Reset()         { *m = MsgCreatePaymentResponse{} }
func (m *MsgCreatePaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePaymentResponse) ProtoMessage()    {}
func (*MsgCreatePaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{39}
}
func (m *MsgCreatePaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePaymentResponse.Merge(m, src)
}
func (m *MsgCreatePaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePaymentResponse proto.InternalMessageInfo

// MsgAcceptPaymentRequest is a request message for the AcceptPayment endpoint.
type MsgAcceptPaymentRequest struct {
	// payment is the details of the payment to accept.
	Payment Payment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment"`
}

func (m *MsgAcceptPaymentRequest) Reset()         { *m = MsgAcceptPaymentRequest{} }
func (m *MsgAcceptPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptPaymentRequest) ProtoMessage()    {}
func (*MsgAcceptPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{40}
}
func (m *MsgAcceptPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptPaymentRequest.Merge(m, src)
}
func (m *MsgAcceptPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptPaymentRequest proto.InternalMessageInfo

func (m *MsgAcceptPaymentRequest) GetPayment() Payment {
	if m != nil {
		return m.Payment
	}
	return Payment{}
}

// MsgAcceptPaymentResponse is a response message for the AcceptPayment endpoint.
type MsgAcceptPaymentResponse struct {
}

func (m *MsgAcceptPaymentResponse) Reset()         { *m = MsgAcceptPaymentResponse{} }
func (m *MsgAcceptPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptPaymentResponse) ProtoMessage()    {}
func (*MsgAcceptPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{41}
}
func (m *MsgAcceptPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptPaymentResponse.Merge(m, src)
}
func (m *MsgAcceptPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptPaymentResponse proto.InternalMessageInfo

// MsgRejectPaymentRequest is a request message for the RejectPayment endpoint.
type MsgRejectPaymentRequest struct {
	// target is the target account of the payment to reject.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// source is the source account of the payment to reject.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// external_id is the external id of the payment to reject.
	ExternalId string `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (m *MsgRejectPaymentRequest) Reset()         { *m = MsgRejectPaymentRequest{} }
func (m *MsgRejectPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRejectPaymentRequest) ProtoMessage()    {}
func (*MsgRejectPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{42}
}
func (m *MsgRejectPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectPaymentRequest.Merge(m, src)
}
func (m *MsgRejectPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectPaymentRequest proto.InternalMessageInfo

func (m *MsgRejectPaymentRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MsgRejectPaymentRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgRejectPaymentRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// MsgRejectPaymentResponse is a response message for the RejectPayment endpoint.
type MsgRejectPaymentResponse struct {
}

func (m *MsgRejectPaymentResponse) Reset()         { *m = MsgRejectPaymentResponse{} }
func (m *MsgRejectPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRejectPaymentResponse) ProtoMessage()    {}
func (*MsgRejectPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{43}
}
func (m *MsgRejectPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectPaymentResponse.Merge(m, src)
}
func (m *MsgRejectPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectPaymentResponse proto.InternalMessageInfo

// MsgRejectPaymentsRequest is a request message for the RejectPayments endpoint.
type MsgRejectPaymentsRequest struct {
	// target is the account that wishes to reject some payments.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// sources is the source accounts of the payments to reject.
	Sources []string `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (m *MsgRejectPaymentsRequest) Reset()         { *m = MsgRejectPaymentsRequest{} }
func (m *MsgRejectPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRejectPaymentsRequest) ProtoMessage()    {}
func (*MsgRejectPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{44}
}
func (m *MsgRejectPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectPaymentsRequest.Merge(m, src)
}
func (m *MsgRejectPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectPaymentsRequest proto.InternalMessageInfo

func (m *MsgRejectPaymentsRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *MsgRejectPaymentsRequest) GetSources() []string {
	if m != nil {
		return m.Sources
	}
	return nil
}

// MsgRejectPaymentsResponse is a response message for the RejectPayments endpoint.
type MsgRejectPaymentsResponse struct {
}

func (m *MsgRejectPaymentsResponse) Reset()         { *m = MsgRejectPaymentsResponse{} }
func (m *MsgRejectPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRejectPaymentsResponse) ProtoMessage()    {}
func (*MsgRejectPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{45}
}
func (m *MsgRejectPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectPaymentsResponse.Merge(m, src)
}
func (m *MsgRejectPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectPaymentsResponse proto.InternalMessageInfo

// MsgCancelPaymentsRequest is a request message for the CancelPayments endpoint.
type MsgCancelPaymentsRequest struct {
	// source is the account that wishes to cancel some of their payments.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// external_ids is all of the external ids of the payments to cancel.
	ExternalIds []string `protobuf:"bytes,2,rep,name=external_ids,json=externalIds,proto3" json:"external_ids,omitempty"`
}

func (m *MsgCancelPaymentsRequest) Reset()         { *m = MsgCancelPaymentsRequest{} }
func (m *MsgCancelPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPaymentsRequest) ProtoMessage()    {}
func (*MsgCancelPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{46}
}
func (m *MsgCancelPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPaymentsRequest.Merge(m, src)
}
func (m *MsgCancelPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPaymentsRequest proto.InternalMessageInfo

func (m *MsgCancelPaymentsRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgCancelPaymentsRequest) GetExternalIds() []string {
	if m != nil {
		return m.ExternalIds
	}
	return nil
}

// MsgCancelPaymentsResponse is a response message for the CancelPayments endpoint.
type MsgCancelPaymentsResponse struct {
}

func (m *MsgCancelPaymentsResponse) Reset()         { *m = MsgCancelPaymentsResponse{} }
func (m *MsgCancelPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPaymentsResponse) ProtoMessage()    {}
func (*MsgCancelPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{47}
}
func (m *MsgCancelPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPaymentsResponse.Merge(m, src)
}
func (m *MsgCancelPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPaymentsResponse proto.InternalMessageInfo

// MsgChangePaymentTargetRequest is a request message for the ChangePaymentTarget endpoint.
type MsgChangePaymentTargetRequest struct {
	// source is the account that wishes to update the target of one of their payments.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// external_id is the external id of the payment to update.
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// new_target is the new target account of the payment.
	NewTarget string `protobuf:"bytes,3,opt,name=new_target,json=newTarget,proto3" json:"new_target,omitempty"`
}

func (m *MsgChangePaymentTargetRequest) Reset()         { *m = MsgChangePaymentTargetRequest{} }
func (m *MsgChangePaymentTargetRequest) String() string { return proto.CompactTextString(m) }
func (*MsgChangePaymentTargetRequest) ProtoMessage()    {}
func (*MsgChangePaymentTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{48}
}
func (m *MsgChangePaymentTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangePaymentTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangePaymentTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangePaymentTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangePaymentTargetRequest.Merge(m, src)
}
func (m *MsgChangePaymentTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangePaymentTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangePaymentTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangePaymentTargetRequest proto.InternalMessageInfo

func (m *MsgChangePaymentTargetRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MsgChangePaymentTargetRequest) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *MsgChangePaymentTargetRequest) GetNewTarget() string {
	if m != nil {
		return m.NewTarget
	}
	return ""
}

// MsgChangePaymentTargetResponse is a response message for the ChangePaymentTarget endpoint.
type MsgChangePaymentTargetResponse struct {
}

func (m *MsgChangePaymentTargetResponse) Reset()         { *m = MsgChangePaymentTargetResponse{} }
func (m *MsgChangePaymentTargetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangePaymentTargetResponse) ProtoMessage()    {}
func (*MsgChangePaymentTargetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{49}
}
func (m *MsgChangePaymentTargetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangePaymentTargetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangePaymentTargetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangePaymentTargetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangePaymentTargetResponse.Merge(m, src)
}
func (m *MsgChangePaymentTargetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangePaymentTargetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangePaymentTargetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangePaymentTargetResponse proto.InternalMessageInfo

// MsgGovCreateMarketRequest is a request message for the GovCreateMarket endpoint.
type MsgGovCreateMarketRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// market is the initial market configuration.
	// If the market_id is 0, the next available market_id will be used (once voting ends).
	// If it is not zero, it must not yet be in use when the voting period ends.
	Market Market `protobuf:"bytes,2,opt,name=market,proto3" json:"market"`
}

func (m *MsgGovCreateMarketRequest) Reset()         { *m = MsgGovCreateMarketRequest{} }
func (m *MsgGovCreateMarketRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGovCreateMarketRequest) ProtoMessage()    {}
func (*MsgGovCreateMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{50}
}
func (m *MsgGovCreateMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovCreateMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovCreateMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovCreateMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovCreateMarketRequest.Merge(m, src)
}
func (m *MsgGovCreateMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovCreateMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovCreateMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovCreateMarketRequest proto.InternalMessageInfo

func (m *MsgGovCreateMarketRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgGovCreateMarketRequest) GetMarket() Market {
	if m != nil {
		return m.Market
	}
	return Market{}
}

// MsgGovCreateMarketResponse is a response message for the GovCreateMarket endpoint.
type MsgGovCreateMarketResponse struct {
}

func (m *MsgGovCreateMarketResponse) Reset()         { *m = MsgGovCreateMarketResponse{} }
func (m *MsgGovCreateMarketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovCreateMarketResponse) ProtoMessage()    {}
func (*MsgGovCreateMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{51}
}
func (m *MsgGovCreateMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovCreateMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovCreateMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovCreateMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovCreateMarketResponse.Merge(m, src)
}
func (m *MsgGovCreateMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovCreateMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovCreateMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovCreateMarketResponse proto.InternalMessageInfo

// MsgGovManageFeesRequest is a request message for the GovManageFees endpoint.
type MsgGovManageFeesRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// market_id is the market id that will get these fee updates.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// add_fee_create_ask_flat are the create-ask flat fee options to add.
	AddFeeCreateAskFlat []types.Coin `protobuf:"bytes,3,rep,name=add_fee_create_ask_flat,json=addFeeCreateAskFlat,proto3" json:"add_fee_create_ask_flat"`
	// remove_fee_create_ask_flat are the create-ask flat fee options to remove.
	RemoveFeeCreateAskFlat []types.Coin `protobuf:"bytes,4,rep,name=remove_fee_create_ask_flat,json=removeFeeCreateAskFlat,proto3" json:"remove_fee_create_ask_flat"`
	// add_fee_create_bid_flat are the create-bid flat fee options to add.
	AddFeeCreateBidFlat []types.Coin `protobuf:"bytes,5,rep,name=add_fee_create_bid_flat,json=addFeeCreateBidFlat,proto3" json:"add_fee_create_bid_flat"`
	// remove_fee_create_bid_flat are the create-bid flat fee options to remove.
	RemoveFeeCreateBidFlat []types.Coin `protobuf:"bytes,6,rep,name=remove_fee_create_bid_flat,json=removeFeeCreateBidFlat,proto3" json:"remove_fee_create_bid_flat"`
	// add_fee_seller_settlement_flat are the seller settlement flat fee options to add.
	AddFeeSellerSettlementFlat []types.Coin `protobuf:"bytes,7,rep,name=add_fee_seller_settlement_flat,json=addFeeSellerSettlementFlat,proto3" json:"add_fee_seller_settlement_flat"`
	// remove_fee_seller_settlement_flat are the seller settlement flat fee options to remove.
	RemoveFeeSellerSettlementFlat []types.Coin `protobuf:"bytes,8,rep,name=remove_fee_seller_settlement_flat,json=removeFeeSellerSettlementFlat,proto3" json:"remove_fee_seller_settlement_flat"`
	// add_fee_seller_settlement_ratios are the seller settlement fee ratios to add.
	AddFeeSellerSettlementRatios []FeeRatio `protobuf:"bytes,9,rep,name=add_fee_seller_settlement_ratios,json=addFeeSellerSettlementRatios,proto3" json:"add_fee_seller_settlement_ratios"`
	// remove_fee_seller_settlement_ratios are the seller settlement fee ratios to remove.
	RemoveFeeSellerSettlementRatios []FeeRatio `protobuf:"bytes,10,rep,name=remove_fee_seller_settlement_ratios,json=removeFeeSellerSettlementRatios,proto3" json:"remove_fee_seller_settlement_ratios"`
	// add_fee_buyer_settlement_flat are the buyer settlement flat fee options to add.
	AddFeeBuyerSettlementFlat []types.Coin `protobuf:"bytes,11,rep,name=add_fee_buyer_settlement_flat,json=addFeeBuyerSettlementFlat,proto3" json:"add_fee_buyer_settlement_flat"`
	// remove_fee_buyer_settlement_flat are the buyer settlement flat fee options to remove.
	RemoveFeeBuyerSettlementFlat []types.Coin `protobuf:"bytes,12,rep,name=remove_fee_buyer_settlement_flat,json=removeFeeBuyerSettlementFlat,proto3" json:"remove_fee_buyer_settlement_flat"`
	// add_fee_buyer_settlement_ratios are the buyer settlement fee ratios to add.
	AddFeeBuyerSettlementRatios []FeeRatio `protobuf:"bytes,13,rep,name=add_fee_buyer_settlement_ratios,json=addFeeBuyerSettlementRatios,proto3" json:"add_fee_buyer_settlement_ratios"`
	// remove_fee_buyer_settlement_ratios are the buyer settlement fee ratios to remove.
	RemoveFeeBuyerSettlementRatios []FeeRatio `protobuf:"bytes,14,rep,name=remove_fee_buyer_settlement_ratios,json=removeFeeBuyerSettlementRatios,proto3" json:"remove_fee_buyer_settlement_ratios"`
	// add_fee_create_commitment_flat are the create-commitment flat fee options to add.
	AddFeeCreateCommitmentFlat []types.Coin `protobuf:"bytes,15,rep,name=add_fee_create_commitment_flat,json=addFeeCreateCommitmentFlat,proto3" json:"add_fee_create_commitment_flat"`
	// remove_fee_create_commitment_flat are the create-commitment flat fee options to remove.
	RemoveFeeCreateCommitmentFlat []types.Coin `protobuf:"bytes,16,rep,name=remove_fee_create_commitment_flat,json=removeFeeCreateCommitmentFlat,proto3" json:"remove_fee_create_commitment_flat"`
	// set_fee_commitment_settlement_bips is the new fee_commitment_settlement_bips for the market.
	// It is ignored if it is zero. To set it to zero set unset_fee_commitment_settlement_bips to true.
	SetFeeCommitmentSettlementBips uint32 `protobuf:"varint,17,opt,name=set_fee_commitment_settlement_bips,json=setFeeCommitmentSettlementBips,proto3" json:"set_fee_commitment_settlement_bips,omitempty"`
	// unset_fee_commitment_settlement_bips, if true, sets the fee_commitment_settlement_bips to zero.
	// If false, it is ignored.
	UnsetFeeCommitmentSettlementBips bool `protobuf:"varint,18,opt,name=unset_fee_commitment_settlement_bips,json=unsetFeeCommitmentSettlementBips,proto3" json:"unset_fee_commitment_settlement_bips,omitempty"`
}

func (m *MsgGovManageFeesRequest) Reset()         { *m = MsgGovManageFeesRequest{} }
func (m *MsgGovManageFeesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGovManageFeesRequest) ProtoMessage()    {}
func (*MsgGovManageFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{52}
}
func (m *MsgGovManageFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovManageFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovManageFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovManageFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovManageFeesRequest.Merge(m, src)
}
func (m *MsgGovManageFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovManageFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovManageFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovManageFeesRequest proto.InternalMessageInfo

func (m *MsgGovManageFeesRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgGovManageFeesRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *MsgGovManageFeesRequest) GetAddFeeCreateAskFlat() []types.Coin {
	if m != nil {
		return m.AddFeeCreateAskFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeCreateAskFlat() []types.Coin {
	if m != nil {
		return m.RemoveFeeCreateAskFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeCreateBidFlat() []types.Coin {
	if m != nil {
		return m.AddFeeCreateBidFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeCreateBidFlat() []types.Coin {
	if m != nil {
		return m.RemoveFeeCreateBidFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeSellerSettlementFlat() []types.Coin {
	if m != nil {
		return m.AddFeeSellerSettlementFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeSellerSettlementFlat() []types.Coin {
	if m != nil {
		return m.RemoveFeeSellerSettlementFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeSellerSettlementRatios() []FeeRatio {
	if m != nil {
		return m.AddFeeSellerSettlementRatios
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeSellerSettlementRatios() []FeeRatio {
	if m != nil {
		return m.RemoveFeeSellerSettlementRatios
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeBuyerSettlementFlat() []types.Coin {
	if m != nil {
		return m.AddFeeBuyerSettlementFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeBuyerSettlementFlat() []types.Coin {
	if m != nil {
		return m.RemoveFeeBuyerSettlementFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeBuyerSettlementRatios() []FeeRatio {
	if m != nil {
		return m.AddFeeBuyerSettlementRatios
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeBuyerSettlementRatios() []FeeRatio {
	if m != nil {
		return m.RemoveFeeBuyerSettlementRatios
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetAddFeeCreateCommitmentFlat() []types.Coin {
	if m != nil {
		return m.AddFeeCreateCommitmentFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetRemoveFeeCreateCommitmentFlat() []types.Coin {
	if m != nil {
		return m.RemoveFeeCreateCommitmentFlat
	}
	return nil
}

func (m *MsgGovManageFeesRequest) GetSetFeeCommitmentSettlementBips() uint32 {
	if m != nil {
		return m.SetFeeCommitmentSettlementBips
	}
	return 0
}

func (m *MsgGovManageFeesRequest) GetUnsetFeeCommitmentSettlementBips() bool {
	if m != nil {
		return m.UnsetFeeCommitmentSettlementBips
	}
	return false
}

// MsgGovManageFeesResponse is a response message for the GovManageFees endpoint.
type MsgGovManageFeesResponse struct {
}

func (m *MsgGovManageFeesResponse) Reset()         { *m = MsgGovManageFeesResponse{} }
func (m *MsgGovManageFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovManageFeesResponse) ProtoMessage()    {}
func (*MsgGovManageFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{53}
}
func (m *MsgGovManageFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovManageFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovManageFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovManageFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovManageFeesResponse.Merge(m, src)
}
func (m *MsgGovManageFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovManageFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovManageFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovManageFeesResponse proto.InternalMessageInfo

// MsgGovCloseMarketRequest is a request message for the GovCloseMarket endpoint.
type MsgGovCloseMarketRequest struct {
	// authority must be the governance module account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// market_id is the numerical identifier of the market to close.
	MarketId uint32 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *MsgGovCloseMarketRequest) Reset()         { *m = MsgGovCloseMarketRequest{} }
func (m *MsgGovCloseMarketRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGovCloseMarketRequest) ProtoMessage()    {}
func (*MsgGovCloseMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{54}
}
func (m *MsgGovCloseMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovCloseMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovCloseMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovCloseMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovCloseMarketRequest.Merge(m, src)
}
func (m *MsgGovCloseMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovCloseMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovCloseMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovCloseMarketRequest proto.InternalMessageInfo

func (m *MsgGovCloseMarketRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgGovCloseMarketRequest) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

// MsgGovCloseMarketResponse is a response message for the GovCloseMarket endpoint.
type MsgGovCloseMarketResponse struct {
}

func (m *MsgGovCloseMarketResponse) Reset()         { *m = MsgGovCloseMarketResponse{} }
func (m *MsgGovCloseMarketResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovCloseMarketResponse) ProtoMessage()    {}
func (*MsgGovCloseMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{55}
}
func (m *MsgGovCloseMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovCloseMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovCloseMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovCloseMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovCloseMarketResponse.Merge(m, src)
}
func (m *MsgGovCloseMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovCloseMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovCloseMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovCloseMarketResponse proto.InternalMessageInfo

// MsgGovUpdateParamsRequest is a request message for the GovUpdateParams endpoint.
type MsgGovUpdateParamsRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params are the new param values to set
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgGovUpdateParamsRequest) Reset()         { *m = MsgGovUpdateParamsRequest{} }
func (m *MsgGovUpdateParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgGovUpdateParamsRequest) ProtoMessage()    {}
func (*MsgGovUpdateParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{56}
}
func (m *MsgGovUpdateParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovUpdateParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovUpdateParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovUpdateParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovUpdateParamsRequest.Merge(m, src)
}
func (m *MsgGovUpdateParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovUpdateParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovUpdateParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovUpdateParamsRequest proto.InternalMessageInfo

func (m *MsgGovUpdateParamsRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgGovUpdateParamsRequest) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgGovUpdateParamsResponse is a response message for the GovUpdateParams endpoint.
type MsgGovUpdateParamsResponse struct {
}

func (m *MsgGovUpdateParamsResponse) Reset()         { *m = MsgGovUpdateParamsResponse{} }
func (m *MsgGovUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGovUpdateParamsResponse) ProtoMessage()    {}
func (*MsgGovUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e333fcffc093bd1b, []int{57}
}
func (m *MsgGovUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGovUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGovUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGovUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGovUpdateParamsResponse.Merge(m, src)
}
func (m *MsgGovUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGovUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGovUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGovUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateAskRequest)(nil), "provenance.exchange.v1.MsgCreateAskRequest")
	proto.RegisterType((*MsgCreateAskResponse)(nil), "provenance.exchange.v1.MsgCreateAskResponse")
	proto.RegisterType((*MsgCreateBidRequest)(nil), "provenance.exchange.v1.MsgCreateBidRequest")
	proto.RegisterType((*MsgCreateBidResponse)(nil), "provenance.exchange.v1.MsgCreateBidResponse")
	proto.RegisterType((*MsgCommitFundsRequest)(nil), "provenance.exchange.v1.MsgCommitFundsRequest")
	proto.RegisterType((*MsgCommitFundsResponse)(nil), "provenance.exchange.v1.MsgCommitFundsResponse")
	proto.RegisterType((*MsgCancelOrderRequest)(nil), "provenance.exchange.v1.MsgCancelOrderRequest")
	proto.RegisterType((*MsgCancelOrderResponse)(nil), "provenance.exchange.v1.MsgCancelOrderResponse")
	proto.RegisterType((*MsgFillBidsRequest)(nil), "provenance.exchange.v1.MsgFillBidsRequest")
	proto.RegisterType((*MsgFillBidsResponse)(nil), "provenance.exchange.v1.MsgFillBidsResponse")
	proto.RegisterType((*MsgFillAsksRequest)(nil), "provenance.exchange.v1.MsgFillAsksRequest")
	proto.RegisterType((*MsgFillAsksResponse)(nil), "provenance.exchange.v1.MsgFillAsksResponse")
	proto.RegisterType((*MsgMarketSettleRequest)(nil), "provenance.exchange.v1.MsgMarketSettleRequest")
	proto.RegisterType((*MsgMarketSettleResponse)(nil), "provenance.exchange.v1.MsgMarketSettleResponse")
	proto.RegisterType((*MsgMarketCommitmentSettleRequest)(nil), "provenance.exchange.v1.MsgMarketCommitmentSettleRequest")
	proto.RegisterType((*MsgMarketCommitmentSettleResponse)(nil), "provenance.exchange.v1.MsgMarketCommitmentSettleResponse")
	proto.RegisterType((*MsgMarketReleaseCommitmentsRequest)(nil), "provenance.exchange.v1.MsgMarketReleaseCommitmentsRequest")
	proto.RegisterType((*MsgMarketReleaseCommitmentsResponse)(nil), "provenance.exchange.v1.MsgMarketReleaseCommitmentsResponse")
	proto.RegisterType((*MsgMarketSetOrderExternalIDRequest)(nil), "provenance.exchange.v1.MsgMarketSetOrderExternalIDRequest")
	proto.RegisterType((*MsgMarketSetOrderExternalIDResponse)(nil), "provenance.exchange.v1.MsgMarketSetOrderExternalIDResponse")
	proto.RegisterType((*MsgMarketWithdrawRequest)(nil), "provenance.exchange.v1.MsgMarketWithdrawRequest")
	proto.RegisterType((*MsgMarketWithdrawResponse)(nil), "provenance.exchange.v1.MsgMarketWithdrawResponse")
	proto.RegisterType((*MsgMarketUpdateDetailsRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateDetailsRequest")
	proto.RegisterType((*MsgMarketUpdateDetailsResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateDetailsResponse")
	proto.RegisterType((*MsgMarketUpdateEnabledRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateEnabledRequest")
	proto.RegisterType((*MsgMarketUpdateEnabledResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateEnabledResponse")
	proto.RegisterType((*MsgMarketUpdateAcceptingOrdersRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateAcceptingOrdersRequest")
	proto.RegisterType((*MsgMarketUpdateAcceptingOrdersResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateAcceptingOrdersResponse")
	proto.RegisterType((*MsgMarketUpdateUserSettleRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateUserSettleRequest")
	proto.RegisterType((*MsgMarketUpdateUserSettleResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateUserSettleResponse")
	proto.RegisterType((*MsgMarketUpdateAcceptingCommitmentsRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateAcceptingCommitmentsRequest")
	proto.RegisterType((*MsgMarketUpdateAcceptingCommitmentsResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateAcceptingCommitmentsResponse")
	proto.RegisterType((*MsgMarketUpdateIntermediaryDenomRequest)(nil), "provenance.exchange.v1.MsgMarketUpdateIntermediaryDenomRequest")
	proto.RegisterType((*MsgMarketUpdateIntermediaryDenomResponse)(nil), "provenance.exchange.v1.MsgMarketUpdateIntermediaryDenomResponse")
	proto.RegisterType((*MsgMarketManagePermissionsRequest)(nil), "provenance.exchange.v1.MsgMarketManagePermissionsRequest")
	proto.RegisterType((*MsgMarketManagePermissionsResponse)(nil), "provenance.exchange.v1.MsgMarketManagePermissionsResponse")
	proto.RegisterType((*MsgMarketManageReqAttrsRequest)(nil), "provenance.exchange.v1.MsgMarketManageReqAttrsRequest")
	proto.RegisterType((*MsgMarketManageReqAttrsResponse)(nil), "provenance.exchange.v1.MsgMarketManageReqAttrsResponse")
	proto.RegisterType((*MsgCreatePaymentRequest)(nil), "provenance.exchange.v1.MsgCreatePaymentRequest")
	proto.RegisterType((*MsgCreatePaymentResponse)(nil), "provenance.exchange.v1.MsgCreatePaymentResponse")
	proto.RegisterType((*MsgAcceptPaymentRequest)(nil), "provenance.exchange.v1.MsgAcceptPaymentRequest")
	proto.RegisterType((*MsgAcceptPaymentResponse)(nil), "provenance.exchange.v1.MsgAcceptPaymentResponse")
	proto.RegisterType((*MsgRejectPaymentRequest)(nil), "provenance.exchange.v1.MsgRejectPaymentRequest")
	proto.RegisterType((*MsgRejectPaymentResponse)(nil), "provenance.exchange.v1.MsgRejectPaymentResponse")
	proto.RegisterType((*MsgRejectPaymentsRequest)(nil), "provenance.exchange.v1.MsgRejectPaymentsRequest")
	proto.RegisterType((*MsgRejectPaymentsResponse)(nil), "provenance.exchange.v1.MsgRejectPaymentsResponse")
	proto.RegisterType((*MsgCancelPaymentsRequest)(nil), "provenance.exchange.v1.MsgCancelPaymentsRequest")
	proto.RegisterType((*MsgCancelPaymentsResponse)(nil), "provenance.exchange.v1.MsgCancelPaymentsResponse")
	proto.RegisterType((*MsgChangePaymentTargetRequest)(nil), "provenance.exchange.v1.MsgChangePaymentTargetRequest")
	proto.RegisterType((*MsgChangePaymentTargetResponse)(nil), "provenance.exchange.v1.MsgChangePaymentTargetResponse")
	proto.RegisterType((*MsgGovCreateMarketRequest)(nil), "provenance.exchange.v1.MsgGovCreateMarketRequest")
	proto.RegisterType((*MsgGovCreateMarketResponse)(nil), "provenance.exchange.v1.MsgGovCreateMarketResponse")
	proto.RegisterType((*MsgGovManageFeesRequest)(nil), "provenance.exchange.v1.MsgGovManageFeesRequest")
	proto.RegisterType((*MsgGovManageFeesResponse)(nil), "provenance.exchange.v1.MsgGovManageFeesResponse")
	proto.RegisterType((*MsgGovCloseMarketRequest)(nil), "provenance.exchange.v1.MsgGovCloseMarketRequest")
	proto.RegisterType((*MsgGovCloseMarketResponse)(nil), "provenance.exchange.v1.MsgGovCloseMarketResponse")
	proto.RegisterType((*MsgGovUpdateParamsRequest)(nil), "provenance.exchange.v1.MsgGovUpdateParamsRequest")
	proto.RegisterType((*MsgGovUpdateParamsResponse)(nil), "provenance.exchange.v1.MsgGovUpdateParamsResponse")
}

func init() { proto.RegisterFile("provenance/exchange/v1/tx.proto", fileDescriptor_e333fcffc093bd1b) }

var fileDescriptor_e333fcffc093bd1b = []byte{
	// 2739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5b, 0x4b, 0x6f, 0x1c, 0x59,
	0xf5, 0x4f, 0xb9, 0xfd, 0xea, 0xe3, 0xc7, 0x24, 0xd7, 0x76, 0xd2, 0x6e, 0xc7, 0x6d, 0xa7, 0x93,
	0xfc, 0xff, 0x26, 0xc1, 0xed, 0xd8, 0x23, 0x12, 0x30, 0x33, 0x64, 0xdc, 0x4e, 0x1c, 0x79, 0xa4,
	0x04, 0xab, 0x93, 0x80, 0x34, 0x2c, 0x5a, 0xd7, 0x5d, 0x37, 0x9d, 0xc2, 0xd5, 0x55, 0x9d, 0xba,
	0xb7, 0x1d, 0x47, 0x42, 0x1a, 0x81, 0x90, 0x80, 0xc5, 0x48, 0x23, 0xb1, 0x65, 0x03, 0x42, 0x48,
	0x10, 0x24, 0x40, 0xa0, 0x11, 0xf0, 0x09, 0x66, 0xc1, 0x62, 0xc4, 0x8a, 0x15, 0x8c, 0x12, 0x09,
	0x3e, 0x02, 0x5b, 0x74, 0x1f, 0xd5, 0xf5, 0x7e, 0xb4, 0x27, 0xbd, 0x4a, 0xba, 0xea, 0x3c, 0x7e,
	0xbf, 0x73, 0xee, 0xad, 0x7b, 0xea, 0x9c, 0x32, 0xac, 0x74, 0x1d, 0xfb, 0x98, 0x58, 0xd8, 0x6a,
	0x91, 0x0d, 0x72, 0xd2, 0x7a, 0x8a, 0xad, 0x36, 0xd9, 0x38, 0xde, 0xdc, 0x60, 0x27, 0xb5, 0xae,
	0x63, 0x33, 0x1b, 0x9d, 0xf7, 0x04, 0x6a, 0xae, 0x40, 0xed, 0x78, 0xb3, 0x5c, 0x69, 0xd9, 0xb4,
	0x63, 0xd3, 0x8d, 0x43, 0x4c, 0xb9, 0xc2, 0x21, 0x61, 0x78, 0x73, 0xa3, 0x65, 0x1b, 0x96, 0xd4,
	0x2b, 0x5f, 0x50, 0xf7, 0x3b, 0xb4, 0xcd, 0xed, 0x75, 0x68, 0x5b, 0xdd, 0x58, 0x94, 0x37, 0x9a,
	0xe2, 0xd7, 0x86, 0xfc, 0xa1, 0x6e, 0xcd, 0xb7, 0xed, 0xb6, 0x2d, 0xaf, 0xf3, 0xff, 0xa9, 0xab,
	0x6b, 0x09, 0x10, 0x5b, 0x76, 0xa7, 0x63, 0xb0, 0x0e, 0xb1, 0x98, 0xab, 0x7f, 0x39, 0x41, 0xb2,
	0x83, 0x9d, 0x23, 0xc2, 0x32, 0x84, 0x6c, 0x47, 0x27, 0x4e, 0x96, 0xa5, 0x2e, 0x76, 0x70, 0xc7,
	0x15, 0xba, 0x9a, 0x28, 0xf4, 0xc2, 0x87, 0xaa, 0xfa, 0x47, 0x0d, 0xe6, 0xee, 0xd3, 0xf6, 0xae,
	0x43, 0x30, 0x23, 0x3b, 0xf4, 0xa8, 0x41, 0x9e, 0xf5, 0x08, 0x65, 0x68, 0x17, 0x8a, 0x98, 0x1e,
	0x35, 0x85, 0xdf, 0x92, 0xb6, 0xaa, 0xad, 0x4d, 0x6d, 0xad, 0xd6, 0xe2, 0xa3, 0x5d, 0xdb, 0xa1,
	0x47, 0xdf, 0xe4, 0x72, 0xf5, 0xd1, 0x4f, 0xff, 0xb9, 0x72, 0xa6, 0x31, 0x89, 0xd5, 0x6f, 0x74,
	0x0f, 0x90, 0x30, 0xd0, 0x6c, 0x71, 0xf3, 0x86, 0x6d, 0x35, 0x9f, 0x10, 0x52, 0x1a, 0x11, 0xd6,
	0x16, 0x6b, 0x2a, 0xba, 0x3c, 0x47, 0x35, 0x95, 0xa3, 0xda, 0xae, 0x6d, 0x58, 0x8d, 0xb3, 0x42,
	0x69, 0x57, 0xe9, 0xec, 0x11, 0xb2, 0x3d, 0xfb, 0x83, 0xff, 0xfc, 0xfe, 0x9a, 0x07, 0xa8, 0xba,
	0x09, 0xf3, 0x41, 0xd0, 0xb4, 0x6b, 0x5b, 0x94, 0xa0, 0x45, 0x98, 0x94, 0x0e, 0x0d, 0x5d, 0x80,
	0x1e, 0x6d, 0x4c, 0x88, 0xdf, 0xfb, 0x7a, 0x90, 0x68, 0xdd, 0xd0, 0x7d, 0x44, 0x0f, 0x0d, 0x3d,
	0x1f, 0xd1, 0xba, 0xa1, 0x07, 0x88, 0x1e, 0xaa, 0xdf, 0x6f, 0x9a, 0x68, 0x1f, 0x50, 0x80, 0xa8,
	0x00, 0x9d, 0x4d, 0xf4, 0x93, 0x11, 0x58, 0xe0, 0x3a, 0x62, 0x01, 0xee, 0xf5, 0x2c, 0x9d, 0xba,
	0x54, 0xb7, 0x60, 0x02, 0xb7, 0x5a, 0x76, 0xcf, 0x62, 0x42, 0xa7, 0x58, 0x2f, 0xfd, 0xfd, 0x4f,
	0xeb, 0xf3, 0x0a, 0xdd, 0x8e, 0xae, 0x3b, 0x84, 0xd2, 0x87, 0xcc, 0x31, 0xac, 0x76, 0xc3, 0x15,
	0x44, 0x4b, 0x50, 0x94, 0x0b, 0x94, 0x7b, 0xe2, 0x84, 0x66, 0x1a, 0x93, 0xf2, 0xc2, 0xbe, 0x8e,
	0x5a, 0x30, 0x8e, 0x3b, 0xc2, 0x5e, 0x61, 0xb5, 0x90, 0x4a, 0xb5, 0x7e, 0x83, 0x47, 0xec, 0x37,
	0xff, 0x5a, 0x59, 0x6b, 0x1b, 0xec, 0x69, 0xef, 0xb0, 0xd6, 0xb2, 0x3b, 0x6a, 0x7b, 0xa9, 0x7f,
	0xd6, 0xa9, 0x7e, 0xb4, 0xc1, 0x5e, 0x74, 0x09, 0x15, 0x0a, 0xb4, 0xa1, 0x4c, 0xa3, 0x77, 0x60,
	0x3a, 0x10, 0xd5, 0xd1, 0xac, 0xa8, 0x4e, 0xb5, 0xbc, 0x80, 0x72, 0xfc, 0xe4, 0x98, 0x58, 0xac,
	0xc9, 0x70, 0xbb, 0x34, 0xc6, 0x59, 0x37, 0x26, 0xc5, 0x85, 0x47, 0xb8, 0xbd, 0x3d, 0xcd, 0xa3,
	0xed, 0x52, 0xad, 0x96, 0xe0, 0x7c, 0x38, 0x6e, 0x32, 0xda, 0xd5, 0x67, 0x32, 0xa2, 0x7c, 0x3d,
	0x98, 0x22, 0xe1, 0x6e, 0x44, 0x6f, 0xc0, 0x38, 0x35, 0xda, 0x96, 0x5a, 0x39, 0x69, 0x01, 0x55,
	0x72, 0x81, 0xc4, 0x8d, 0x04, 0x12, 0xb7, 0x3d, 0xc5, 0xd1, 0x28, 0x39, 0x17, 0x8c, 0xdf, 0xa5,
	0x02, 0xf3, 0xdb, 0x02, 0xa0, 0xfb, 0xb4, 0xbd, 0x67, 0x98, 0x66, 0xdd, 0xf0, 0x92, 0xcb, 0xa1,
	0x10, 0xd3, 0xcc, 0x05, 0x45, 0xc8, 0xa5, 0xa7, 0xd6, 0x82, 0x69, 0x66, 0x33, 0x6c, 0x36, 0x31,
	0xa5, 0x84, 0xd1, 0x61, 0x24, 0x78, 0x4a, 0x38, 0xd8, 0x11, 0xf6, 0x51, 0x15, 0x66, 0xfa, 0xab,
	0xbe, 0x69, 0xe8, 0xb4, 0x34, 0xba, 0x5a, 0x58, 0x1b, 0x6d, 0x4c, 0xb9, 0x5b, 0x6c, 0x5f, 0xa7,
	0xe8, 0x5b, 0x50, 0x96, 0xd0, 0x9b, 0x94, 0x30, 0x66, 0x12, 0xfe, 0x1c, 0x6b, 0x3e, 0x31, 0x31,
	0x13, 0xeb, 0x62, 0x2c, 0x6b, 0x5d, 0x5c, 0x90, 0xca, 0x0f, 0xfb, 0xba, 0x7b, 0x26, 0x66, 0x7c,
	0x8d, 0x3c, 0x80, 0xf3, 0xfd, 0x47, 0x4b, 0x70, 0x07, 0x8f, 0x67, 0xd9, 0x9c, 0x73, 0x9f, 0x75,
	0xfe, 0x4d, 0xac, 0x12, 0x29, 0xbc, 0x55, 0x17, 0xc4, 0x63, 0xc7, 0xcb, 0x96, 0xca, 0xe2, 0x2f,
	0xbd, 0x2c, 0xee, 0xd0, 0xa3, 0x7e, 0x16, 0x6b, 0x30, 0x76, 0xd8, 0x7b, 0x91, 0x23, 0x89, 0x52,
	0x2c, 0x3d, 0x87, 0xef, 0x81, 0x0c, 0x71, 0xb3, 0xeb, 0x18, 0x2d, 0x52, 0x2a, 0x64, 0x90, 0x51,
	0x4f, 0x35, 0x10, 0x3a, 0x07, 0x5c, 0x85, 0x67, 0xc5, 0x8b, 0x8c, 0x2f, 0x2b, 0x2e, 0x6b, 0x9e,
	0x95, 0x0f, 0x61, 0x41, 0x60, 0x09, 0x24, 0x85, 0x10, 0x5a, 0x1a, 0x7b, 0xf3, 0x4b, 0x66, 0x4e,
	0x78, 0xf2, 0x65, 0x90, 0x10, 0xca, 0xd3, 0xe7, 0x2d, 0x9d, 0x01, 0xd3, 0xe7, 0x2e, 0x2f, 0x7f,
	0xfa, 0x80, 0xa7, 0x4f, 0xc6, 0xd7, 0x97, 0x3d, 0x99, 0x25, 0x95, 0xbd, 0xcf, 0x35, 0xb1, 0x3d,
	0xef, 0x8b, 0x48, 0x4b, 0x38, 0xbe, 0x0c, 0x62, 0xbd, 0x63, 0x58, 0xd9, 0x19, 0x14, 0x62, 0xe9,
	0x19, 0x8c, 0xc4, 0xbf, 0x10, 0x8d, 0x7f, 0x9e, 0x9d, 0x73, 0x15, 0x66, 0xc9, 0x49, 0x97, 0xb4,
	0x58, 0xb3, 0x8b, 0x1d, 0x66, 0x60, 0x53, 0xec, 0x96, 0xc9, 0xc6, 0x8c, 0xbc, 0x7a, 0x20, 0x2f,
	0x2a, 0xe6, 0x02, 0x57, 0x75, 0x11, 0x2e, 0x44, 0x18, 0x2a, 0xf6, 0xbf, 0x2a, 0xc0, 0x6a, 0xff,
	0xde, 0x6e, 0xbf, 0xd0, 0x19, 0x62, 0x1c, 0x76, 0x61, 0xdc, 0xb0, 0xba, 0xbd, 0xfe, 0x73, 0xe8,
	0x6a, 0x62, 0x29, 0x22, 0x9f, 0xe5, 0x3b, 0xe2, 0xe8, 0x50, 0x0b, 0x5a, 0xa9, 0xa2, 0xbb, 0x30,
	0x61, 0xf7, 0x98, 0xb0, 0x32, 0x3a, 0xb8, 0x15, 0x57, 0x17, 0xdd, 0x86, 0x51, 0xdf, 0xf2, 0x1e,
	0xc8, 0x86, 0x50, 0xe4, 0x06, 0x2c, 0x7c, 0x4c, 0x4b, 0xe3, 0xe9, 0x06, 0x1e, 0x10, 0x26, 0x9e,
	0x8d, 0x62, 0x27, 0xba, 0x06, 0xb8, 0x62, 0xf0, 0x4c, 0x9b, 0x08, 0x9d, 0x69, 0xfe, 0x1c, 0x5e,
	0x86, 0x4b, 0x29, 0x79, 0x52, 0xd9, 0xfc, 0xb7, 0x06, 0xd5, 0xbe, 0x54, 0x83, 0x98, 0x04, 0x53,
	0xe2, 0x09, 0xd3, 0xa1, 0xe4, 0xf3, 0x7d, 0x00, 0x66, 0x37, 0x1d, 0xe9, 0xec, 0x34, 0x39, 0x2d,
	0x32, 0x5b, 0x41, 0x0d, 0x46, 0x63, 0x34, 0x25, 0x1a, 0x57, 0xe1, 0x72, 0x2a, 0x4f, 0x15, 0x8f,
	0xbf, 0xf8, 0xe3, 0xf1, 0x90, 0x30, 0xb1, 0x89, 0xee, 0x9e, 0x30, 0xe2, 0x58, 0xd8, 0xdc, 0xbf,
	0x33, 0x94, 0x78, 0xf8, 0xab, 0x82, 0x42, 0xa0, 0x2a, 0x40, 0x2b, 0x30, 0x45, 0x94, 0x73, 0x7e,
	0x57, 0x12, 0x04, 0xf7, 0xd2, 0xbe, 0x9e, 0x48, 0x31, 0x0e, 0xba, 0xa2, 0xf8, 0x5f, 0x0d, 0x4a,
	0x7d, 0xb9, 0x6f, 0x1b, 0xec, 0xa9, 0xee, 0xe0, 0xe7, 0x43, 0x21, 0xb6, 0x2c, 0x12, 0x8d, 0xa5,
	0x9e, 0xa0, 0x56, 0xe4, 0xb9, 0x53, 0x86, 0x7c, 0x05, 0xe4, 0xe8, 0xd0, 0x0a, 0xc8, 0x40, 0x80,
	0x96, 0x60, 0x31, 0x86, 0xb8, 0x0a, 0xcb, 0xdf, 0x34, 0x58, 0xee, 0xdf, 0x7d, 0xdc, 0xd5, 0x31,
	0x23, 0x77, 0x08, 0xc3, 0x86, 0x39, 0x9c, 0x4d, 0xd0, 0x80, 0x59, 0x75, 0x53, 0x97, 0x5e, 0xd4,
	0x09, 0x9d, 0xb8, 0x11, 0x24, 0x30, 0x05, 0x49, 0x6d, 0x84, 0x99, 0x8e, 0xff, 0x62, 0x80, 0xeb,
	0x2a, 0x54, 0x92, 0xd8, 0x28, 0xc2, 0xbf, 0x8b, 0x12, 0xbe, 0x6b, 0xe1, 0x43, 0x93, 0xe8, 0x5e,
	0x55, 0x19, 0x20, 0x5c, 0x4e, 0x22, 0x5c, 0xd2, 0x5c, 0xca, 0x2b, 0x11, 0xca, 0xf5, 0x91, 0x92,
	0xe6, 0xa3, 0xbd, 0x0e, 0x67, 0x71, 0xab, 0x45, 0xba, 0xcc, 0xb0, 0xda, 0xf2, 0xd4, 0x92, 0xc4,
	0x27, 0x85, 0xdc, 0x5b, 0xfd, 0x7b, 0x62, 0xf1, 0x52, 0x59, 0xa3, 0xbb, 0x20, 0xaa, 0x57, 0x22,
	0x9c, 0xfa, 0x80, 0x25, 0xa7, 0xed, 0x91, 0x92, 0x56, 0x7d, 0xa9, 0xc1, 0xd5, 0x90, 0xd8, 0x4e,
	0xd0, 0xec, 0x50, 0x12, 0xfa, 0xa5, 0x24, 0x66, 0x51, 0x56, 0xfe, 0x3c, 0xad, 0xc1, 0xff, 0x65,
	0x81, 0xf5, 0xf2, 0xb5, 0x1a, 0x12, 0x7d, 0x4c, 0xdd, 0x7a, 0x68, 0x28, 0x94, 0xb6, 0x60, 0x01,
	0x9b, 0xa6, 0xfd, 0xbc, 0xd9, 0xa3, 0x81, 0x0a, 0x4f, 0xf1, 0x9a, 0x13, 0x37, 0x3d, 0x0c, 0xfc,
	0x56, 0xe2, 0x09, 0x14, 0x05, 0xac, 0x68, 0xfd, 0x55, 0x83, 0x6b, 0x49, 0x11, 0x18, 0xf6, 0x49,
	0xf4, 0x36, 0x2c, 0x78, 0x39, 0xf3, 0x35, 0x6d, 0x14, 0xc1, 0x79, 0x1c, 0x03, 0x24, 0xc0, 0x70,
	0x1d, 0xae, 0xe7, 0xc2, 0xae, 0xb8, 0xfe, 0x41, 0x83, 0xff, 0x0f, 0xc9, 0xef, 0x5b, 0x8c, 0x38,
	0x1d, 0xa2, 0x1b, 0xd8, 0x79, 0x71, 0x87, 0x58, 0x76, 0x67, 0x28, 0x44, 0xd7, 0x01, 0x19, 0x3e,
	0x47, 0x4d, 0x9d, 0x7b, 0x52, 0x4f, 0xe4, 0x73, 0x46, 0x18, 0x42, 0x80, 0xe2, 0x35, 0x58, 0xcb,
	0x86, 0xac, 0xf8, 0xfd, 0x7a, 0xc4, 0x97, 0xf1, 0xfb, 0xd8, 0xc2, 0x6d, 0x72, 0x40, 0x9c, 0x8e,
	0x41, 0xa9, 0x61, 0x5b, 0x74, 0x58, 0x67, 0x8c, 0x43, 0x8e, 0xed, 0x23, 0xd2, 0xc4, 0xa6, 0x29,
	0x8a, 0x89, 0x62, 0xa3, 0x28, 0xaf, 0xec, 0x98, 0x26, 0xda, 0x83, 0xa2, 0xa8, 0x35, 0xf8, 0x6f,
	0x75, 0xcc, 0x5c, 0x4e, 0x29, 0x35, 0x08, 0xa5, 0xf7, 0x1c, 0xdc, 0x2f, 0x34, 0x26, 0x79, 0xa1,
	0xc1, 0x55, 0xd1, 0x1d, 0x98, 0x64, 0x76, 0xb3, 0xcd, 0xef, 0xa9, 0xda, 0x6f, 0x00, 0x33, 0x13,
	0xcc, 0x16, 0x3f, 0x03, 0x71, 0xbd, 0xe2, 0x2b, 0x34, 0x62, 0x42, 0xe5, 0x46, 0xb4, 0xe0, 0x7b,
	0xe6, 0x49, 0xb1, 0x06, 0x79, 0xb6, 0xc3, 0xd8, 0xd0, 0x9e, 0x62, 0xe7, 0xc4, 0x4b, 0x14, 0x69,
	0xf2, 0x57, 0x0f, 0x79, 0x7a, 0xab, 0xa8, 0xce, 0xb6, 0xdc, 0x8e, 0xdb, 0x23, 0x7e, 0x84, 0xa3,
	0x0d, 0x98, 0x0f, 0x8a, 0x3a, 0xa4, 0x63, 0x1f, 0xcb, 0x28, 0x17, 0x1b, 0xe7, 0x7c, 0xd2, 0x0d,
	0x71, 0xc3, 0x67, 0x9b, 0xbf, 0xb2, 0x28, 0xdb, 0x63, 0x7e, 0xdb, 0x75, 0x43, 0x0f, 0xdb, 0x56,
	0xa2, 0xca, 0xf6, 0xb8, 0xdf, 0xb6, 0x90, 0x56, 0xb6, 0x6f, 0x41, 0x49, 0x29, 0x78, 0xdb, 0xd8,
	0x75, 0x31, 0x21, 0x94, 0x16, 0xe4, 0x7d, 0x6f, 0x5b, 0x4a, 0x4f, 0xef, 0xc2, 0x52, 0xac, 0xa2,
	0x72, 0x38, 0x29, 0x74, 0x4b, 0x51, 0x5d, 0xe9, 0x37, 0x90, 0xd1, 0x4b, 0xb0, 0x92, 0x98, 0x2a,
	0x95, 0xce, 0x0f, 0xc4, 0x7b, 0x95, 0xec, 0xe8, 0x1d, 0xc8, 0x5e, 0xac, 0x9b, 0xc6, 0xdb, 0x30,
	0xa1, 0xba, 0xb3, 0xaa, 0x11, 0xb9, 0x92, 0xb4, 0xc0, 0x94, 0xa2, 0xbb, 0xb8, 0x94, 0x56, 0xb5,
	0x2c, 0xca, 0xba, 0x90, 0xed, 0x80, 0x5f, 0xf9, 0x6c, 0x1a, 0x8e, 0xdf, 0x90, 0x6d, 0xe5, 0xf7,
	0xa5, 0x26, 0x1c, 0x37, 0xc8, 0x77, 0xc5, 0x8b, 0x66, 0xc0, 0xf1, 0x0d, 0x18, 0x67, 0xd8, 0x69,
	0x93, 0xec, 0x7e, 0xa4, 0x92, 0x13, 0x5d, 0x2e, 0xbb, 0xe7, 0xb4, 0x64, 0x73, 0x35, 0xbd, 0xcb,
	0x25, 0xe4, 0xc2, 0xf5, 0x73, 0x21, 0x52, 0x3f, 0xcb, 0x6e, 0x8d, 0xb4, 0xaf, 0x98, 0x84, 0xc0,
	0x2a, 0x26, 0x1f, 0x69, 0xd1, 0x9b, 0xf4, 0xf4, 0x54, 0xb6, 0x60, 0x42, 0x42, 0xa4, 0xa5, 0x11,
	0xbe, 0xc4, 0xd2, 0xba, 0xb1, 0x4a, 0x30, 0x88, 0x55, 0xd6, 0xb2, 0x61, 0x38, 0x0a, 0xec, 0xf7,
	0xe4, 0x52, 0x10, 0xfd, 0xc3, 0x18, 0xac, 0x2a, 0x88, 0x5a, 0xce, 0x20, 0x5e, 0x82, 0x69, 0x5f,
	0x10, 0x15, 0xe0, 0xc6, 0x94, 0x17, 0x45, 0x17, 0x9a, 0x94, 0x57, 0xd0, 0xc2, 0xde, 0x15, 0xb4,
	0x3f, 0xcb, 0xaa, 0x73, 0x57, 0xac, 0x2a, 0x75, 0xf7, 0x91, 0xa0, 0x74, 0x7a, 0x80, 0xa1, 0x2c,
	0x8f, 0x84, 0xb3, 0x8c, 0x6e, 0x01, 0x58, 0xe4, 0x79, 0x53, 0xe5, 0xa8, 0x90, 0x61, 0xb6, 0x68,
	0x91, 0xe7, 0x12, 0x52, 0x90, 0x97, 0x2c, 0xa9, 0x63, 0x91, 0x2b, 0x72, 0x3f, 0xd7, 0x04, 0xf5,
	0x7b, 0xf6, 0xb1, 0xdc, 0x86, 0xee, 0xeb, 0xa6, 0x24, 0x76, 0x13, 0x8a, 0xb8, 0xc7, 0x9e, 0xda,
	0x8e, 0xc1, 0x5e, 0x64, 0x72, 0xf3, 0x44, 0xd1, 0x3b, 0x30, 0x2e, 0x9f, 0xcf, 0x6a, 0xa6, 0x50,
	0x49, 0x7f, 0x45, 0x70, 0x1b, 0x1f, 0x52, 0xc7, 0x9d, 0x9e, 0xb8, 0xd6, 0xaa, 0x17, 0xa1, 0x1c,
	0x07, 0x51, 0x31, 0xf8, 0x64, 0x46, 0x6c, 0xd8, 0x7b, 0xf6, 0xb1, 0x7c, 0x82, 0xed, 0x11, 0x42,
	0xbf, 0x28, 0xfe, 0xd4, 0x03, 0xe7, 0x31, 0x5c, 0xc0, 0xba, 0xde, 0x7c, 0x42, 0x48, 0xd3, 0x77,
	0x9a, 0x3c, 0x31, 0x71, 0x8e, 0xb1, 0x82, 0x24, 0x3a, 0x87, 0x75, 0x7d, 0x8f, 0x90, 0xfe, 0x3c,
	0x68, 0xcf, 0xc4, 0x0c, 0x7d, 0x07, 0xca, 0xf2, 0x09, 0x1e, 0x6b, 0x79, 0x34, 0x9f, 0xe5, 0xf3,
	0xd2, 0x44, 0xc4, 0x78, 0x14, 0x33, 0x3f, 0xa5, 0x84, 0xe5, 0xb1, 0x53, 0x60, 0xae, 0x1b, 0x7a,
	0x32, 0xe6, 0xbe, 0xe5, 0xf1, 0xd3, 0x61, 0x76, 0x8d, 0xb7, 0xa0, 0xe2, 0x62, 0x8e, 0x6f, 0xa3,
	0x8b, 0x63, 0x32, 0x87, 0x83, 0xb2, 0x84, 0xfe, 0x30, 0xa6, 0x9d, 0x8e, 0x0c, 0xb8, 0xe4, 0x63,
	0x90, 0xe0, 0x67, 0x32, 0x9f, 0x9f, 0xe5, 0x3e, 0x91, 0x58, 0x57, 0x16, 0xac, 0x26, 0xf3, 0x71,
	0x30, 0x33, 0x6c, 0x5a, 0x2a, 0x0a, 0x4f, 0x89, 0x03, 0xbd, 0x3d, 0x42, 0x1a, 0x5c, 0x50, 0x39,
	0xbc, 0x18, 0x4f, 0x4c, 0x88, 0x50, 0xc4, 0xe0, 0x72, 0x2a, 0x35, 0xe5, 0x12, 0x06, 0x72, 0xb9,
	0x92, 0xc8, 0x51, 0x79, 0xc5, 0xb0, 0xec, 0xb2, 0x8c, 0xb6, 0xd9, 0x79, 0x30, 0xa7, 0xf2, 0x05,
	0x73, 0x51, 0x72, 0xab, 0x87, 0x1a, 0xe8, 0x3c, 0x90, 0x6d, 0x58, 0xf5, 0x11, 0x8b, 0xf7, 0x32,
	0x9d, 0xcf, 0xcb, 0xc5, 0x3e, 0x9d, 0x38, 0x47, 0x26, 0xac, 0x24, 0x72, 0x51, 0xd1, 0x9b, 0x19,
	0x28, 0x7a, 0x4b, 0xb1, 0xa4, 0x54, 0xe4, 0x1c, 0xa8, 0xa6, 0xd1, 0x52, 0x0e, 0x67, 0x07, 0x72,
	0x58, 0x49, 0xe2, 0xa7, 0x7c, 0xfa, 0xf6, 0x58, 0xb4, 0xa6, 0x14, 0x81, 0x7c, 0x6b, 0xa0, 0x3d,
	0xb6, 0x1b, 0xaa, 0x3a, 0x63, 0xf6, 0x58, 0x82, 0x9f, 0xb3, 0x83, 0xee, 0xb1, 0x58, 0x57, 0xef,
	0x43, 0x95, 0x12, 0x26, 0xfd, 0x78, 0x0e, 0x7c, 0x51, 0x3c, 0x34, 0xba, 0xb4, 0x74, 0x4e, 0x3c,
	0xd1, 0x2b, 0x94, 0x30, 0x6e, 0x27, 0xd4, 0x68, 0x16, 0x05, 0xa3, 0xd1, 0xa5, 0xe8, 0x01, 0x5c,
	0xe9, 0x59, 0x39, 0xac, 0x21, 0xf1, 0xe6, 0xbd, 0x2a, 0x64, 0x53, 0xec, 0x45, 0x8e, 0x35, 0x59,
	0xbb, 0x85, 0xce, 0x2d, 0x75, 0xa8, 0x7d, 0xe8, 0xde, 0xdb, 0x35, 0x6d, 0xfa, 0x86, 0x0e, 0xe5,
	0xb4, 0x43, 0x2d, 0x02, 0x6e, 0xa9, 0x5f, 0x16, 0xf8, 0x01, 0x44, 0x8a, 0x06, 0xf9, 0x7a, 0x7d,
	0x20, 0x3e, 0xe4, 0x78, 0x03, 0x45, 0x83, 0xfc, 0x22, 0x24, 0xab, 0x68, 0x90, 0xee, 0xdc, 0xa2,
	0x41, 0xea, 0x24, 0x17, 0x0d, 0x41, 0x88, 0x92, 0xc1, 0xd6, 0xf7, 0x97, 0xa1, 0x70, 0x9f, 0xb6,
	0xd1, 0x13, 0x28, 0xf6, 0x0f, 0x4a, 0x74, 0x3d, 0xb1, 0x4a, 0x89, 0x7e, 0x70, 0x52, 0xfe, 0x72,
	0x3e, 0x61, 0xf5, 0xfd, 0x43, 0xdf, 0x4f, 0xdd, 0xd0, 0x73, 0xf8, 0xf1, 0xbe, 0xf7, 0xc8, 0xe1,
	0xc7, 0xff, 0x9d, 0x85, 0x09, 0x53, 0xbe, 0x0f, 0x02, 0xd0, 0x7a, 0x9a, 0x72, 0xe4, 0x83, 0x8b,
	0x72, 0x2d, 0xaf, 0xb8, 0xcf, 0x9b, 0x37, 0xf1, 0x4f, 0xf7, 0x16, 0xf9, 0x18, 0x21, 0xdd, 0x5b,
	0xf4, 0x43, 0x02, 0xd4, 0x82, 0x49, 0x77, 0x2c, 0x8d, 0xae, 0xa5, 0xe8, 0x86, 0xbe, 0x34, 0x28,
	0x5f, 0xcf, 0x25, 0x1b, 0x74, 0xb2, 0x43, 0x8f, 0xb2, 0x9d, 0xf8, 0x06, 0xe1, 0x99, 0x4e, 0xfc,
	0xe3, 0x58, 0x64, 0xc3, 0xb4, 0x7f, 0x50, 0x89, 0xd2, 0x22, 0x11, 0x33, 0xb3, 0x2d, 0x6f, 0xe4,
	0x96, 0x57, 0x0e, 0x3f, 0xd2, 0xe0, 0x7c, 0xfc, 0x58, 0x0d, 0x7d, 0x35, 0xd3, 0x56, 0xc2, 0xc4,
	0xb4, 0xfc, 0xb5, 0x53, 0x68, 0x2a, 0x3c, 0x3f, 0xe5, 0xaf, 0xa6, 0x09, 0x83, 0x2d, 0xb4, 0x9d,
	0x69, 0x37, 0x71, 0xea, 0x57, 0xfe, 0xfa, 0xa9, 0x74, 0x23, 0xa8, 0xa2, 0xb3, 0xa8, 0x1c, 0xa8,
	0x12, 0x67, 0x6f, 0x39, 0x50, 0x25, 0x0f, 0xbf, 0x50, 0x0f, 0x66, 0x83, 0xf3, 0x1f, 0x74, 0x23,
	0xd3, 0x5c, 0x68, 0x46, 0x56, 0xde, 0x1c, 0x40, 0x43, 0xb9, 0xfd, 0xa1, 0x06, 0x73, 0x31, 0xb3,
	0x18, 0xf4, 0x95, 0x4c, 0x53, 0x71, 0x93, 0xa8, 0xf2, 0xcd, 0x41, 0xd5, 0x14, 0x8c, 0x9f, 0x84,
	0x60, 0xa8, 0xf1, 0x49, 0x6e, 0x18, 0xc1, 0xf9, 0x50, 0x6e, 0x18, 0xa1, 0x29, 0x4d, 0xb5, 0xf0,
	0xe3, 0x11, 0x0d, 0xfd, 0x4c, 0x83, 0xa5, 0x94, 0xb1, 0x07, 0x7a, 0x37, 0xa7, 0xf1, 0xf8, 0xd9,
	0x4e, 0xf9, 0x1b, 0xa7, 0x55, 0x8f, 0x6c, 0xf2, 0xf0, 0xe4, 0x22, 0xc7, 0x26, 0x4f, 0x98, 0xce,
	0xe4, 0xd8, 0xe4, 0x49, 0x63, 0x12, 0xf4, 0x52, 0x83, 0xd5, 0xac, 0x39, 0x03, 0xaa, 0x0f, 0x4a,
	0x3a, 0x66, 0xd3, 0xef, 0x7e, 0x21, 0x1b, 0x0a, 0xed, 0x2f, 0x34, 0x58, 0x4e, 0x1d, 0x19, 0xa0,
	0xdb, 0x39, 0xdd, 0x24, 0xcd, 0x47, 0xca, 0xef, 0x9d, 0xde, 0x80, 0x02, 0xf9, 0xb1, 0x06, 0x17,
	0x12, 0xfa, 0xef, 0x28, 0x3b, 0x53, 0x49, 0xe3, 0x8d, 0xf2, 0xf6, 0x69, 0x54, 0x15, 0xa4, 0x1f,
	0x69, 0x30, 0x1f, 0xd7, 0x40, 0x46, 0x37, 0x73, 0x1a, 0x0d, 0x0d, 0x07, 0xca, 0xb7, 0x06, 0xd6,
	0x53, 0x48, 0x1c, 0x98, 0x09, 0xb4, 0x92, 0xd1, 0x46, 0x66, 0xe9, 0x14, 0xec, 0xef, 0x96, 0x6f,
	0xe4, 0x57, 0xf0, 0x7c, 0x06, 0xda, 0xc8, 0xa9, 0x3e, 0xe3, 0x9a, 0xd9, 0xa9, 0x3e, 0x63, 0x3b,
	0xd4, 0xdc, 0x67, 0xa0, 0x89, 0x9a, 0xea, 0x33, 0xae, 0x8f, 0x9d, 0xea, 0x33, 0xb6, 0x97, 0xcc,
	0x0f, 0xa1, 0x60, 0xe3, 0x16, 0xe5, 0xb6, 0x41, 0xf3, 0x1c, 0x42, 0xf1, 0x5d, 0x61, 0xee, 0x36,
	0xd8, 0x94, 0x4d, 0x75, 0x1b, 0xdb, 0x3d, 0x4e, 0x75, 0x1b, 0xdf, 0xf1, 0x15, 0x67, 0x5f, 0x4c,
	0xd3, 0x34, 0xf5, 0xd0, 0x49, 0x6e, 0x0f, 0xa7, 0x1e, 0x3a, 0x29, 0xbd, 0x59, 0x74, 0x02, 0x6f,
	0x85, 0x9a, 0x9e, 0x28, 0x8d, 0x4c, 0x7c, 0x0f, 0xb7, 0xbc, 0x35, 0x88, 0x8a, 0xb7, 0xc4, 0x02,
	0xef, 0xa5, 0xa9, 0x4b, 0x2c, 0xae, 0xf3, 0x9a, 0xba, 0xc4, 0x62, 0x5f, 0x79, 0x79, 0xae, 0x83,
	0xaf, 0x9b, 0x28, 0xc3, 0x46, 0xf4, 0xd5, 0xb8, 0xbc, 0x39, 0x80, 0x46, 0x20, 0xc8, 0xfe, 0x97,
	0xc4, 0xac, 0x20, 0xc7, 0xbc, 0xf3, 0x66, 0x05, 0x39, 0xee, 0x1d, 0xb4, 0x4e, 0x3e, 0x7d, 0x55,
	0xd1, 0x3e, 0x7b, 0x55, 0xd1, 0x3e, 0x7f, 0x55, 0xd1, 0x3e, 0x7e, 0x5d, 0x39, 0xf3, 0xd9, 0xeb,
	0xca, 0x99, 0x7f, 0xbc, 0xae, 0x9c, 0x81, 0x45, 0xc3, 0x4e, 0xb0, 0x77, 0xa0, 0x7d, 0x50, 0xf3,
	0x7d, 0x50, 0xe4, 0x09, 0xad, 0x1b, 0xb6, 0xef, 0xd7, 0xc6, 0x49, 0xff, 0x6f, 0x28, 0x0e, 0xc7,
	0xc5, 0x1f, 0x4e, 0xbc, 0xfd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x09, 0x38, 0xc6, 0x9d,
	0x32, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateAsk creates an ask order (to sell something you own).
	CreateAsk(ctx context.Context, in *MsgCreateAskRequest, opts ...grpc.CallOption) (*MsgCreateAskResponse, error)
	// CreateBid creates a bid order (to buy something you want).
	CreateBid(ctx context.Context, in *MsgCreateBidRequest, opts ...grpc.CallOption) (*MsgCreateBidResponse, error)
	// CommitFunds marks funds in an account as manageable by a market.
	CommitFunds(ctx context.Context, in *MsgCommitFundsRequest, opts ...grpc.CallOption) (*MsgCommitFundsResponse, error)
	// CancelOrder cancels an order.
	CancelOrder(ctx context.Context, in *MsgCancelOrderRequest, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error)
	// FillBids uses the assets in your account to fulfill one or more bids (similar to a fill-or-cancel ask).
	FillBids(ctx context.Context, in *MsgFillBidsRequest, opts ...grpc.CallOption) (*MsgFillBidsResponse, error)
	// FillAsks uses the funds in your account to fulfill one or more asks (similar to a fill-or-cancel bid).
	FillAsks(ctx context.Context, in *MsgFillAsksRequest, opts ...grpc.CallOption) (*MsgFillAsksResponse, error)
	// MarketSettle is a market endpoint to trigger the settlement of orders.
	MarketSettle(ctx context.Context, in *MsgMarketSettleRequest, opts ...grpc.CallOption) (*MsgMarketSettleResponse, error)
	// MarketCommitmentSettle is a market endpoint to transfer committed funds.
	MarketCommitmentSettle(ctx context.Context, in *MsgMarketCommitmentSettleRequest, opts ...grpc.CallOption) (*MsgMarketCommitmentSettleResponse, error)
	// MarketReleaseCommitments is a market endpoint return control of funds back to the account owner(s).
	MarketReleaseCommitments(ctx context.Context, in *MsgMarketReleaseCommitmentsRequest, opts ...grpc.CallOption) (*MsgMarketReleaseCommitmentsResponse, error)
	// MarketSetOrderExternalID updates an order's external id field.
	MarketSetOrderExternalID(ctx context.Context, in *MsgMarketSetOrderExternalIDRequest, opts ...grpc.CallOption) (*MsgMarketSetOrderExternalIDResponse, error)
	// MarketWithdraw is a market endpoint to withdraw fees that have been collected.
	MarketWithdraw(ctx context.Context, in *MsgMarketWithdrawRequest, opts ...grpc.CallOption) (*MsgMarketWithdrawResponse, error)
	// MarketUpdateDetails is a market endpoint to update its details.
	MarketUpdateDetails(ctx context.Context, in *MsgMarketUpdateDetailsRequest, opts ...grpc.CallOption) (*MsgMarketUpdateDetailsResponse, error)
	// MarketUpdateEnabled is a market endpoint to update whether its accepting orders.
	// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
	MarketUpdateEnabled(ctx context.Context, in *MsgMarketUpdateEnabledRequest, opts ...grpc.CallOption) (*MsgMarketUpdateEnabledResponse, error)
	// MarketUpdateAcceptingOrders is a market endpoint to update whether its accepting orders.
	MarketUpdateAcceptingOrders(ctx context.Context, in *MsgMarketUpdateAcceptingOrdersRequest, opts ...grpc.CallOption) (*MsgMarketUpdateAcceptingOrdersResponse, error)
	// MarketUpdateUserSettle is a market endpoint to update whether it allows user-initiated settlement.
	MarketUpdateUserSettle(ctx context.Context, in *MsgMarketUpdateUserSettleRequest, opts ...grpc.CallOption) (*MsgMarketUpdateUserSettleResponse, error)
	// MarketUpdateAcceptingCommitments is a market endpoint to update whether it accepts commitments.
	MarketUpdateAcceptingCommitments(ctx context.Context, in *MsgMarketUpdateAcceptingCommitmentsRequest, opts ...grpc.CallOption) (*MsgMarketUpdateAcceptingCommitmentsResponse, error)
	// MarketUpdateIntermediaryDenom sets a market's intermediary denom.
	MarketUpdateIntermediaryDenom(ctx context.Context, in *MsgMarketUpdateIntermediaryDenomRequest, opts ...grpc.CallOption) (*MsgMarketUpdateIntermediaryDenomResponse, error)
	// MarketManagePermissions is a market endpoint to manage a market's user permissions.
	MarketManagePermissions(ctx context.Context, in *MsgMarketManagePermissionsRequest, opts ...grpc.CallOption) (*MsgMarketManagePermissionsResponse, error)
	// MarketManageReqAttrs is a market endpoint to manage the attributes required to interact with it.
	MarketManageReqAttrs(ctx context.Context, in *MsgMarketManageReqAttrsRequest, opts ...grpc.CallOption) (*MsgMarketManageReqAttrsResponse, error)
	// CreatePayment creates a payment to facilitate a trade between two accounts.
	CreatePayment(ctx context.Context, in *MsgCreatePaymentRequest, opts ...grpc.CallOption) (*MsgCreatePaymentResponse, error)
	// AcceptPayment is used by a target to accept a payment.
	AcceptPayment(ctx context.Context, in *MsgAcceptPaymentRequest, opts ...grpc.CallOption) (*MsgAcceptPaymentResponse, error)
	// RejectPayment can be used by a target to reject a payment.
	RejectPayment(ctx context.Context, in *MsgRejectPaymentRequest, opts ...grpc.CallOption) (*MsgRejectPaymentResponse, error)
	// RejectPayments can be used by a target to reject all payments from one or more sources.
	RejectPayments(ctx context.Context, in *MsgRejectPaymentsRequest, opts ...grpc.CallOption) (*MsgRejectPaymentsResponse, error)
	// CancelPayments can be used by a source to cancel one or more payments.
	CancelPayments(ctx context.Context, in *MsgCancelPaymentsRequest, opts ...grpc.CallOption) (*MsgCancelPaymentsResponse, error)
	// ChangePaymentTarget can be used by a source to change the target in one of their payments.
	ChangePaymentTarget(ctx context.Context, in *MsgChangePaymentTargetRequest, opts ...grpc.CallOption) (*MsgChangePaymentTargetResponse, error)
	// GovCreateMarket is a governance proposal endpoint for creating a market.
	GovCreateMarket(ctx context.Context, in *MsgGovCreateMarketRequest, opts ...grpc.CallOption) (*MsgGovCreateMarketResponse, error)
	// GovManageFees is a governance proposal endpoint for updating a market's fees.
	GovManageFees(ctx context.Context, in *MsgGovManageFeesRequest, opts ...grpc.CallOption) (*MsgGovManageFeesResponse, error)
	// GovCloseMarket is a governance proposal endpoint that will disable order and commitment creation,
	// cancel all orders, and release all commitments.
	GovCloseMarket(ctx context.Context, in *MsgGovCloseMarketRequest, opts ...grpc.CallOption) (*MsgGovCloseMarketResponse, error)
	// GovUpdateParams is a governance proposal endpoint for updating the exchange module's params.
	GovUpdateParams(ctx context.Context, in *MsgGovUpdateParamsRequest, opts ...grpc.CallOption) (*MsgGovUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAsk(ctx context.Context, in *MsgCreateAskRequest, opts ...grpc.CallOption) (*MsgCreateAskResponse, error) {
	out := new(MsgCreateAskResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CreateAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBid(ctx context.Context, in *MsgCreateBidRequest, opts ...grpc.CallOption) (*MsgCreateBidResponse, error) {
	out := new(MsgCreateBidResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CreateBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitFunds(ctx context.Context, in *MsgCommitFundsRequest, opts ...grpc.CallOption) (*MsgCommitFundsResponse, error) {
	out := new(MsgCommitFundsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CommitFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelOrder(ctx context.Context, in *MsgCancelOrderRequest, opts ...grpc.CallOption) (*MsgCancelOrderResponse, error) {
	out := new(MsgCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FillBids(ctx context.Context, in *MsgFillBidsRequest, opts ...grpc.CallOption) (*MsgFillBidsResponse, error) {
	out := new(MsgFillBidsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/FillBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FillAsks(ctx context.Context, in *MsgFillAsksRequest, opts ...grpc.CallOption) (*MsgFillAsksResponse, error) {
	out := new(MsgFillAsksResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/FillAsks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketSettle(ctx context.Context, in *MsgMarketSettleRequest, opts ...grpc.CallOption) (*MsgMarketSettleResponse, error) {
	out := new(MsgMarketSettleResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketCommitmentSettle(ctx context.Context, in *MsgMarketCommitmentSettleRequest, opts ...grpc.CallOption) (*MsgMarketCommitmentSettleResponse, error) {
	out := new(MsgMarketCommitmentSettleResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketCommitmentSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketReleaseCommitments(ctx context.Context, in *MsgMarketReleaseCommitmentsRequest, opts ...grpc.CallOption) (*MsgMarketReleaseCommitmentsResponse, error) {
	out := new(MsgMarketReleaseCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketReleaseCommitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketSetOrderExternalID(ctx context.Context, in *MsgMarketSetOrderExternalIDRequest, opts ...grpc.CallOption) (*MsgMarketSetOrderExternalIDResponse, error) {
	out := new(MsgMarketSetOrderExternalIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketSetOrderExternalID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketWithdraw(ctx context.Context, in *MsgMarketWithdrawRequest, opts ...grpc.CallOption) (*MsgMarketWithdrawResponse, error) {
	out := new(MsgMarketWithdrawResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketUpdateDetails(ctx context.Context, in *MsgMarketUpdateDetailsRequest, opts ...grpc.CallOption) (*MsgMarketUpdateDetailsResponse, error) {
	out := new(MsgMarketUpdateDetailsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *msgClient) MarketUpdateEnabled(ctx context.Context, in *MsgMarketUpdateEnabledRequest, opts ...grpc.CallOption) (*MsgMarketUpdateEnabledResponse, error) {
	out := new(MsgMarketUpdateEnabledResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketUpdateAcceptingOrders(ctx context.Context, in *MsgMarketUpdateAcceptingOrdersRequest, opts ...grpc.CallOption) (*MsgMarketUpdateAcceptingOrdersResponse, error) {
	out := new(MsgMarketUpdateAcceptingOrdersResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateAcceptingOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketUpdateUserSettle(ctx context.Context, in *MsgMarketUpdateUserSettleRequest, opts ...grpc.CallOption) (*MsgMarketUpdateUserSettleResponse, error) {
	out := new(MsgMarketUpdateUserSettleResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateUserSettle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketUpdateAcceptingCommitments(ctx context.Context, in *MsgMarketUpdateAcceptingCommitmentsRequest, opts ...grpc.CallOption) (*MsgMarketUpdateAcceptingCommitmentsResponse, error) {
	out := new(MsgMarketUpdateAcceptingCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateAcceptingCommitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketUpdateIntermediaryDenom(ctx context.Context, in *MsgMarketUpdateIntermediaryDenomRequest, opts ...grpc.CallOption) (*MsgMarketUpdateIntermediaryDenomResponse, error) {
	out := new(MsgMarketUpdateIntermediaryDenomResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketUpdateIntermediaryDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketManagePermissions(ctx context.Context, in *MsgMarketManagePermissionsRequest, opts ...grpc.CallOption) (*MsgMarketManagePermissionsResponse, error) {
	out := new(MsgMarketManagePermissionsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketManagePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketManageReqAttrs(ctx context.Context, in *MsgMarketManageReqAttrsRequest, opts ...grpc.CallOption) (*MsgMarketManageReqAttrsResponse, error) {
	out := new(MsgMarketManageReqAttrsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/MarketManageReqAttrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePayment(ctx context.Context, in *MsgCreatePaymentRequest, opts ...grpc.CallOption) (*MsgCreatePaymentResponse, error) {
	out := new(MsgCreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptPayment(ctx context.Context, in *MsgAcceptPaymentRequest, opts ...grpc.CallOption) (*MsgAcceptPaymentResponse, error) {
	out := new(MsgAcceptPaymentResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/AcceptPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectPayment(ctx context.Context, in *MsgRejectPaymentRequest, opts ...grpc.CallOption) (*MsgRejectPaymentResponse, error) {
	out := new(MsgRejectPaymentResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/RejectPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectPayments(ctx context.Context, in *MsgRejectPaymentsRequest, opts ...grpc.CallOption) (*MsgRejectPaymentsResponse, error) {
	out := new(MsgRejectPaymentsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/RejectPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPayments(ctx context.Context, in *MsgCancelPaymentsRequest, opts ...grpc.CallOption) (*MsgCancelPaymentsResponse, error) {
	out := new(MsgCancelPaymentsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/CancelPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangePaymentTarget(ctx context.Context, in *MsgChangePaymentTargetRequest, opts ...grpc.CallOption) (*MsgChangePaymentTargetResponse, error) {
	out := new(MsgChangePaymentTargetResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/ChangePaymentTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovCreateMarket(ctx context.Context, in *MsgGovCreateMarketRequest, opts ...grpc.CallOption) (*MsgGovCreateMarketResponse, error) {
	out := new(MsgGovCreateMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/GovCreateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovManageFees(ctx context.Context, in *MsgGovManageFeesRequest, opts ...grpc.CallOption) (*MsgGovManageFeesResponse, error) {
	out := new(MsgGovManageFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/GovManageFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovCloseMarket(ctx context.Context, in *MsgGovCloseMarketRequest, opts ...grpc.CallOption) (*MsgGovCloseMarketResponse, error) {
	out := new(MsgGovCloseMarketResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/GovCloseMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovUpdateParams(ctx context.Context, in *MsgGovUpdateParamsRequest, opts ...grpc.CallOption) (*MsgGovUpdateParamsResponse, error) {
	out := new(MsgGovUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.exchange.v1.Msg/GovUpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateAsk creates an ask order (to sell something you own).
	CreateAsk(context.Context, *MsgCreateAskRequest) (*MsgCreateAskResponse, error)
	// CreateBid creates a bid order (to buy something you want).
	CreateBid(context.Context, *MsgCreateBidRequest) (*MsgCreateBidResponse, error)
	// CommitFunds marks funds in an account as manageable by a market.
	CommitFunds(context.Context, *MsgCommitFundsRequest) (*MsgCommitFundsResponse, error)
	// CancelOrder cancels an order.
	CancelOrder(context.Context, *MsgCancelOrderRequest) (*MsgCancelOrderResponse, error)
	// FillBids uses the assets in your account to fulfill one or more bids (similar to a fill-or-cancel ask).
	FillBids(context.Context, *MsgFillBidsRequest) (*MsgFillBidsResponse, error)
	// FillAsks uses the funds in your account to fulfill one or more asks (similar to a fill-or-cancel bid).
	FillAsks(context.Context, *MsgFillAsksRequest) (*MsgFillAsksResponse, error)
	// MarketSettle is a market endpoint to trigger the settlement of orders.
	MarketSettle(context.Context, *MsgMarketSettleRequest) (*MsgMarketSettleResponse, error)
	// MarketCommitmentSettle is a market endpoint to transfer committed funds.
	MarketCommitmentSettle(context.Context, *MsgMarketCommitmentSettleRequest) (*MsgMarketCommitmentSettleResponse, error)
	// MarketReleaseCommitments is a market endpoint return control of funds back to the account owner(s).
	MarketReleaseCommitments(context.Context, *MsgMarketReleaseCommitmentsRequest) (*MsgMarketReleaseCommitmentsResponse, error)
	// MarketSetOrderExternalID updates an order's external id field.
	MarketSetOrderExternalID(context.Context, *MsgMarketSetOrderExternalIDRequest) (*MsgMarketSetOrderExternalIDResponse, error)
	// MarketWithdraw is a market endpoint to withdraw fees that have been collected.
	MarketWithdraw(context.Context, *MsgMarketWithdrawRequest) (*MsgMarketWithdrawResponse, error)
	// MarketUpdateDetails is a market endpoint to update its details.
	MarketUpdateDetails(context.Context, *MsgMarketUpdateDetailsRequest) (*MsgMarketUpdateDetailsResponse, error)
	// MarketUpdateEnabled is a market endpoint to update whether its accepting orders.
	// Deprecated: This endpoint is no longer usable. It is replaced by MarketUpdateAcceptingOrders.
	MarketUpdateEnabled(context.Context, *MsgMarketUpdateEnabledRequest) (*MsgMarketUpdateEnabledResponse, error)
	// MarketUpdateAcceptingOrders is a market endpoint to update whether its accepting orders.
	MarketUpdateAcceptingOrders(context.Context, *MsgMarketUpdateAcceptingOrdersRequest) (*MsgMarketUpdateAcceptingOrdersResponse, error)
	// MarketUpdateUserSettle is a market endpoint to update whether it allows user-initiated settlement.
	MarketUpdateUserSettle(context.Context, *MsgMarketUpdateUserSettleRequest) (*MsgMarketUpdateUserSettleResponse, error)
	// MarketUpdateAcceptingCommitments is a market endpoint to update whether it accepts commitments.
	MarketUpdateAcceptingCommitments(context.Context, *MsgMarketUpdateAcceptingCommitmentsRequest) (*MsgMarketUpdateAcceptingCommitmentsResponse, error)
	// MarketUpdateIntermediaryDenom sets a market's intermediary denom.
	MarketUpdateIntermediaryDenom(context.Context, *MsgMarketUpdateIntermediaryDenomRequest) (*MsgMarketUpdateIntermediaryDenomResponse, error)
	// MarketManagePermissions is a market endpoint to manage a market's user permissions.
	MarketManagePermissions(context.Context, *MsgMarketManagePermissionsRequest) (*MsgMarketManagePermissionsResponse, error)
	// MarketManageReqAttrs is a market endpoint to manage the attributes required to interact with it.
	MarketManageReqAttrs(context.Context, *MsgMarketManageReqAttrsRequest) (*MsgMarketManageReqAttrsResponse, error)
	// CreatePayment creates a payment to facilitate a trade between two accounts.
	CreatePayment(context.Context, *MsgCreatePaymentRequest) (*MsgCreatePaymentResponse, error)
	// AcceptPayment is used by a target to accept a payment.
	AcceptPayment(context.Context, *MsgAcceptPaymentRequest) (*MsgAcceptPaymentResponse, error)
	// RejectPayment can be used by a target to reject a payment.
	RejectPayment(context.Context, *MsgRejectPaymentRequest) (*MsgRejectPaymentResponse, error)
	// RejectPayments can be used by a target to reject all payments from one or more sources.
	RejectPayments(context.Context, *MsgRejectPaymentsRequest) (*MsgRejectPaymentsResponse, error)
	// CancelPayments can be used by a source to cancel one or more payments.
	CancelPayments(context.Context, *MsgCancelPaymentsRequest) (*MsgCancelPaymentsResponse, error)
	// ChangePaymentTarget can be used by a source to change the target in one of their payments.
	ChangePaymentTarget(context.Context, *MsgChangePaymentTargetRequest) (*MsgChangePaymentTargetResponse, error)
	// GovCreateMarket is a governance proposal endpoint for creating a market.
	GovCreateMarket(context.Context, *MsgGovCreateMarketRequest) (*MsgGovCreateMarketResponse, error)
	// GovManageFees is a governance proposal endpoint for updating a market's fees.
	GovManageFees(context.Context, *MsgGovManageFeesRequest) (*MsgGovManageFeesResponse, error)
	// GovCloseMarket is a governance proposal endpoint that will disable order and commitment creation,
	// cancel all orders, and release all commitments.
	GovCloseMarket(context.Context, *MsgGovCloseMarketRequest) (*MsgGovCloseMarketResponse, error)
	// GovUpdateParams is a governance proposal endpoint for updating the exchange module's params.
	GovUpdateParams(context.Context, *MsgGovUpdateParamsRequest) (*MsgGovUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAsk(ctx context.Context, req *MsgCreateAskRequest) (*MsgCreateAskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsk not implemented")
}
func (*UnimplementedMsgServer) CreateBid(ctx context.Context, req *MsgCreateBidRequest) (*MsgCreateBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBid not implemented")
}
func (*UnimplementedMsgServer) CommitFunds(ctx context.Context, req *MsgCommitFundsRequest) (*MsgCommitFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitFunds not implemented")
}
func (*UnimplementedMsgServer) CancelOrder(ctx context.Context, req *MsgCancelOrderRequest) (*MsgCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedMsgServer) FillBids(ctx context.Context, req *MsgFillBidsRequest) (*MsgFillBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillBids not implemented")
}
func (*UnimplementedMsgServer) FillAsks(ctx context.Context, req *MsgFillAsksRequest) (*MsgFillAsksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillAsks not implemented")
}
func (*UnimplementedMsgServer) MarketSettle(ctx context.Context, req *MsgMarketSettleRequest) (*MsgMarketSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSettle not implemented")
}
func (*UnimplementedMsgServer) MarketCommitmentSettle(ctx context.Context, req *MsgMarketCommitmentSettleRequest) (*MsgMarketCommitmentSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketCommitmentSettle not implemented")
}
func (*UnimplementedMsgServer) MarketReleaseCommitments(ctx context.Context, req *MsgMarketReleaseCommitmentsRequest) (*MsgMarketReleaseCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketReleaseCommitments not implemented")
}
func (*UnimplementedMsgServer) MarketSetOrderExternalID(ctx context.Context, req *MsgMarketSetOrderExternalIDRequest) (*MsgMarketSetOrderExternalIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSetOrderExternalID not implemented")
}
func (*UnimplementedMsgServer) MarketWithdraw(ctx context.Context, req *MsgMarketWithdrawRequest) (*MsgMarketWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketWithdraw not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateDetails(ctx context.Context, req *MsgMarketUpdateDetailsRequest) (*MsgMarketUpdateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateDetails not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateEnabled(ctx context.Context, req *MsgMarketUpdateEnabledRequest) (*MsgMarketUpdateEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateEnabled not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateAcceptingOrders(ctx context.Context, req *MsgMarketUpdateAcceptingOrdersRequest) (*MsgMarketUpdateAcceptingOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateAcceptingOrders not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateUserSettle(ctx context.Context, req *MsgMarketUpdateUserSettleRequest) (*MsgMarketUpdateUserSettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateUserSettle not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateAcceptingCommitments(ctx context.Context, req *MsgMarketUpdateAcceptingCommitmentsRequest) (*MsgMarketUpdateAcceptingCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateAcceptingCommitments not implemented")
}
func (*UnimplementedMsgServer) MarketUpdateIntermediaryDenom(ctx context.Context, req *MsgMarketUpdateIntermediaryDenomRequest) (*MsgMarketUpdateIntermediaryDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketUpdateIntermediaryDenom not implemented")
}
func (*UnimplementedMsgServer) MarketManagePermissions(ctx context.Context, req *MsgMarketManagePermissionsRequest) (*MsgMarketManagePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketManagePermissions not implemented")
}
func (*UnimplementedMsgServer) MarketManageReqAttrs(ctx context.Context, req *MsgMarketManageReqAttrsRequest) (*MsgMarketManageReqAttrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketManageReqAttrs not implemented")
}
func (*UnimplementedMsgServer) CreatePayment(ctx context.Context, req *MsgCreatePaymentRequest) (*MsgCreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (*UnimplementedMsgServer) AcceptPayment(ctx context.Context, req *MsgAcceptPaymentRequest) (*MsgAcceptPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptPayment not implemented")
}
func (*UnimplementedMsgServer) RejectPayment(ctx context.Context, req *MsgRejectPaymentRequest) (*MsgRejectPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPayment not implemented")
}
func (*UnimplementedMsgServer) RejectPayments(ctx context.Context, req *MsgRejectPaymentsRequest) (*MsgRejectPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPayments not implemented")
}
func (*UnimplementedMsgServer) CancelPayments(ctx context.Context, req *MsgCancelPaymentsRequest) (*MsgCancelPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPayments not implemented")
}
func (*UnimplementedMsgServer) ChangePaymentTarget(ctx context.Context, req *MsgChangePaymentTargetRequest) (*MsgChangePaymentTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePaymentTarget not implemented")
}
func (*UnimplementedMsgServer) GovCreateMarket(ctx context.Context, req *MsgGovCreateMarketRequest) (*MsgGovCreateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovCreateMarket not implemented")
}
func (*UnimplementedMsgServer) GovManageFees(ctx context.Context, req *MsgGovManageFeesRequest) (*MsgGovManageFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovManageFees not implemented")
}
func (*UnimplementedMsgServer) GovCloseMarket(ctx context.Context, req *MsgGovCloseMarketRequest) (*MsgGovCloseMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovCloseMarket not implemented")
}
func (*UnimplementedMsgServer) GovUpdateParams(ctx context.Context, req *MsgGovUpdateParamsRequest) (*MsgGovUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovUpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CreateAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAsk(ctx, req.(*MsgCreateAskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CreateBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBid(ctx, req.(*MsgCreateBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CommitFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitFunds(ctx, req.(*MsgCommitFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelOrder(ctx, req.(*MsgCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FillBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFillBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FillBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/FillBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FillBids(ctx, req.(*MsgFillBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FillAsks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFillAsksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FillAsks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/FillAsks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FillAsks(ctx, req.(*MsgFillAsksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketSettle(ctx, req.(*MsgMarketSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketCommitmentSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketCommitmentSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketCommitmentSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketCommitmentSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketCommitmentSettle(ctx, req.(*MsgMarketCommitmentSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketReleaseCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketReleaseCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketReleaseCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketReleaseCommitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketReleaseCommitments(ctx, req.(*MsgMarketReleaseCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketSetOrderExternalID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketSetOrderExternalIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketSetOrderExternalID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketSetOrderExternalID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketSetOrderExternalID(ctx, req.(*MsgMarketSetOrderExternalIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketWithdraw(ctx, req.(*MsgMarketWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateDetails(ctx, req.(*MsgMarketUpdateDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateEnabled(ctx, req.(*MsgMarketUpdateEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateAcceptingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateAcceptingOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateAcceptingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateAcceptingOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateAcceptingOrders(ctx, req.(*MsgMarketUpdateAcceptingOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateUserSettle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateUserSettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateUserSettle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateUserSettle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateUserSettle(ctx, req.(*MsgMarketUpdateUserSettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateAcceptingCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateAcceptingCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateAcceptingCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateAcceptingCommitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateAcceptingCommitments(ctx, req.(*MsgMarketUpdateAcceptingCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketUpdateIntermediaryDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketUpdateIntermediaryDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketUpdateIntermediaryDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketUpdateIntermediaryDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketUpdateIntermediaryDenom(ctx, req.(*MsgMarketUpdateIntermediaryDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketManagePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketManagePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketManagePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketManagePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketManagePermissions(ctx, req.(*MsgMarketManagePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketManageReqAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketManageReqAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketManageReqAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/MarketManageReqAttrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketManageReqAttrs(ctx, req.(*MsgMarketManageReqAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePayment(ctx, req.(*MsgCreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/AcceptPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptPayment(ctx, req.(*MsgAcceptPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/RejectPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectPayment(ctx, req.(*MsgRejectPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/RejectPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectPayments(ctx, req.(*MsgRejectPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/CancelPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPayments(ctx, req.(*MsgCancelPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangePaymentTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangePaymentTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangePaymentTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/ChangePaymentTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangePaymentTarget(ctx, req.(*MsgChangePaymentTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovCreateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovCreateMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovCreateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/GovCreateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovCreateMarket(ctx, req.(*MsgGovCreateMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovManageFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovManageFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovManageFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/GovManageFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovManageFees(ctx, req.(*MsgGovManageFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovCloseMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovCloseMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovCloseMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/GovCloseMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovCloseMarket(ctx, req.(*MsgGovCloseMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovUpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovUpdateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovUpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.exchange.v1.Msg/GovUpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovUpdateParams(ctx, req.(*MsgGovUpdateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.exchange.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAsk",
			Handler:    _Msg_CreateAsk_Handler,
		},
		{
			MethodName: "CreateBid",
			Handler:    _Msg_CreateBid_Handler,
		},
		{
			MethodName: "CommitFunds",
			Handler:    _Msg_CommitFunds_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Msg_CancelOrder_Handler,
		},
		{
			MethodName: "FillBids",
			Handler:    _Msg_FillBids_Handler,
		},
		{
			MethodName: "FillAsks",
			Handler:    _Msg_FillAsks_Handler,
		},
		{
			MethodName: "MarketSettle",
			Handler:    _Msg_MarketSettle_Handler,
		},
		{
			MethodName: "MarketCommitmentSettle",
			Handler:    _Msg_MarketCommitmentSettle_Handler,
		},
		{
			MethodName: "MarketReleaseCommitments",
			Handler:    _Msg_MarketReleaseCommitments_Handler,
		},
		{
			MethodName: "MarketSetOrderExternalID",
			Handler:    _Msg_MarketSetOrderExternalID_Handler,
		},
		{
			MethodName: "MarketWithdraw",
			Handler:    _Msg_MarketWithdraw_Handler,
		},
		{
			MethodName: "MarketUpdateDetails",
			Handler:    _Msg_MarketUpdateDetails_Handler,
		},
		{
			MethodName: "MarketUpdateEnabled",
			Handler:    _Msg_MarketUpdateEnabled_Handler,
		},
		{
			MethodName: "MarketUpdateAcceptingOrders",
			Handler:    _Msg_MarketUpdateAcceptingOrders_Handler,
		},
		{
			MethodName: "MarketUpdateUserSettle",
			Handler:    _Msg_MarketUpdateUserSettle_Handler,
		},
		{
			MethodName: "MarketUpdateAcceptingCommitments",
			Handler:    _Msg_MarketUpdateAcceptingCommitments_Handler,
		},
		{
			MethodName: "MarketUpdateIntermediaryDenom",
			Handler:    _Msg_MarketUpdateIntermediaryDenom_Handler,
		},
		{
			MethodName: "MarketManagePermissions",
			Handler:    _Msg_MarketManagePermissions_Handler,
		},
		{
			MethodName: "MarketManageReqAttrs",
			Handler:    _Msg_MarketManageReqAttrs_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _Msg_CreatePayment_Handler,
		},
		{
			MethodName: "AcceptPayment",
			Handler:    _Msg_AcceptPayment_Handler,
		},
		{
			MethodName: "RejectPayment",
			Handler:    _Msg_RejectPayment_Handler,
		},
		{
			MethodName: "RejectPayments",
			Handler:    _Msg_RejectPayments_Handler,
		},
		{
			MethodName: "CancelPayments",
			Handler:    _Msg_CancelPayments_Handler,
		},
		{
			MethodName: "ChangePaymentTarget",
			Handler:    _Msg_ChangePaymentTarget_Handler,
		},
		{
			MethodName: "GovCreateMarket",
			Handler:    _Msg_GovCreateMarket_Handler,
		},
		{
			MethodName: "GovManageFees",
			Handler:    _Msg_GovManageFees_Handler,
		},
		{
			MethodName: "GovCloseMarket",
			Handler:    _Msg_GovCloseMarket_Handler,
		},
		{
			MethodName: "GovUpdateParams",
			Handler:    _Msg_GovUpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/exchange/v1/tx.proto",
}

func (m *MsgCreateAskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderCreationFee != nil {
		{
			size, err := m.OrderCreationFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.AskOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateAskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderCreationFee != nil {
		{
			size, err := m.OrderCreationFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.BidOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventTag) > 0 {
		i -= len(m.EventTag)
		copy(dAtA[i:], m.EventTag)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EventTag)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreationFee != nil {
		{
			size, err := m.CreationFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFillBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFillBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFillBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AskOrderCreationFee != nil {
		{
			size, err := m.AskOrderCreationFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SellerSettlementFlatFee != nil {
		{
			size, err := m.SellerSettlementFlatFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BidOrderIds) > 0 {
		dAtA9 := make([]byte, len(m.BidOrderIds)*10)
		var j8 int
		for _, num := range m.BidOrderIds {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTx(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalAssets) > 0 {
		for iNdEx := len(m.TotalAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFillBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFillBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFillBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFillAsksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFillAsksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFillAsksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidOrderCreationFee != nil {
		{
			size, err := m.BidOrderCreationFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.BuyerSettlementFees) > 0 {
		for iNdEx := len(m.BuyerSettlementFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuyerSettlementFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AskOrderIds) > 0 {
		dAtA12 := make([]byte, len(m.AskOrderIds)*10)
		var j11 int
		for _, num := range m.AskOrderIds {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintTx(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.TotalPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFillAsksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFillAsksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFillAsksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketSettleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketSettleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketSettleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpectPartial {
		i--
		if m.ExpectPartial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.BidOrderIds) > 0 {
		dAtA15 := make([]byte, len(m.BidOrderIds)*10)
		var j14 int
		for _, num := range m.BidOrderIds {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintTx(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AskOrderIds) > 0 {
		dAtA17 := make([]byte, len(m.AskOrderIds)*10)
		var j16 int
		for _, num := range m.AskOrderIds {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintTx(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketSettleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketSettleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketSettleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketCommitmentSettleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketCommitmentSettleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketCommitmentSettleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventTag) > 0 {
		i -= len(m.EventTag)
		copy(dAtA[i:], m.EventTag)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EventTag)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Navs) > 0 {
		for iNdEx := len(m.Navs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Navs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Outputs) > 0 {
		for iNdEx := len(m.Outputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Outputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inputs) > 0 {
		for iNdEx := len(m.Inputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketCommitmentSettleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketCommitmentSettleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketCommitmentSettleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketReleaseCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketReleaseCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketReleaseCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventTag) > 0 {
		i -= len(m.EventTag)
		copy(dAtA[i:], m.EventTag)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EventTag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToRelease) > 0 {
		for iNdEx := len(m.ToRelease) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToRelease[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketReleaseCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketReleaseCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketReleaseCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketSetOrderExternalIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketSetOrderExternalIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketSetOrderExternalIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x22
	}
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketSetOrderExternalIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketSetOrderExternalIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketSetOrderExternalIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MarketDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptingOrders {
		i--
		if m.AcceptingOrders {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptingOrders {
		i--
		if m.AcceptingOrders {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateAcceptingOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateAcceptingOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateAcceptingOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateUserSettleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateUserSettleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateUserSettleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowUserSettlement {
		i--
		if m.AllowUserSettlement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateUserSettleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateUserSettleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateUserSettleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AcceptingCommitments {
		i--
		if m.AcceptingCommitments {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateAcceptingCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateAcceptingCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateAcceptingCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IntermediaryDenom) > 0 {
		i -= len(m.IntermediaryDenom)
		copy(dAtA[i:], m.IntermediaryDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IntermediaryDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketUpdateIntermediaryDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketUpdateIntermediaryDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketUpdateIntermediaryDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketManagePermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketManagePermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketManagePermissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToGrant) > 0 {
		for iNdEx := len(m.ToGrant) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToGrant[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ToRevoke) > 0 {
		for iNdEx := len(m.ToRevoke) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToRevoke[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RevokeAll) > 0 {
		for iNdEx := len(m.RevokeAll) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RevokeAll[iNdEx])
			copy(dAtA[i:], m.RevokeAll[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RevokeAll[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketManagePermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketManagePermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketManagePermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketManageReqAttrsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketManageReqAttrsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketManageReqAttrsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreateCommitmentToRemove) > 0 {
		for iNdEx := len(m.CreateCommitmentToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateCommitmentToRemove[iNdEx])
			copy(dAtA[i:], m.CreateCommitmentToRemove[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateCommitmentToRemove[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CreateCommitmentToAdd) > 0 {
		for iNdEx := len(m.CreateCommitmentToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateCommitmentToAdd[iNdEx])
			copy(dAtA[i:], m.CreateCommitmentToAdd[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateCommitmentToAdd[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CreateBidToRemove) > 0 {
		for iNdEx := len(m.CreateBidToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateBidToRemove[iNdEx])
			copy(dAtA[i:], m.CreateBidToRemove[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateBidToRemove[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CreateBidToAdd) > 0 {
		for iNdEx := len(m.CreateBidToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateBidToAdd[iNdEx])
			copy(dAtA[i:], m.CreateBidToAdd[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateBidToAdd[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CreateAskToRemove) > 0 {
		for iNdEx := len(m.CreateAskToRemove) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateAskToRemove[iNdEx])
			copy(dAtA[i:], m.CreateAskToRemove[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateAskToRemove[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CreateAskToAdd) > 0 {
		for iNdEx := len(m.CreateAskToAdd) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CreateAskToAdd[iNdEx])
			copy(dAtA[i:], m.CreateAskToAdd[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CreateAskToAdd[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketManageReqAttrsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketManageReqAttrsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketManageReqAttrsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreatePaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgAcceptPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRejectPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRejectPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRejectPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sources[iNdEx])
			copy(dAtA[i:], m.Sources[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Sources[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRejectPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalIds) > 0 {
		for iNdEx := len(m.ExternalIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalIds[iNdEx])
			copy(dAtA[i:], m.ExternalIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangePaymentTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangePaymentTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangePaymentTargetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewTarget) > 0 {
		i -= len(m.NewTarget)
		copy(dAtA[i:], m.NewTarget)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewTarget)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangePaymentTargetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangePaymentTargetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangePaymentTargetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovCreateMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovCreateMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovCreateMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovCreateMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovCreateMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovCreateMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovManageFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovManageFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovManageFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnsetFeeCommitmentSettlementBips {
		i--
		if m.UnsetFeeCommitmentSettlementBips {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SetFeeCommitmentSettlementBips != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SetFeeCommitmentSettlementBips))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.RemoveFeeCreateCommitmentFlat) > 0 {
		for iNdEx := len(m.RemoveFeeCreateCommitmentFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeCreateCommitmentFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.AddFeeCreateCommitmentFlat) > 0 {
		for iNdEx := len(m.AddFeeCreateCommitmentFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeCreateCommitmentFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.RemoveFeeBuyerSettlementRatios) > 0 {
		for iNdEx := len(m.RemoveFeeBuyerSettlementRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeBuyerSettlementRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.AddFeeBuyerSettlementRatios) > 0 {
		for iNdEx := len(m.AddFeeBuyerSettlementRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeBuyerSettlementRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.RemoveFeeBuyerSettlementFlat) > 0 {
		for iNdEx := len(m.RemoveFeeBuyerSettlementFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeBuyerSettlementFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.AddFeeBuyerSettlementFlat) > 0 {
		for iNdEx := len(m.AddFeeBuyerSettlementFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeBuyerSettlementFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.RemoveFeeSellerSettlementRatios) > 0 {
		for iNdEx := len(m.RemoveFeeSellerSettlementRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeSellerSettlementRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AddFeeSellerSettlementRatios) > 0 {
		for iNdEx := len(m.AddFeeSellerSettlementRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeSellerSettlementRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.RemoveFeeSellerSettlementFlat) > 0 {
		for iNdEx := len(m.RemoveFeeSellerSettlementFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeSellerSettlementFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AddFeeSellerSettlementFlat) > 0 {
		for iNdEx := len(m.AddFeeSellerSettlementFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeSellerSettlementFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RemoveFeeCreateBidFlat) > 0 {
		for iNdEx := len(m.RemoveFeeCreateBidFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeCreateBidFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AddFeeCreateBidFlat) > 0 {
		for iNdEx := len(m.AddFeeCreateBidFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeCreateBidFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RemoveFeeCreateAskFlat) > 0 {
		for iNdEx := len(m.RemoveFeeCreateAskFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoveFeeCreateAskFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AddFeeCreateAskFlat) > 0 {
		for iNdEx := len(m.AddFeeCreateAskFlat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddFeeCreateAskFlat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovManageFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovManageFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovManageFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovCloseMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovCloseMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovCloseMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovCloseMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovCloseMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovCloseMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGovUpdateParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovUpdateParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovUpdateParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGovUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGovUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGovUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AskOrder.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.OrderCreationFee != nil {
		l = m.OrderCreationFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCreateBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BidOrder.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.OrderCreationFee != nil {
		l = m.OrderCreationFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCommitFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.CreationFee != nil {
		l = m.CreationFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EventTag)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCancelOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFillBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.TotalAssets) > 0 {
		for _, e := range m.TotalAssets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BidOrderIds) > 0 {
		l = 0
		for _, e := range m.BidOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.SellerSettlementFlatFee != nil {
		l = m.SellerSettlementFlatFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AskOrderCreationFee != nil {
		l = m.AskOrderCreationFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFillBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFillAsksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	l = m.TotalPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.AskOrderIds) > 0 {
		l = 0
		for _, e := range m.AskOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.BuyerSettlementFees) > 0 {
		for _, e := range m.BuyerSettlementFees {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.BidOrderCreationFee != nil {
		l = m.BidOrderCreationFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFillAsksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketSettleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.AskOrderIds) > 0 {
		l = 0
		for _, e := range m.AskOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.BidOrderIds) > 0 {
		l = 0
		for _, e := range m.BidOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if m.ExpectPartial {
		n += 2
	}
	return n
}

func (m *MsgMarketSettleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketCommitmentSettleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Navs) > 0 {
		for _, e := range m.Navs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.EventTag)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketCommitmentSettleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketReleaseCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.ToRelease) > 0 {
		for _, e := range m.ToRelease {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.EventTag)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketReleaseCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketSetOrderExternalIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketSetOrderExternalIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMarketWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	l = m.MarketDetails.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgMarketUpdateDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if m.AcceptingOrders {
		n += 2
	}
	return n
}

func (m *MsgMarketUpdateEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateAcceptingOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if m.AcceptingOrders {
		n += 2
	}
	return n
}

func (m *MsgMarketUpdateAcceptingOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateUserSettleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if m.AllowUserSettlement {
		n += 2
	}
	return n
}

func (m *MsgMarketUpdateUserSettleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateAcceptingCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if m.AcceptingCommitments {
		n += 2
	}
	return n
}

func (m *MsgMarketUpdateAcceptingCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketUpdateIntermediaryDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	l = len(m.IntermediaryDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketUpdateIntermediaryDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketManagePermissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.RevokeAll) > 0 {
		for _, s := range m.RevokeAll {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ToRevoke) > 0 {
		for _, e := range m.ToRevoke {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ToGrant) > 0 {
		for _, e := range m.ToGrant {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMarketManagePermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketManageReqAttrsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.CreateAskToAdd) > 0 {
		for _, s := range m.CreateAskToAdd {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CreateAskToRemove) > 0 {
		for _, s := range m.CreateAskToRemove {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CreateBidToAdd) > 0 {
		for _, s := range m.CreateBidToAdd {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CreateBidToRemove) > 0 {
		for _, s := range m.CreateBidToRemove {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CreateCommitmentToAdd) > 0 {
		for _, s := range m.CreateCommitmentToAdd {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.CreateCommitmentToRemove) > 0 {
		for _, s := range m.CreateCommitmentToRemove {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMarketManageReqAttrsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Payment.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Payment.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAcceptPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRejectPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRejectPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRejectPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Sources) > 0 {
		for _, s := range m.Sources {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRejectPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ExternalIds) > 0 {
		for _, s := range m.ExternalIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCancelPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangePaymentTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewTarget)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangePaymentTargetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovCreateMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Market.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgGovCreateMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovManageFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	if len(m.AddFeeCreateAskFlat) > 0 {
		for _, e := range m.AddFeeCreateAskFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeCreateAskFlat) > 0 {
		for _, e := range m.RemoveFeeCreateAskFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeCreateBidFlat) > 0 {
		for _, e := range m.AddFeeCreateBidFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeCreateBidFlat) > 0 {
		for _, e := range m.RemoveFeeCreateBidFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeSellerSettlementFlat) > 0 {
		for _, e := range m.AddFeeSellerSettlementFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeSellerSettlementFlat) > 0 {
		for _, e := range m.RemoveFeeSellerSettlementFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeSellerSettlementRatios) > 0 {
		for _, e := range m.AddFeeSellerSettlementRatios {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeSellerSettlementRatios) > 0 {
		for _, e := range m.RemoveFeeSellerSettlementRatios {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeBuyerSettlementFlat) > 0 {
		for _, e := range m.AddFeeBuyerSettlementFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeBuyerSettlementFlat) > 0 {
		for _, e := range m.RemoveFeeBuyerSettlementFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeBuyerSettlementRatios) > 0 {
		for _, e := range m.AddFeeBuyerSettlementRatios {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeBuyerSettlementRatios) > 0 {
		for _, e := range m.RemoveFeeBuyerSettlementRatios {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AddFeeCreateCommitmentFlat) > 0 {
		for _, e := range m.AddFeeCreateCommitmentFlat {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RemoveFeeCreateCommitmentFlat) > 0 {
		for _, e := range m.RemoveFeeCreateCommitmentFlat {
			l = e.Size()
			n += 2 + l + sovTx(uint64(l))
		}
	}
	if m.SetFeeCommitmentSettlementBips != 0 {
		n += 2 + sovTx(uint64(m.SetFeeCommitmentSettlementBips))
	}
	if m.UnsetFeeCommitmentSettlementBips {
		n += 3
	}
	return n
}

func (m *MsgGovManageFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovCloseMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovTx(uint64(m.MarketId))
	}
	return n
}

func (m *MsgGovCloseMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGovUpdateParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgGovUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AskOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderCreationFee == nil {
				m.OrderCreationFee = &types.Coin{}
			}
			if err := m.OrderCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderCreationFee == nil {
				m.OrderCreationFee = &types.Coin{}
			}
			if err := m.OrderCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreationFee == nil {
				m.CreationFee = &types.Coin{}
			}
			if err := m.CreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFillBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFillBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFillBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAssets = append(m.TotalAssets, types.Coin{})
			if err := m.TotalAssets[len(m.TotalAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BidOrderIds = append(m.BidOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BidOrderIds) == 0 {
					m.BidOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BidOrderIds = append(m.BidOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrderIds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerSettlementFlatFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellerSettlementFlatFee == nil {
				m.SellerSettlementFlatFee = &types.Coin{}
			}
			if err := m.SellerSettlementFlatFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrderCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AskOrderCreationFee == nil {
				m.AskOrderCreationFee = &types.Coin{}
			}
			if err := m.AskOrderCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFillBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFillBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFillBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFillAsksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFillAsksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFillAsksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AskOrderIds = append(m.AskOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AskOrderIds) == 0 {
					m.AskOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AskOrderIds = append(m.AskOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrderIds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerSettlementFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerSettlementFees = append(m.BuyerSettlementFees, types.Coin{})
			if err := m.BuyerSettlementFees[len(m.BuyerSettlementFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrderCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidOrderCreationFee == nil {
				m.BidOrderCreationFee = &types.Coin{}
			}
			if err := m.BidOrderCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFillAsksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFillAsksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFillAsksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketSettleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketSettleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketSettleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AskOrderIds = append(m.AskOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AskOrderIds) == 0 {
					m.AskOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AskOrderIds = append(m.AskOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AskOrderIds", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BidOrderIds = append(m.BidOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BidOrderIds) == 0 {
					m.BidOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BidOrderIds = append(m.BidOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOrderIds", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectPartial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExpectPartial = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketSettleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketSettleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketSettleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketCommitmentSettleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketCommitmentSettleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketCommitmentSettleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, AccountAmount{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, AccountAmount{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, AccountAmount{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Navs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Navs = append(m.Navs, NetAssetPrice{})
			if err := m.Navs[len(m.Navs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketCommitmentSettleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketCommitmentSettleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketCommitmentSettleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketReleaseCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketReleaseCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketReleaseCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRelease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToRelease = append(m.ToRelease, AccountAmount{})
			if err := m.ToRelease[len(m.ToRelease)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketReleaseCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketReleaseCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketReleaseCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketSetOrderExternalIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketSetOrderExternalIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketSetOrderExternalIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketSetOrderExternalIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketSetOrderExternalIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketSetOrderExternalIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptingOrders", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AcceptingOrders = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateAcceptingOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptingOrders", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AcceptingOrders = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateAcceptingOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateUserSettleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateUserSettleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateUserSettleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUserSettlement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowUserSettlement = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateUserSettleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateUserSettleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateUserSettleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateAcceptingCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptingCommitments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AcceptingCommitments = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateAcceptingCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateAcceptingCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateIntermediaryDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateIntermediaryDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateIntermediaryDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediaryDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntermediaryDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketUpdateIntermediaryDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketUpdateIntermediaryDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketUpdateIntermediaryDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketManagePermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketManagePermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketManagePermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevokeAll", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevokeAll = append(m.RevokeAll, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToRevoke", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToRevoke = append(m.ToRevoke, AccessGrant{})
			if err := m.ToRevoke[len(m.ToRevoke)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToGrant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToGrant = append(m.ToGrant, AccessGrant{})
			if err := m.ToGrant[len(m.ToGrant)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketManagePermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketManagePermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketManagePermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketManageReqAttrsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketManageReqAttrsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketManageReqAttrsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAskToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAskToAdd = append(m.CreateAskToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAskToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateAskToRemove = append(m.CreateAskToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBidToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateBidToAdd = append(m.CreateBidToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateBidToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateBidToRemove = append(m.CreateBidToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateCommitmentToAdd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateCommitmentToAdd = append(m.CreateCommitmentToAdd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateCommitmentToRemove", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateCommitmentToRemove = append(m.CreateCommitmentToRemove, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketManageReqAttrsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketManageReqAttrsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketManageReqAttrsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIds = append(m.ExternalIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangePaymentTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangePaymentTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangePaymentTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangePaymentTargetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangePaymentTargetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangePaymentTargetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovCreateMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovCreateMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovCreateMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovCreateMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovCreateMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovCreateMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovManageFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovManageFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovManageFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeCreateAskFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeCreateAskFlat = append(m.AddFeeCreateAskFlat, types.Coin{})
			if err := m.AddFeeCreateAskFlat[len(m.AddFeeCreateAskFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeCreateAskFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeCreateAskFlat = append(m.RemoveFeeCreateAskFlat, types.Coin{})
			if err := m.RemoveFeeCreateAskFlat[len(m.RemoveFeeCreateAskFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeCreateBidFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeCreateBidFlat = append(m.AddFeeCreateBidFlat, types.Coin{})
			if err := m.AddFeeCreateBidFlat[len(m.AddFeeCreateBidFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeCreateBidFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeCreateBidFlat = append(m.RemoveFeeCreateBidFlat, types.Coin{})
			if err := m.RemoveFeeCreateBidFlat[len(m.RemoveFeeCreateBidFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeSellerSettlementFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeSellerSettlementFlat = append(m.AddFeeSellerSettlementFlat, types.Coin{})
			if err := m.AddFeeSellerSettlementFlat[len(m.AddFeeSellerSettlementFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeSellerSettlementFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeSellerSettlementFlat = append(m.RemoveFeeSellerSettlementFlat, types.Coin{})
			if err := m.RemoveFeeSellerSettlementFlat[len(m.RemoveFeeSellerSettlementFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeSellerSettlementRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeSellerSettlementRatios = append(m.AddFeeSellerSettlementRatios, FeeRatio{})
			if err := m.AddFeeSellerSettlementRatios[len(m.AddFeeSellerSettlementRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeSellerSettlementRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeSellerSettlementRatios = append(m.RemoveFeeSellerSettlementRatios, FeeRatio{})
			if err := m.RemoveFeeSellerSettlementRatios[len(m.RemoveFeeSellerSettlementRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeBuyerSettlementFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeBuyerSettlementFlat = append(m.AddFeeBuyerSettlementFlat, types.Coin{})
			if err := m.AddFeeBuyerSettlementFlat[len(m.AddFeeBuyerSettlementFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeBuyerSettlementFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeBuyerSettlementFlat = append(m.RemoveFeeBuyerSettlementFlat, types.Coin{})
			if err := m.RemoveFeeBuyerSettlementFlat[len(m.RemoveFeeBuyerSettlementFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeBuyerSettlementRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeBuyerSettlementRatios = append(m.AddFeeBuyerSettlementRatios, FeeRatio{})
			if err := m.AddFeeBuyerSettlementRatios[len(m.AddFeeBuyerSettlementRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeBuyerSettlementRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeBuyerSettlementRatios = append(m.RemoveFeeBuyerSettlementRatios, FeeRatio{})
			if err := m.RemoveFeeBuyerSettlementRatios[len(m.RemoveFeeBuyerSettlementRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddFeeCreateCommitmentFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddFeeCreateCommitmentFlat = append(m.AddFeeCreateCommitmentFlat, types.Coin{})
			if err := m.AddFeeCreateCommitmentFlat[len(m.AddFeeCreateCommitmentFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveFeeCreateCommitmentFlat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoveFeeCreateCommitmentFlat = append(m.RemoveFeeCreateCommitmentFlat, types.Coin{})
			if err := m.RemoveFeeCreateCommitmentFlat[len(m.RemoveFeeCreateCommitmentFlat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetFeeCommitmentSettlementBips", wireType)
			}
			m.SetFeeCommitmentSettlementBips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetFeeCommitmentSettlementBips |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsetFeeCommitmentSettlementBips", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnsetFeeCommitmentSettlementBips = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovManageFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovManageFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovManageFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovCloseMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovCloseMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovCloseMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovCloseMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovCloseMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovCloseMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovUpdateParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovUpdateParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovUpdateParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGovUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGovUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGovUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
