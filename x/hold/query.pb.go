// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/hold/v1/query.proto

package hold

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetHoldsRequest is the request type for the Query/GetHolds query.
type GetHoldsRequest struct {
	// address is the account address to get on-hold balances for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetHoldsRequest) Reset()         { *m = GetHoldsRequest{} }
func (m *GetHoldsRequest) String() string { return proto.CompactTextString(m) }
func (*GetHoldsRequest) ProtoMessage()    {}
func (*GetHoldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41c9f383440a9df, []int{0}
}
func (m *GetHoldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHoldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHoldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHoldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHoldsRequest.Merge(m, src)
}
func (m *GetHoldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHoldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHoldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHoldsRequest proto.InternalMessageInfo

// GetHoldsResponse is the response type for the Query/GetHolds query.
type GetHoldsResponse struct {
	// amount is the total on hold for the requested address.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *GetHoldsResponse) Reset()         { *m = GetHoldsResponse{} }
func (m *GetHoldsResponse) String() string { return proto.CompactTextString(m) }
func (*GetHoldsResponse) ProtoMessage()    {}
func (*GetHoldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41c9f383440a9df, []int{1}
}
func (m *GetHoldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHoldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHoldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHoldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHoldsResponse.Merge(m, src)
}
func (m *GetHoldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHoldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHoldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHoldsResponse proto.InternalMessageInfo

// GetAllHoldsRequest is the request type for the Query/GetAllHolds query.
type GetAllHoldsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllHoldsRequest) Reset()         { *m = GetAllHoldsRequest{} }
func (m *GetAllHoldsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllHoldsRequest) ProtoMessage()    {}
func (*GetAllHoldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41c9f383440a9df, []int{2}
}
func (m *GetAllHoldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHoldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHoldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHoldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHoldsRequest.Merge(m, src)
}
func (m *GetAllHoldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHoldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHoldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHoldsRequest proto.InternalMessageInfo

// GetAllHoldsResponse is the response type for the Query/GetAllHolds query.
type GetAllHoldsResponse struct {
	// holds is a list of addresses with funds on hold and the amounts being held.
	Holds []*AccountHold `protobuf:"bytes,1,rep,name=holds,proto3" json:"holds,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllHoldsResponse) Reset()         { *m = GetAllHoldsResponse{} }
func (m *GetAllHoldsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllHoldsResponse) ProtoMessage()    {}
func (*GetAllHoldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41c9f383440a9df, []int{3}
}
func (m *GetAllHoldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllHoldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllHoldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllHoldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllHoldsResponse.Merge(m, src)
}
func (m *GetAllHoldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllHoldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllHoldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllHoldsResponse proto.InternalMessageInfo

func (m *GetAllHoldsResponse) GetHolds() []*AccountHold {
	if m != nil {
		return m.Holds
	}
	return nil
}

func (m *GetAllHoldsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*GetHoldsRequest)(nil), "provenance.hold.v1.GetHoldsRequest")
	proto.RegisterType((*GetHoldsResponse)(nil), "provenance.hold.v1.GetHoldsResponse")
	proto.RegisterType((*GetAllHoldsRequest)(nil), "provenance.hold.v1.GetAllHoldsRequest")
	proto.RegisterType((*GetAllHoldsResponse)(nil), "provenance.hold.v1.GetAllHoldsResponse")
}

func init() { proto.RegisterFile("provenance/hold/v1/query.proto", fileDescriptor_e41c9f383440a9df) }

var fileDescriptor_e41c9f383440a9df = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x7d, 0x45, 0x2d, 0xe5, 0x32, 0x80, 0x0e, 0x90, 0xd2, 0x00, 0x76, 0x48, 0xa1, 0x8d,
	0x8a, 0x7a, 0x47, 0x82, 0xba, 0xb0, 0xb5, 0x48, 0x84, 0xb1, 0x78, 0x44, 0x62, 0xb8, 0xd8, 0x57,
	0xd7, 0xc2, 0xb9, 0xe7, 0xe6, 0xce, 0x11, 0x15, 0x62, 0x68, 0x27, 0xc6, 0x4a, 0x88, 0xbd, 0x33,
	0x7f, 0x49, 0xc7, 0x4a, 0x2c, 0x4c, 0x80, 0x12, 0x06, 0xfe, 0x0c, 0x64, 0xfb, 0x2c, 0x3b, 0xc5,
	0xa5, 0x93, 0xcf, 0x7e, 0xdf, 0xbb, 0xef, 0xf7, 0xdd, 0x3b, 0x63, 0x3b, 0x1e, 0xc3, 0x44, 0x48,
	0x2e, 0x3d, 0xc1, 0xf6, 0x21, 0xf2, 0xd9, 0xa4, 0xc7, 0x0e, 0x12, 0x31, 0x3e, 0xa4, 0xf1, 0x18,
	0x34, 0x10, 0x52, 0xd6, 0x69, 0x5a, 0xa7, 0x93, 0x5e, 0x6b, 0xc3, 0x03, 0x35, 0x02, 0xc5, 0x86,
	0x5c, 0x89, 0x5c, 0xcc, 0x26, 0xbd, 0xa1, 0xd0, 0xbc, 0xc7, 0x62, 0x1e, 0x84, 0x92, 0xeb, 0x10,
	0x64, 0xde, 0xdf, 0xb2, 0xab, 0xda, 0x42, 0xe5, 0x41, 0x58, 0xd4, 0xef, 0x04, 0x10, 0x40, 0xb6,
	0x64, 0xe9, 0xca, 0x7c, 0xbd, 0x1f, 0x00, 0x04, 0x91, 0x60, 0x3c, 0x0e, 0x19, 0x97, 0x12, 0x74,
	0xb6, 0xa5, 0x32, 0xd5, 0x07, 0x35, 0xcc, 0x19, 0x5b, 0x56, 0xee, 0x6c, 0xe1, 0x9b, 0x03, 0xa1,
	0x5f, 0x41, 0xe4, 0x2b, 0x57, 0x1c, 0x24, 0x42, 0x69, 0xd2, 0xc4, 0xd7, 0xb9, 0xef, 0x8f, 0x85,
	0x52, 0x4d, 0xd4, 0x46, 0xdd, 0x1b, 0x6e, 0xf1, 0xfa, 0x7c, 0xf9, 0xd3, 0xa9, 0x63, 0xfd, 0x39,
	0x75, 0xac, 0xce, 0x11, 0xc2, 0xb7, 0xca, 0x3e, 0x15, 0x83, 0x54, 0x82, 0x78, 0x78, 0x89, 0x8f,
	0x20, 0x91, 0xba, 0x89, 0xda, 0xd7, 0xba, 0x8d, 0xfe, 0x0a, 0xcd, 0xf3, 0xd0, 0x34, 0x0f, 0x35,
	0x79, 0xe8, 0x0b, 0x08, 0xe5, 0xce, 0xd3, 0xb3, 0x1f, 0x8e, 0xf5, 0xf5, 0xa7, 0xd3, 0x0d, 0x42,
	0xbd, 0x9f, 0x0c, 0xa9, 0x07, 0x23, 0x66, 0xc2, 0xe7, 0x8f, 0x4d, 0xe5, 0xbf, 0x63, 0xfa, 0x30,
	0x16, 0x2a, 0x6b, 0x50, 0xae, 0xd9, 0xba, 0xc2, 0xb0, 0x87, 0xc9, 0x40, 0xe8, 0xed, 0x28, 0x9a,
	0xa3, 0x7f, 0x89, 0x71, 0x79, 0xae, 0x4d, 0xaf, 0x8d, 0xba, 0x8d, 0xfe, 0xda, 0x1c, 0x48, 0x3e,
	0xb1, 0x02, 0x67, 0x97, 0x07, 0xc2, 0xf4, 0xba, 0x95, 0xce, 0x8a, 0xcf, 0x17, 0x84, 0x6f, 0xcf,
	0x19, 0x99, 0xb8, 0x5b, 0x78, 0x31, 0x3d, 0x48, 0x65, 0xd2, 0x3a, 0xf4, 0xdf, 0xe9, 0xd3, 0x6d,
	0xcf, 0x4b, 0xa9, 0xd3, 0x46, 0x37, 0x57, 0x93, 0x41, 0x0d, 0xe0, 0xfa, 0x95, 0x80, 0xb9, 0x67,
	0x95, 0xb0, 0x7f, 0xb2, 0x80, 0x17, 0x5f, 0xa7, 0x52, 0x72, 0x8c, 0xf0, 0x72, 0x31, 0x0d, 0xb2,
	0x5a, 0xc7, 0x71, 0x61, 0xc6, 0xad, 0x47, 0xff, 0x17, 0xe5, 0x6e, 0x9d, 0x27, 0xc7, 0xdf, 0x7e,
	0x7f, 0x5e, 0x78, 0x4c, 0x56, 0x59, 0xcd, 0x25, 0xda, 0x4b, 0xa4, 0xaf, 0xd8, 0x07, 0x73, 0x37,
	0x3e, 0x92, 0x23, 0x84, 0x1b, 0x95, 0x63, 0x22, 0x6b, 0x97, 0x58, 0x5c, 0x18, 0x58, 0x6b, 0xfd,
	0x4a, 0x9d, 0xa1, 0x79, 0x98, 0xd1, 0xdc, 0x23, 0x2b, 0x97, 0xd2, 0xec, 0xbc, 0x3d, 0x9b, 0xda,
	0xe8, 0x7c, 0x6a, 0xa3, 0x5f, 0x53, 0x1b, 0x9d, 0xcc, 0x6c, 0xeb, 0x7c, 0x66, 0x5b, 0xdf, 0x67,
	0xb6, 0x85, 0xef, 0x86, 0x50, 0xe3, 0xb3, 0x8b, 0xde, 0x6c, 0x54, 0x6e, 0x60, 0x29, 0xd8, 0x0c,
	0xa1, 0xea, 0xf2, 0x3e, 0xf3, 0x19, 0x2e, 0x65, 0xff, 0xcc, 0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xec, 0x33, 0x03, 0x77, 0x08, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetHolds looks up the funds that are on hold for an address.
	GetHolds(ctx context.Context, in *GetHoldsRequest, opts ...grpc.CallOption) (*GetHoldsResponse, error)
	// GetAllHolds returns all addresses with funds on hold, and the amount held.
	GetAllHolds(ctx context.Context, in *GetAllHoldsRequest, opts ...grpc.CallOption) (*GetAllHoldsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetHolds(ctx context.Context, in *GetHoldsRequest, opts ...grpc.CallOption) (*GetHoldsResponse, error) {
	out := new(GetHoldsResponse)
	err := c.cc.Invoke(ctx, "/provenance.hold.v1.Query/GetHolds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllHolds(ctx context.Context, in *GetAllHoldsRequest, opts ...grpc.CallOption) (*GetAllHoldsResponse, error) {
	out := new(GetAllHoldsResponse)
	err := c.cc.Invoke(ctx, "/provenance.hold.v1.Query/GetAllHolds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetHolds looks up the funds that are on hold for an address.
	GetHolds(context.Context, *GetHoldsRequest) (*GetHoldsResponse, error)
	// GetAllHolds returns all addresses with funds on hold, and the amount held.
	GetAllHolds(context.Context, *GetAllHoldsRequest) (*GetAllHoldsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetHolds(ctx context.Context, req *GetHoldsRequest) (*GetHoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolds not implemented")
}
func (*UnimplementedQueryServer) GetAllHolds(ctx context.Context, req *GetAllHoldsRequest) (*GetAllHoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHolds not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetHolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetHolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.hold.v1.Query/GetHolds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetHolds(ctx, req.(*GetHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllHolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllHolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.hold.v1.Query/GetAllHolds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllHolds(ctx, req.(*GetAllHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.hold.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHolds",
			Handler:    _Query_GetHolds_Handler,
		},
		{
			MethodName: "GetAllHolds",
			Handler:    _Query_GetAllHolds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/hold/v1/query.proto",
}

func (m *GetHoldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHoldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHoldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHoldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHoldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHoldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllHoldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHoldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllHoldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *GetAllHoldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllHoldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllHoldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Holds) > 0 {
		for iNdEx := len(m.Holds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Holds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetHoldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetHoldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetAllHoldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAllHoldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Holds) > 0 {
		for _, e := range m.Holds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetHoldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHoldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHoldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHoldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHoldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHoldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHoldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHoldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHoldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllHoldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllHoldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllHoldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holds = append(m.Holds, &AccountHold{})
			if err := m.Holds[len(m.Holds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
