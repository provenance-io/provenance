// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/hold/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUnlockVestingAccountsRequest defines the request for unlocking vesting accounts
type MsgUnlockVestingAccountsRequest struct {
	// authority is the address that can execute this message (governance module account)
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// addresses is the list of vesting account addresses to convert back to base accounts
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty" validate:"max=1000"`
}

func (m *MsgUnlockVestingAccountsRequest) Reset()         { *m = MsgUnlockVestingAccountsRequest{} }
func (m *MsgUnlockVestingAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockVestingAccountsRequest) ProtoMessage()    {}
func (*MsgUnlockVestingAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9db16d4ea14d3f9, []int{0}
}
func (m *MsgUnlockVestingAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockVestingAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockVestingAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockVestingAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockVestingAccountsRequest.Merge(m, src)
}
func (m *MsgUnlockVestingAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockVestingAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockVestingAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockVestingAccountsRequest proto.InternalMessageInfo

// MsgUnlockVestingAccountsResponse defines the response for unlocking vesting accounts
type MsgUnlockVestingAccountsResponse struct {
	// unlocked_addresses contains the addresses that were successfully unlocked
	UnlockedAddresses []string `protobuf:"bytes,1,rep,name=unlocked_addresses,json=unlockedAddresses,proto3" json:"unlocked_addresses,omitempty"`
	// failed_addresses contains addresses that failed to unlock with reasons
	FailedAddresses []*UnlockFailure `protobuf:"bytes,2,rep,name=failed_addresses,json=failedAddresses,proto3" json:"failed_addresses,omitempty"`
}

func (m *MsgUnlockVestingAccountsResponse) Reset()         { *m = MsgUnlockVestingAccountsResponse{} }
func (m *MsgUnlockVestingAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockVestingAccountsResponse) ProtoMessage()    {}
func (*MsgUnlockVestingAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9db16d4ea14d3f9, []int{1}
}
func (m *MsgUnlockVestingAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockVestingAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockVestingAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockVestingAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockVestingAccountsResponse.Merge(m, src)
}
func (m *MsgUnlockVestingAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockVestingAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockVestingAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockVestingAccountsResponse proto.InternalMessageInfo

func (m *MsgUnlockVestingAccountsResponse) GetUnlockedAddresses() []string {
	if m != nil {
		return m.UnlockedAddresses
	}
	return nil
}

func (m *MsgUnlockVestingAccountsResponse) GetFailedAddresses() []*UnlockFailure {
	if m != nil {
		return m.FailedAddresses
	}
	return nil
}

// UnlockFailure represents a failed unlock attempt
type UnlockFailure struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UnlockFailure) Reset()         { *m = UnlockFailure{} }
func (m *UnlockFailure) String() string { return proto.CompactTextString(m) }
func (*UnlockFailure) ProtoMessage()    {}
func (*UnlockFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9db16d4ea14d3f9, []int{2}
}
func (m *UnlockFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockFailure.Merge(m, src)
}
func (m *UnlockFailure) XXX_Size() int {
	return m.Size()
}
func (m *UnlockFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockFailure.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockFailure proto.InternalMessageInfo

func (m *UnlockFailure) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnlockFailure) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUnlockVestingAccountsRequest)(nil), "provenance.hold.v1.MsgUnlockVestingAccountsRequest")
	proto.RegisterType((*MsgUnlockVestingAccountsResponse)(nil), "provenance.hold.v1.MsgUnlockVestingAccountsResponse")
	proto.RegisterType((*UnlockFailure)(nil), "provenance.hold.v1.UnlockFailure")
}

func init() { proto.RegisterFile("provenance/hold/v1/tx.proto", fileDescriptor_e9db16d4ea14d3f9) }

var fileDescriptor_e9db16d4ea14d3f9 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xad, 0x28, 0xca, 0x21, 0x04, 0x1c, 0xa5, 0x98, 0x20, 0x39, 0xc1, 0x53, 0x55,
	0x29, 0xbe, 0xa4, 0x45, 0x0c, 0x95, 0x18, 0x92, 0x81, 0x01, 0x91, 0xc5, 0x08, 0x06, 0x96, 0xea,
	0x62, 0x5f, 0x2f, 0x16, 0xf6, 0xbd, 0xe0, 0x3b, 0x47, 0xc9, 0x86, 0x3a, 0x31, 0xc2, 0x27, 0xa0,
	0x1f, 0xa1, 0x03, 0x1f, 0x80, 0x91, 0xb1, 0x62, 0x62, 0x42, 0x28, 0x19, 0xca, 0xcc, 0x27, 0x40,
	0xf6, 0xd9, 0x98, 0x8a, 0x00, 0xea, 0xe6, 0xbf, 0x7f, 0xff, 0xf7, 0xfe, 0xef, 0xdd, 0xd9, 0xf8,
	0xee, 0x24, 0x85, 0x29, 0x97, 0x4c, 0x06, 0x9c, 0x8e, 0x21, 0x0e, 0xe9, 0xb4, 0x47, 0xf5, 0xcc,
	0x9b, 0xa4, 0xa0, 0x81, 0x90, 0x1a, 0x7a, 0x39, 0xf4, 0xa6, 0xbd, 0xe6, 0xed, 0x00, 0x54, 0x02,
	0x8a, 0x26, 0x4a, 0xe4, 0xde, 0x44, 0x09, 0x63, 0x6e, 0xde, 0x31, 0xe0, 0xa0, 0x50, 0xd4, 0x88,
	0x12, 0x6d, 0x0a, 0x10, 0x60, 0xde, 0xe7, 0x4f, 0x55, 0x81, 0x00, 0x10, 0x31, 0xa7, 0x85, 0x1a,
	0x65, 0x87, 0x94, 0xc9, 0xb9, 0x41, 0xee, 0x47, 0x84, 0x5b, 0x43, 0x25, 0x9e, 0xc9, 0x18, 0x82,
	0x97, 0xcf, 0xb9, 0xd2, 0x91, 0x14, 0xfd, 0x20, 0x80, 0x4c, 0x6a, 0xe5, 0xf3, 0x57, 0x19, 0x57,
	0x9a, 0x3c, 0xc0, 0x0d, 0x96, 0xe9, 0x31, 0xa4, 0x91, 0x9e, 0xdb, 0xa8, 0x8d, 0xb6, 0x1b, 0x03,
	0xfb, 0xf3, 0x87, 0xce, 0x66, 0x99, 0xdc, 0x0f, 0xc3, 0x94, 0x2b, 0xf5, 0x54, 0xa7, 0x91, 0x14,
	0x7e, 0x6d, 0x25, 0x43, 0xdc, 0x60, 0x86, 0x71, 0x65, 0xaf, 0xb5, 0xd7, 0xb7, 0x1b, 0x03, 0xfa,
	0xe3, 0x6b, 0xeb, 0xe6, 0x94, 0xc5, 0x51, 0xc8, 0x34, 0xdf, 0x77, 0x13, 0x36, 0x7b, 0xd8, 0xeb,
	0x76, 0xbb, 0xee, 0x3f, 0xda, 0x55, 0x1d, 0xf6, 0xb7, 0xde, 0x1c, 0xb7, 0xac, 0xef, 0xc7, 0x2d,
	0xeb, 0xe8, 0xec, 0x64, 0xa7, 0x8e, 0x71, 0xdf, 0x23, 0xdc, 0xfe, 0xfb, 0x0a, 0x6a, 0x02, 0x52,
	0x71, 0xd2, 0xc1, 0x24, 0x2b, 0x0c, 0x3c, 0x3c, 0xa8, 0x87, 0x42, 0xf9, 0x50, 0xfe, 0x8d, 0x8a,
	0xf4, 0x2b, 0x40, 0x9e, 0xe0, 0xeb, 0x87, 0x2c, 0x8a, 0xcf, 0x99, 0xf3, 0x0d, 0xae, 0xec, 0xde,
	0xf3, 0xfe, 0xbc, 0x2a, 0xcf, 0x64, 0x3f, 0x62, 0x51, 0x9c, 0xa5, 0xdc, 0xbf, 0x66, 0x4a, 0x7f,
	0x75, 0x73, 0xfb, 0xf8, 0xea, 0x39, 0x07, 0xb1, 0xf1, 0xe5, 0xb2, 0xaf, 0x39, 0x4f, 0xbf, 0x92,
	0x64, 0x0b, 0x6f, 0xa4, 0x9c, 0x29, 0x90, 0xf6, 0x5a, 0x01, 0x4a, 0xb5, 0xfb, 0x0e, 0xe1, 0xf5,
	0xa1, 0x12, 0xe4, 0x08, 0xe1, 0x5b, 0x2b, 0x37, 0x25, 0x7b, 0xab, 0x06, 0xfb, 0xcf, 0xd5, 0x36,
	0xef, 0x5f, 0xac, 0xc8, 0x1c, 0x66, 0xf3, 0xd2, 0xeb, 0xb3, 0x93, 0x1d, 0x34, 0x78, 0xfc, 0x69,
	0xe1, 0xa0, 0xd3, 0x85, 0x83, 0xbe, 0x2d, 0x1c, 0xf4, 0x76, 0xe9, 0x58, 0xa7, 0x4b, 0xc7, 0xfa,
	0xb2, 0x74, 0xac, 0x17, 0x5d, 0x11, 0xe9, 0x71, 0x36, 0xf2, 0x02, 0x48, 0x68, 0x1d, 0xd0, 0x89,
	0xe0, 0x37, 0x45, 0x67, 0xe6, 0x37, 0xd0, 0xf3, 0x09, 0x57, 0xa3, 0x8d, 0xe2, 0x73, 0xdc, 0xfb,
	0x19, 0x00, 0x00, 0xff, 0xff, 0x75, 0x66, 0xd3, 0x73, 0x26, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UnlockVestingAccounts unlocks one or more vesting accounts.
	UnlockVestingAccounts(ctx context.Context, in *MsgUnlockVestingAccountsRequest, opts ...grpc.CallOption) (*MsgUnlockVestingAccountsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UnlockVestingAccounts(ctx context.Context, in *MsgUnlockVestingAccountsRequest, opts ...grpc.CallOption) (*MsgUnlockVestingAccountsResponse, error) {
	out := new(MsgUnlockVestingAccountsResponse)
	err := c.cc.Invoke(ctx, "/provenance.hold.v1.Msg/UnlockVestingAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UnlockVestingAccounts unlocks one or more vesting accounts.
	UnlockVestingAccounts(context.Context, *MsgUnlockVestingAccountsRequest) (*MsgUnlockVestingAccountsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UnlockVestingAccounts(ctx context.Context, req *MsgUnlockVestingAccountsRequest) (*MsgUnlockVestingAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockVestingAccounts not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UnlockVestingAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlockVestingAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlockVestingAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.hold.v1.Msg/UnlockVestingAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlockVestingAccounts(ctx, req.(*MsgUnlockVestingAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.hold.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnlockVestingAccounts",
			Handler:    _Msg_UnlockVestingAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/hold/v1/tx.proto",
}

func (m *MsgUnlockVestingAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockVestingAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockVestingAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlockVestingAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockVestingAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockVestingAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedAddresses) > 0 {
		for iNdEx := len(m.FailedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FailedAddresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UnlockedAddresses) > 0 {
		for iNdEx := len(m.UnlockedAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnlockedAddresses[iNdEx])
			copy(dAtA[i:], m.UnlockedAddresses[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.UnlockedAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnlockFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUnlockVestingAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnlockVestingAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnlockedAddresses) > 0 {
		for _, s := range m.UnlockedAddresses {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.FailedAddresses) > 0 {
		for _, e := range m.FailedAddresses {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *UnlockFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUnlockVestingAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockVestingAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockVestingAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockVestingAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockVestingAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockVestingAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockedAddresses = append(m.UnlockedAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedAddresses = append(m.FailedAddresses, &UnlockFailure{})
			if err := m.FailedAddresses[len(m.FailedAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
