// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/asset/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAssetRequest is the request type for the Query/Asset RPC method.
type QueryAssetRequest struct {
	// class_id associated with the asset.
	ClassId string `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	// id is a unique identifier of the asset.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetRequest) Reset()         { *m = QueryAssetRequest{} }
func (m *QueryAssetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetRequest) ProtoMessage()    {}
func (*QueryAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{0}
}
func (m *QueryAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetRequest.Merge(m, src)
}
func (m *QueryAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetRequest proto.InternalMessageInfo

func (m *QueryAssetRequest) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *QueryAssetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryAssetResponse is the response type for the Query/Asset RPC method.
type QueryAssetResponse struct {
	// owner is the owner address of the asset.
	Asset *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *QueryAssetResponse) Reset()         { *m = QueryAssetResponse{} }
func (m *QueryAssetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetResponse) ProtoMessage()    {}
func (*QueryAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{1}
}
func (m *QueryAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetResponse.Merge(m, src)
}
func (m *QueryAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetResponse proto.InternalMessageInfo

func (m *QueryAssetResponse) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

// QueryAssetsRequest is the request type for the Query/Assets RPC method.
type QueryAssetsRequest struct {
	// class_id associated with the asset.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// owner is the owner address of the asset.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetsRequest) Reset()         { *m = QueryAssetsRequest{} }
func (m *QueryAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetsRequest) ProtoMessage()    {}
func (*QueryAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{2}
}
func (m *QueryAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetsRequest.Merge(m, src)
}
func (m *QueryAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetsRequest proto.InternalMessageInfo

func (m *QueryAssetsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryAssetsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryAssetsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAssetsResponse is the response type for the Query/Assets RPC methods.
type QueryAssetsResponse struct {
	// Asset defines the Asset.
	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetsResponse) Reset()         { *m = QueryAssetsResponse{} }
func (m *QueryAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetsResponse) ProtoMessage()    {}
func (*QueryAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{3}
}
func (m *QueryAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetsResponse.Merge(m, src)
}
func (m *QueryAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetsResponse proto.InternalMessageInfo

func (m *QueryAssetsResponse) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *QueryAssetsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAssetClassRequest is the request type for the Query/Class RPC method.
type QueryAssetClassRequest struct {
	// class_id associated with the asset.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryAssetClassRequest) Reset()         { *m = QueryAssetClassRequest{} }
func (m *QueryAssetClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetClassRequest) ProtoMessage()    {}
func (*QueryAssetClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{4}
}
func (m *QueryAssetClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetClassRequest.Merge(m, src)
}
func (m *QueryAssetClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetClassRequest proto.InternalMessageInfo

func (m *QueryAssetClassRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryAssetClassResponse is the response type for the Query/Class RPC method.
type QueryAssetClassResponse struct {
	// class defines the class of the asset type.
	Class *AssetClass `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (m *QueryAssetClassResponse) Reset()         { *m = QueryAssetClassResponse{} }
func (m *QueryAssetClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetClassResponse) ProtoMessage()    {}
func (*QueryAssetClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{5}
}
func (m *QueryAssetClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetClassResponse.Merge(m, src)
}
func (m *QueryAssetClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetClassResponse proto.InternalMessageInfo

func (m *QueryAssetClassResponse) GetClass() *AssetClass {
	if m != nil {
		return m.Class
	}
	return nil
}

// QueryAssetClassesRequest is the request type for the Query/Classes RPC method
type QueryAssetClassesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetClassesRequest) Reset()         { *m = QueryAssetClassesRequest{} }
func (m *QueryAssetClassesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAssetClassesRequest) ProtoMessage()    {}
func (*QueryAssetClassesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{6}
}
func (m *QueryAssetClassesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetClassesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetClassesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetClassesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetClassesRequest.Merge(m, src)
}
func (m *QueryAssetClassesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetClassesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetClassesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetClassesRequest proto.InternalMessageInfo

func (m *QueryAssetClassesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAssetClassesResponse is the response type for the Query/Classes RPC method.
type QueryAssetClassesResponse struct {
	// class defines the class of the asset type.
	Classes []*AssetClass `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAssetClassesResponse) Reset()         { *m = QueryAssetClassesResponse{} }
func (m *QueryAssetClassesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetClassesResponse) ProtoMessage()    {}
func (*QueryAssetClassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{7}
}
func (m *QueryAssetClassesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetClassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetClassesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetClassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetClassesResponse.Merge(m, src)
}
func (m *QueryAssetClassesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetClassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetClassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetClassesResponse proto.InternalMessageInfo

func (m *QueryAssetClassesResponse) GetClasses() []*AssetClass {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *QueryAssetClassesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAssetRequest)(nil), "provenance.asset.v1.QueryAssetRequest")
	proto.RegisterType((*QueryAssetResponse)(nil), "provenance.asset.v1.QueryAssetResponse")
	proto.RegisterType((*QueryAssetsRequest)(nil), "provenance.asset.v1.QueryAssetsRequest")
	proto.RegisterType((*QueryAssetsResponse)(nil), "provenance.asset.v1.QueryAssetsResponse")
	proto.RegisterType((*QueryAssetClassRequest)(nil), "provenance.asset.v1.QueryAssetClassRequest")
	proto.RegisterType((*QueryAssetClassResponse)(nil), "provenance.asset.v1.QueryAssetClassResponse")
	proto.RegisterType((*QueryAssetClassesRequest)(nil), "provenance.asset.v1.QueryAssetClassesRequest")
	proto.RegisterType((*QueryAssetClassesResponse)(nil), "provenance.asset.v1.QueryAssetClassesResponse")
}

func init() { proto.RegisterFile("provenance/asset/v1/query.proto", fileDescriptor_c4a7021ac5dbbfdd) }

var fileDescriptor_c4a7021ac5dbbfdd = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x01, 0x07, 0x78, 0x20, 0x24, 0xae, 0x08, 0x5c, 0xab, 0x72, 0x8a, 0x87, 0x26,
	0x2a, 0xed, 0x1d, 0x0e, 0x62, 0x60, 0x41, 0x02, 0xa4, 0x22, 0xc4, 0x52, 0x32, 0xb2, 0xa0, 0xb3,
	0x7d, 0x32, 0x96, 0x5a, 0x9f, 0x9b, 0x73, 0x02, 0x55, 0x55, 0x21, 0x75, 0x66, 0x28, 0xf0, 0x01,
	0xf8, 0x26, 0xcc, 0x8c, 0x95, 0x58, 0x18, 0x51, 0xc2, 0x07, 0x41, 0xb9, 0x3b, 0x37, 0x6e, 0xeb,
	0xc8, 0x19, 0x3a, 0xda, 0xfe, 0xbf, 0xf7, 0xff, 0xdd, 0xff, 0xbd, 0x33, 0xb4, 0xb3, 0x81, 0x18,
	0xf1, 0x94, 0xa5, 0x21, 0xa7, 0x4c, 0x4a, 0x9e, 0xd3, 0x91, 0x4f, 0xf7, 0x86, 0x7c, 0xb0, 0x4f,
	0xb2, 0x81, 0xc8, 0x05, 0x5e, 0x9a, 0x09, 0x88, 0x12, 0x90, 0x91, 0xef, 0xac, 0x87, 0x42, 0xee,
	0x0a, 0x49, 0x03, 0x26, 0xb9, 0x56, 0xd3, 0x91, 0x1f, 0xf0, 0x9c, 0xf9, 0x34, 0x63, 0x71, 0x92,
	0xb2, 0x3c, 0x11, 0xa9, 0x6e, 0xe0, 0xac, 0xc4, 0x42, 0xc4, 0x3b, 0x9c, 0xb2, 0x2c, 0xa1, 0x2c,
	0x4d, 0x45, 0xae, 0x3e, 0x4a, 0xf3, 0xb5, 0xd2, 0x5f, 0xfb, 0x28, 0x81, 0xf7, 0x0c, 0xee, 0xbc,
	0x9d, 0x1a, 0x3c, 0x9f, 0xbe, 0xeb, 0xf3, 0xbd, 0x21, 0x97, 0x39, 0x5e, 0x86, 0xeb, 0xe1, 0x0e,
	0x93, 0xf2, 0x7d, 0x12, 0xd9, 0x68, 0x15, 0x75, 0x6f, 0xf4, 0xaf, 0xa9, 0xe7, 0xd7, 0x11, 0xbe,
	0x0d, 0xcd, 0x24, 0xb2, 0x9b, 0xea, 0x65, 0x33, 0x89, 0xbc, 0x2d, 0xc0, 0xe5, 0x7a, 0x99, 0x89,
	0x54, 0x72, 0xfc, 0x08, 0x2c, 0x65, 0xa2, 0xaa, 0x6f, 0xf6, 0x1c, 0x52, 0x71, 0x4a, 0xa2, 0x4b,
	0xb4, 0xd0, 0x3b, 0x42, 0xe5, 0x46, 0xb2, 0x20, 0xd1, 0x76, 0xa8, 0xb0, 0xc3, 0x77, 0xc1, 0x12,
	0x1f, 0x53, 0x3e, 0x30, 0x04, 0xfa, 0x01, 0x6f, 0x01, 0xcc, 0x72, 0xb1, 0x43, 0xe5, 0xb9, 0x46,
	0x74, 0x88, 0x64, 0x1a, 0x22, 0xd1, 0x91, 0x9b, 0x10, 0xc9, 0x36, 0x8b, 0xb9, 0x71, 0xe8, 0x97,
	0x2a, 0xbd, 0x6f, 0x08, 0x96, 0xce, 0x40, 0x98, 0xe3, 0xf4, 0xa0, 0xa5, 0x28, 0xa5, 0x8d, 0x56,
	0xaf, 0xd4, 0x9c, 0xc7, 0x28, 0xf1, 0xab, 0x0a, 0xa6, 0x4e, 0x2d, 0x93, 0x36, 0x3c, 0x03, 0xd5,
	0x85, 0x7b, 0x33, 0xa6, 0x97, 0xd3, 0x31, 0xcc, 0x09, 0xc7, 0xdb, 0x86, 0xfb, 0x17, 0x94, 0xe6,
	0x04, 0x4f, 0xc0, 0x52, 0x13, 0x34, 0x03, 0x69, 0xcf, 0x3f, 0x80, 0xae, 0xd3, 0x6a, 0x2f, 0x00,
	0xfb, 0x5c, 0x47, 0x7e, 0xea, 0x7e, 0x59, 0xa1, 0xff, 0x40, 0xb0, 0x5c, 0x61, 0x62, 0xc0, 0x9f,
	0x82, 0x5e, 0x3d, 0x5e, 0x64, 0x5f, 0x8b, 0x5e, 0xe8, 0x2f, 0x6d, 0x02, 0xbd, 0x9f, 0x57, 0xc1,
	0x52, 0x84, 0xf8, 0x0b, 0x02, 0x4b, 0x59, 0xe1, 0xb5, 0x4a, 0x8c, 0x0b, 0x57, 0xc9, 0xe9, 0xd4,
	0xea, 0xb4, 0xa1, 0xd7, 0x3b, 0xfa, 0xfd, 0xef, 0x7b, 0x73, 0x03, 0xaf, 0xd3, 0xb9, 0x57, 0x96,
	0x1e, 0x14, 0xb7, 0xf2, 0x90, 0x1e, 0x24, 0xd1, 0x21, 0xfe, 0x0c, 0x2d, 0xbd, 0xa9, 0xb8, 0xce,
	0xa6, 0x98, 0x9a, 0xd3, 0xad, 0x17, 0x1a, 0x20, 0x4f, 0x01, 0xad, 0x60, 0x67, 0x3e, 0x10, 0x3e,
	0x46, 0x00, 0xb3, 0xe8, 0xf1, 0xc3, 0x9a, 0xe6, 0xe5, 0xed, 0x75, 0x36, 0x16, 0x13, 0x1b, 0x9a,
	0x8e, 0xa2, 0x79, 0x80, 0xdb, 0x95, 0x34, 0x2a, 0x17, 0x9d, 0xc9, 0x57, 0x04, 0xb7, 0xca, 0x9b,
	0x84, 0x37, 0x17, 0xf1, 0x39, 0x5d, 0x6b, 0x87, 0x2c, 0x2a, 0x5f, 0x28, 0x26, 0x05, 0xf6, 0xe2,
	0xcd, 0xaf, 0xb1, 0x8b, 0x4e, 0xc6, 0x2e, 0xfa, 0x3b, 0x76, 0xd1, 0xf1, 0xc4, 0x6d, 0x9c, 0x4c,
	0xdc, 0xc6, 0x9f, 0x89, 0xdb, 0x78, 0xe7, 0xc7, 0x49, 0xfe, 0x61, 0x18, 0x90, 0x50, 0xec, 0x96,
	0xea, 0x37, 0x13, 0x51, 0xee, 0xf6, 0xc9, 0xf4, 0xcb, 0xf7, 0x33, 0x2e, 0x83, 0x96, 0xfa, 0x71,
	0x3f, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x53, 0xd1, 0x47, 0x8d, 0x5b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Asset queries for a specified asset by its class ID and asset ID.
	Asset(ctx context.Context, in *QueryAssetRequest, opts ...grpc.CallOption) (*QueryAssetResponse, error)
	// Assets queries all assets for a given address.
	Assets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (*QueryAssetsResponse, error)
	// Class queries a specific asset class by its ID.
	AssetClass(ctx context.Context, in *QueryAssetClassRequest, opts ...grpc.CallOption) (*QueryAssetClassResponse, error)
	// Classes queries all asset classes.
	AssetClasses(ctx context.Context, in *QueryAssetClassesRequest, opts ...grpc.CallOption) (*QueryAssetClassesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Asset(ctx context.Context, in *QueryAssetRequest, opts ...grpc.CallOption) (*QueryAssetResponse, error) {
	out := new(QueryAssetResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Assets(ctx context.Context, in *QueryAssetsRequest, opts ...grpc.CallOption) (*QueryAssetsResponse, error) {
	out := new(QueryAssetsResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetClass(ctx context.Context, in *QueryAssetClassRequest, opts ...grpc.CallOption) (*QueryAssetClassResponse, error) {
	out := new(QueryAssetClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/AssetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetClasses(ctx context.Context, in *QueryAssetClassesRequest, opts ...grpc.CallOption) (*QueryAssetClassesResponse, error) {
	out := new(QueryAssetClassesResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/AssetClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Asset queries for a specified asset by its class ID and asset ID.
	Asset(context.Context, *QueryAssetRequest) (*QueryAssetResponse, error)
	// Assets queries all assets for a given address.
	Assets(context.Context, *QueryAssetsRequest) (*QueryAssetsResponse, error)
	// Class queries a specific asset class by its ID.
	AssetClass(context.Context, *QueryAssetClassRequest) (*QueryAssetClassResponse, error)
	// Classes queries all asset classes.
	AssetClasses(context.Context, *QueryAssetClassesRequest) (*QueryAssetClassesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Asset(ctx context.Context, req *QueryAssetRequest) (*QueryAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Asset not implemented")
}
func (*UnimplementedQueryServer) Assets(ctx context.Context, req *QueryAssetsRequest) (*QueryAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assets not implemented")
}
func (*UnimplementedQueryServer) AssetClass(ctx context.Context, req *QueryAssetClassRequest) (*QueryAssetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetClass not implemented")
}
func (*UnimplementedQueryServer) AssetClasses(ctx context.Context, req *QueryAssetClassesRequest) (*QueryAssetClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetClasses not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Asset(ctx, req.(*QueryAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Assets(ctx, req.(*QueryAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/AssetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetClass(ctx, req.(*QueryAssetClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssetClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/AssetClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetClasses(ctx, req.(*QueryAssetClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.asset.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Asset",
			Handler:    _Query_Asset_Handler,
		},
		{
			MethodName: "Assets",
			Handler:    _Query_Assets_Handler,
		},
		{
			MethodName: "AssetClass",
			Handler:    _Query_AssetClass_Handler,
		},
		{
			MethodName: "AssetClasses",
			Handler:    _Query_AssetClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/asset/v1/query.proto",
}

func (m *QueryAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Class != nil {
		{
			size, err := m.Class.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetClassesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetClassesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetClassesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetClassesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetClassesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetClassesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Classes) > 0 {
		for iNdEx := len(m.Classes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Classes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Class != nil {
		l = m.Class.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetClassesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetClassesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Classes) > 0 {
		for _, e := range m.Classes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Class == nil {
				m.Class = &AssetClass{}
			}
			if err := m.Class.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetClassesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetClassesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetClassesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetClassesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetClassesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetClassesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Classes = append(m.Classes, &AssetClass{})
			if err := m.Classes[len(m.Classes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
