// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/asset/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryListAssets is the request type for the ListAssets RPC method.
type QueryListAssets struct {
	// address defines the address to query assets for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryListAssets) Reset()         { *m = QueryListAssets{} }
func (m *QueryListAssets) String() string { return proto.CompactTextString(m) }
func (*QueryListAssets) ProtoMessage()    {}
func (*QueryListAssets) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{0}
}
func (m *QueryListAssets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAssets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAssets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAssets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAssets.Merge(m, src)
}
func (m *QueryListAssets) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAssets) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAssets.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAssets proto.InternalMessageInfo

func (m *QueryListAssets) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryListAssetsResponse is the response type for the ListAssets RPC method.
type QueryListAssetsResponse struct {
	// assets defines the list of assets.
	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (m *QueryListAssetsResponse) Reset()         { *m = QueryListAssetsResponse{} }
func (m *QueryListAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAssetsResponse) ProtoMessage()    {}
func (*QueryListAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{1}
}
func (m *QueryListAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAssetsResponse.Merge(m, src)
}
func (m *QueryListAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAssetsResponse proto.InternalMessageInfo

func (m *QueryListAssetsResponse) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

// QueryListAssetClasses is the request type for the ListAssetClasses RPC method.
type QueryListAssetClasses struct {
}

func (m *QueryListAssetClasses) Reset()         { *m = QueryListAssetClasses{} }
func (m *QueryListAssetClasses) String() string { return proto.CompactTextString(m) }
func (*QueryListAssetClasses) ProtoMessage()    {}
func (*QueryListAssetClasses) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{2}
}
func (m *QueryListAssetClasses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAssetClasses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAssetClasses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAssetClasses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAssetClasses.Merge(m, src)
}
func (m *QueryListAssetClasses) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAssetClasses) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAssetClasses.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAssetClasses proto.InternalMessageInfo

// QueryListAssetClassesResponse is the response type for the ListAssetClasses RPC method.
type QueryListAssetClassesResponse struct {
	// assetClasses defines the list of asset classes.
	AssetClasses []*AssetClass `protobuf:"bytes,1,rep,name=assetClasses,proto3" json:"assetClasses,omitempty"`
}

func (m *QueryListAssetClassesResponse) Reset()         { *m = QueryListAssetClassesResponse{} }
func (m *QueryListAssetClassesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListAssetClassesResponse) ProtoMessage()    {}
func (*QueryListAssetClassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{3}
}
func (m *QueryListAssetClassesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListAssetClassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListAssetClassesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListAssetClassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListAssetClassesResponse.Merge(m, src)
}
func (m *QueryListAssetClassesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListAssetClassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListAssetClassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListAssetClassesResponse proto.InternalMessageInfo

func (m *QueryListAssetClassesResponse) GetAssetClasses() []*AssetClass {
	if m != nil {
		return m.AssetClasses
	}
	return nil
}

// QueryGetClass is the request type for the GetClass RPC method.
type QueryGetClass struct {
	// id defines the unique identifier of the asset class to query.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetClass) Reset()         { *m = QueryGetClass{} }
func (m *QueryGetClass) String() string { return proto.CompactTextString(m) }
func (*QueryGetClass) ProtoMessage()    {}
func (*QueryGetClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{4}
}
func (m *QueryGetClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClass.Merge(m, src)
}
func (m *QueryGetClass) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClass) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClass.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClass proto.InternalMessageInfo

func (m *QueryGetClass) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryGetClassResponse is the response type for the GetClass RPC method.
type QueryGetClassResponse struct {
	// assetClass defines the requested asset class.
	AssetClass *AssetClass `protobuf:"bytes,1,opt,name=assetClass,proto3" json:"assetClass,omitempty"`
}

func (m *QueryGetClassResponse) Reset()         { *m = QueryGetClassResponse{} }
func (m *QueryGetClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClassResponse) ProtoMessage()    {}
func (*QueryGetClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4a7021ac5dbbfdd, []int{5}
}
func (m *QueryGetClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClassResponse.Merge(m, src)
}
func (m *QueryGetClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClassResponse proto.InternalMessageInfo

func (m *QueryGetClassResponse) GetAssetClass() *AssetClass {
	if m != nil {
		return m.AssetClass
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryListAssets)(nil), "provenance.asset.v1.QueryListAssets")
	proto.RegisterType((*QueryListAssetsResponse)(nil), "provenance.asset.v1.QueryListAssetsResponse")
	proto.RegisterType((*QueryListAssetClasses)(nil), "provenance.asset.v1.QueryListAssetClasses")
	proto.RegisterType((*QueryListAssetClassesResponse)(nil), "provenance.asset.v1.QueryListAssetClassesResponse")
	proto.RegisterType((*QueryGetClass)(nil), "provenance.asset.v1.QueryGetClass")
	proto.RegisterType((*QueryGetClassResponse)(nil), "provenance.asset.v1.QueryGetClassResponse")
}

func init() { proto.RegisterFile("provenance/asset/v1/query.proto", fileDescriptor_c4a7021ac5dbbfdd) }

var fileDescriptor_c4a7021ac5dbbfdd = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x4a, 0xe3, 0x40,
	0x1c, 0xc7, 0x3b, 0x2d, 0xdb, 0xdd, 0xfd, 0xed, 0x5f, 0x66, 0x59, 0x5a, 0x42, 0x37, 0xd9, 0x1d,
	0x16, 0xb6, 0x74, 0x35, 0xa1, 0xf1, 0x01, 0x44, 0x7b, 0xf0, 0xa0, 0x1e, 0xcc, 0x49, 0xbc, 0xa5,
	0xcd, 0x50, 0x07, 0x6a, 0x26, 0x66, 0xd2, 0x62, 0x11, 0x2f, 0xea, 0x03, 0x08, 0x82, 0x6f, 0xe1,
	0x7b, 0x78, 0x2c, 0x78, 0xf1, 0x28, 0xad, 0x0f, 0x22, 0x99, 0x26, 0x69, 0x5a, 0x12, 0xcc, 0x31,
	0xf3, 0xfb, 0x7c, 0xff, 0xe4, 0x37, 0x09, 0x68, 0x9e, 0xcf, 0x47, 0xd4, 0xb5, 0xdd, 0x1e, 0x35,
	0x6c, 0x21, 0x68, 0x60, 0x8c, 0xda, 0xc6, 0xe9, 0x90, 0xfa, 0x63, 0xdd, 0xf3, 0x79, 0xc0, 0xf1,
	0x8f, 0x05, 0xa0, 0x4b, 0x40, 0x1f, 0xb5, 0x95, 0x4c, 0xd5, 0x7c, 0x2a, 0x55, 0x4a, 0xa3, 0xcf,
	0x79, 0x7f, 0x40, 0x0d, 0xdb, 0x63, 0x86, 0xed, 0xba, 0x3c, 0xb0, 0x03, 0xc6, 0x5d, 0x31, 0x9f,
	0x92, 0xff, 0xf0, 0xed, 0x20, 0x8c, 0xd8, 0x63, 0x22, 0xd8, 0x0a, 0x55, 0x02, 0xd7, 0xe1, 0xbd,
	0xed, 0x38, 0x3e, 0x15, 0xa2, 0x8e, 0x7e, 0xa3, 0xe6, 0x47, 0x2b, 0x7e, 0x24, 0xfb, 0x50, 0x5b,
	0x81, 0x2d, 0x2a, 0x3c, 0xee, 0x0a, 0x8a, 0x4d, 0xa8, 0xca, 0xd0, 0x50, 0x53, 0x69, 0x7e, 0x32,
	0x15, 0x3d, 0xa3, 0xac, 0x2e, 0x45, 0x56, 0x44, 0x92, 0x1a, 0xfc, 0x5c, 0xb6, 0xeb, 0x0c, 0xc2,
	0x89, 0x20, 0x0e, 0xfc, 0xca, 0x1c, 0x24, 0x69, 0x1d, 0xf8, 0x6c, 0xa7, 0xce, 0xa3, 0x4c, 0x2d,
	0x3f, 0x53, 0x82, 0xd6, 0x92, 0x88, 0x68, 0xf0, 0x45, 0xa6, 0xec, 0x44, 0x47, 0xf8, 0x2b, 0x94,
	0x99, 0x13, 0xbd, 0x73, 0x99, 0x39, 0xe4, 0x30, 0xea, 0x17, 0x03, 0x49, 0xfc, 0x26, 0xc0, 0xc2,
	0x49, 0x0a, 0x0a, 0x84, 0xa7, 0x24, 0xe6, 0x7d, 0x05, 0xde, 0x49, 0x6b, 0x7c, 0x8d, 0x00, 0x52,
	0xbb, 0xff, 0x9b, 0xe9, 0xb2, 0xb2, 0x74, 0x65, 0xad, 0x08, 0x15, 0xb7, 0x25, 0xe4, 0xf2, 0xf1,
	0xe5, 0xb6, 0xdc, 0xc0, 0x8a, 0x91, 0xfb, 0xa9, 0xe0, 0x3b, 0x04, 0xdf, 0x57, 0xb7, 0x8d, 0x5b,
	0x05, 0x62, 0x22, 0x56, 0x31, 0x8b, 0xb3, 0x05, 0x8b, 0xf5, 0xe4, 0x9d, 0x5c, 0x21, 0xf8, 0x90,
	0x5c, 0x10, 0xc9, 0x0f, 0x89, 0x19, 0xa5, 0xf5, 0x36, 0x93, 0x14, 0xf8, 0x27, 0x0b, 0xfc, 0xc1,
	0x5a, 0x7e, 0x01, 0xe3, 0x9c, 0x39, 0x17, 0xdb, 0xbb, 0x0f, 0x53, 0x15, 0x4d, 0xa6, 0x2a, 0x7a,
	0x9e, 0xaa, 0xe8, 0x66, 0xa6, 0x96, 0x26, 0x33, 0xb5, 0xf4, 0x34, 0x53, 0x4b, 0x47, 0xed, 0x3e,
	0x0b, 0x8e, 0x87, 0x5d, 0xbd, 0xc7, 0x4f, 0x52, 0x26, 0xeb, 0x8c, 0xa7, 0x2d, 0xcf, 0x22, 0xd3,
	0x60, 0xec, 0x51, 0xd1, 0xad, 0xca, 0x3f, 0x6f, 0xe3, 0x35, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x32,
	0x5d, 0x52, 0xf0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// ListAssets queries all assets for a given address.
	ListAssets(ctx context.Context, in *QueryListAssets, opts ...grpc.CallOption) (*QueryListAssetsResponse, error)
	// ListAssetClasses queries all asset classes.
	ListAssetClasses(ctx context.Context, in *QueryListAssetClasses, opts ...grpc.CallOption) (*QueryListAssetClassesResponse, error)
	// GetClass queries a specific asset class by its ID.
	GetClass(ctx context.Context, in *QueryGetClass, opts ...grpc.CallOption) (*QueryGetClassResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ListAssets(ctx context.Context, in *QueryListAssets, opts ...grpc.CallOption) (*QueryListAssetsResponse, error) {
	out := new(QueryListAssetsResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/ListAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAssetClasses(ctx context.Context, in *QueryListAssetClasses, opts ...grpc.CallOption) (*QueryListAssetClassesResponse, error) {
	out := new(QueryListAssetClassesResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/ListAssetClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetClass(ctx context.Context, in *QueryGetClass, opts ...grpc.CallOption) (*QueryGetClassResponse, error) {
	out := new(QueryGetClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Query/GetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// ListAssets queries all assets for a given address.
	ListAssets(context.Context, *QueryListAssets) (*QueryListAssetsResponse, error)
	// ListAssetClasses queries all asset classes.
	ListAssetClasses(context.Context, *QueryListAssetClasses) (*QueryListAssetClassesResponse, error)
	// GetClass queries a specific asset class by its ID.
	GetClass(context.Context, *QueryGetClass) (*QueryGetClassResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ListAssets(ctx context.Context, req *QueryListAssets) (*QueryListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (*UnimplementedQueryServer) ListAssetClasses(ctx context.Context, req *QueryListAssetClasses) (*QueryListAssetClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetClasses not implemented")
}
func (*UnimplementedQueryServer) GetClass(ctx context.Context, req *QueryGetClass) (*QueryGetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClass not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAssets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/ListAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAssets(ctx, req.(*QueryListAssets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAssetClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAssetClasses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAssetClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/ListAssetClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAssetClasses(ctx, req.(*QueryListAssetClasses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Query/GetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetClass(ctx, req.(*QueryGetClass))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.asset.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAssets",
			Handler:    _Query_ListAssets_Handler,
		},
		{
			MethodName: "ListAssetClasses",
			Handler:    _Query_ListAssetClasses_Handler,
		},
		{
			MethodName: "GetClass",
			Handler:    _Query_GetClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/asset/v1/query.proto",
}

func (m *QueryListAssets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAssets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAssets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListAssetClasses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAssetClasses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAssetClasses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListAssetClassesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListAssetClassesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListAssetClassesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetClasses) > 0 {
		for iNdEx := len(m.AssetClasses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetClasses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetClass != nil {
		{
			size, err := m.AssetClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryListAssets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryListAssetClasses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListAssetClassesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetClasses) > 0 {
		for _, e := range m.AssetClasses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetClass != nil {
		l = m.AssetClass.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryListAssets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAssets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAssets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAssetClasses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAssetClasses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAssetClasses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListAssetClassesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListAssetClassesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListAssetClassesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClasses = append(m.AssetClasses, &AssetClass{})
			if err := m.AssetClasses[len(m.AssetClasses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetClass == nil {
				m.AssetClass = &AssetClass{}
			}
			if err := m.AssetClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
