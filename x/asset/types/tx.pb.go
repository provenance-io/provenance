// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/asset/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	ledger "github.com/provenance-io/provenance/x/ledger"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddAsset struct {
	Asset       *Asset                          `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	EntryTypes  []*ledger.LedgerClassEntryType  `protobuf:"bytes,2,rep,name=entry_types,json=entryTypes,proto3" json:"entry_types,omitempty"`
	StatusTypes []*ledger.LedgerClassStatusType `protobuf:"bytes,3,rep,name=status_types,json=statusTypes,proto3" json:"status_types,omitempty"`
	FromAddress string                          `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgAddAsset) Reset()         { *m = MsgAddAsset{} }
func (m *MsgAddAsset) String() string { return proto.CompactTextString(m) }
func (*MsgAddAsset) ProtoMessage()    {}
func (*MsgAddAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{0}
}
func (m *MsgAddAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAsset.Merge(m, src)
}
func (m *MsgAddAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAsset proto.InternalMessageInfo

func (m *MsgAddAsset) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *MsgAddAsset) GetEntryTypes() []*ledger.LedgerClassEntryType {
	if m != nil {
		return m.EntryTypes
	}
	return nil
}

func (m *MsgAddAsset) GetStatusTypes() []*ledger.LedgerClassStatusType {
	if m != nil {
		return m.StatusTypes
	}
	return nil
}

func (m *MsgAddAsset) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgAddAssetResponse struct {
}

func (m *MsgAddAssetResponse) Reset()         { *m = MsgAddAssetResponse{} }
func (m *MsgAddAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetResponse) ProtoMessage()    {}
func (*MsgAddAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{1}
}
func (m *MsgAddAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetResponse.Merge(m, src)
}
func (m *MsgAddAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetResponse proto.InternalMessageInfo

type MsgAddAssetClass struct {
	AssetClass  *AssetClass `protobuf:"bytes,1,opt,name=asset_class,json=assetClass,proto3" json:"asset_class,omitempty"`
	FromAddress string      `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgAddAssetClass) Reset()         { *m = MsgAddAssetClass{} }
func (m *MsgAddAssetClass) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetClass) ProtoMessage()    {}
func (*MsgAddAssetClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{2}
}
func (m *MsgAddAssetClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetClass.Merge(m, src)
}
func (m *MsgAddAssetClass) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetClass) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetClass.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetClass proto.InternalMessageInfo

func (m *MsgAddAssetClass) GetAssetClass() *AssetClass {
	if m != nil {
		return m.AssetClass
	}
	return nil
}

func (m *MsgAddAssetClass) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgAddAssetClassResponse struct {
}

func (m *MsgAddAssetClassResponse) Reset()         { *m = MsgAddAssetClassResponse{} }
func (m *MsgAddAssetClassResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAssetClassResponse) ProtoMessage()    {}
func (*MsgAddAssetClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{3}
}
func (m *MsgAddAssetClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAssetClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAssetClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAssetClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAssetClassResponse.Merge(m, src)
}
func (m *MsgAddAssetClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAssetClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAssetClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAssetClassResponse proto.InternalMessageInfo

type MsgCreatePool struct {
	PoolId      string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	FromAddress string `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgCreatePool) Reset()         { *m = MsgCreatePool{} }
func (m *MsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePool) ProtoMessage()    {}
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{4}
}
func (m *MsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePool.Merge(m, src)
}
func (m *MsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePool proto.InternalMessageInfo

func (m *MsgCreatePool) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *MsgCreatePool) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgCreatePoolResponse struct {
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{5}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

type MsgCreateParticipation struct {
	Denom       types.Coin `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom"`
	FromAddress string     `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgCreateParticipation) Reset()         { *m = MsgCreateParticipation{} }
func (m *MsgCreateParticipation) String() string { return proto.CompactTextString(m) }
func (*MsgCreateParticipation) ProtoMessage()    {}
func (*MsgCreateParticipation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{6}
}
func (m *MsgCreateParticipation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateParticipation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateParticipation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateParticipation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateParticipation.Merge(m, src)
}
func (m *MsgCreateParticipation) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateParticipation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateParticipation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateParticipation proto.InternalMessageInfo

func (m *MsgCreateParticipation) GetDenom() types.Coin {
	if m != nil {
		return m.Denom
	}
	return types.Coin{}
}

func (m *MsgCreateParticipation) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgCreateParticipationResponse struct {
}

func (m *MsgCreateParticipationResponse) Reset()         { *m = MsgCreateParticipationResponse{} }
func (m *MsgCreateParticipationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateParticipationResponse) ProtoMessage()    {}
func (*MsgCreateParticipationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{7}
}
func (m *MsgCreateParticipationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateParticipationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateParticipationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateParticipationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateParticipationResponse.Merge(m, src)
}
func (m *MsgCreateParticipationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateParticipationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateParticipationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateParticipationResponse proto.InternalMessageInfo

type MsgCreateSecuritization struct {
	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tranches    []*types.Coin `protobuf:"bytes,2,rep,name=tranches,proto3" json:"tranches,omitempty"`
	FromAddress string        `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgCreateSecuritization) Reset()         { *m = MsgCreateSecuritization{} }
func (m *MsgCreateSecuritization) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSecuritization) ProtoMessage()    {}
func (*MsgCreateSecuritization) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{8}
}
func (m *MsgCreateSecuritization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSecuritization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSecuritization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSecuritization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSecuritization.Merge(m, src)
}
func (m *MsgCreateSecuritization) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSecuritization) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSecuritization.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSecuritization proto.InternalMessageInfo

func (m *MsgCreateSecuritization) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgCreateSecuritization) GetTranches() []*types.Coin {
	if m != nil {
		return m.Tranches
	}
	return nil
}

func (m *MsgCreateSecuritization) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type MsgCreateSecuritizationResponse struct {
}

func (m *MsgCreateSecuritizationResponse) Reset()         { *m = MsgCreateSecuritizationResponse{} }
func (m *MsgCreateSecuritizationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSecuritizationResponse) ProtoMessage()    {}
func (*MsgCreateSecuritizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{9}
}
func (m *MsgCreateSecuritizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSecuritizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSecuritizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSecuritizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSecuritizationResponse.Merge(m, src)
}
func (m *MsgCreateSecuritizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSecuritizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSecuritizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSecuritizationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddAsset)(nil), "provenance.asset.v1.MsgAddAsset")
	proto.RegisterType((*MsgAddAssetResponse)(nil), "provenance.asset.v1.MsgAddAssetResponse")
	proto.RegisterType((*MsgAddAssetClass)(nil), "provenance.asset.v1.MsgAddAssetClass")
	proto.RegisterType((*MsgAddAssetClassResponse)(nil), "provenance.asset.v1.MsgAddAssetClassResponse")
	proto.RegisterType((*MsgCreatePool)(nil), "provenance.asset.v1.MsgCreatePool")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "provenance.asset.v1.MsgCreatePoolResponse")
	proto.RegisterType((*MsgCreateParticipation)(nil), "provenance.asset.v1.MsgCreateParticipation")
	proto.RegisterType((*MsgCreateParticipationResponse)(nil), "provenance.asset.v1.MsgCreateParticipationResponse")
	proto.RegisterType((*MsgCreateSecuritization)(nil), "provenance.asset.v1.MsgCreateSecuritization")
	proto.RegisterType((*MsgCreateSecuritizationResponse)(nil), "provenance.asset.v1.MsgCreateSecuritizationResponse")
}

func init() { proto.RegisterFile("provenance/asset/v1/tx.proto", fileDescriptor_b5b6b5899559789d) }

var fileDescriptor_b5b6b5899559789d = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x41, 0x4f, 0xd4, 0x4e,
	0x18, 0xc6, 0xb7, 0xbb, 0xc0, 0x1f, 0xde, 0xc2, 0x3f, 0x5a, 0xc0, 0x5d, 0x1b, 0xd3, 0x5d, 0x36,
	0x31, 0xd9, 0x2c, 0xd2, 0x5a, 0x90, 0x8b, 0x27, 0x81, 0x78, 0x30, 0x88, 0x31, 0xc5, 0x78, 0x30,
	0xc6, 0xcd, 0x6c, 0x3b, 0x96, 0x26, 0xdb, 0x4e, 0xd3, 0x19, 0x56, 0xe0, 0x64, 0x4c, 0xbc, 0x78,
	0x32, 0x1e, 0x3c, 0xfa, 0x19, 0xf8, 0x18, 0x1c, 0x39, 0x7a, 0x32, 0x86, 0x3d, 0xf0, 0x35, 0x4c,
	0xa7, 0xdd, 0xd9, 0x2e, 0x76, 0xdd, 0x85, 0xdb, 0xcc, 0xbc, 0xbf, 0xf7, 0x79, 0x1f, 0xde, 0x3c,
	0x6c, 0xe1, 0x5e, 0x18, 0x91, 0x2e, 0x0e, 0x50, 0x60, 0x63, 0x03, 0x51, 0x8a, 0x99, 0xd1, 0x35,
	0x0d, 0x76, 0xa4, 0x87, 0x11, 0x61, 0x44, 0x59, 0x1c, 0x54, 0x75, 0x5e, 0xd5, 0xbb, 0xa6, 0xba,
	0xe4, 0x12, 0x97, 0xf0, 0xba, 0x11, 0x9f, 0x12, 0x54, 0xd5, 0x6c, 0x42, 0x7d, 0x42, 0x8d, 0x36,
	0xa2, 0xd8, 0xe8, 0x9a, 0x6d, 0xcc, 0x90, 0x69, 0xd8, 0xc4, 0x0b, 0xd2, 0x7a, 0x39, 0xad, 0xfb,
	0xd4, 0x8d, 0x47, 0xf8, 0xd4, 0x4d, 0x0b, 0xd5, 0x3c, 0x07, 0xc9, 0xb0, 0x04, 0x58, 0xc9, 0x00,
	0x1d, 0xec, 0xb8, 0x38, 0x8a, 0x89, 0xe4, 0x94, 0x20, 0xf5, 0x6f, 0x45, 0x90, 0xf7, 0xa8, 0xbb,
	0xe5, 0x38, 0x5b, 0x71, 0xa3, 0xf2, 0x10, 0xa6, 0xb9, 0x42, 0x45, 0xaa, 0x49, 0x0d, 0x79, 0x5d,
	0xd5, 0x73, 0xfe, 0x0e, 0x9d, 0xa3, 0x56, 0x02, 0x2a, 0xbb, 0x20, 0xe3, 0x80, 0x45, 0xc7, 0x2d,
	0x76, 0x1c, 0x62, 0x5a, 0x29, 0xd6, 0x4a, 0x0d, 0x79, 0xbd, 0x99, 0xed, 0x4b, 0x07, 0x76, 0x4d,
	0xfd, 0x39, 0x3f, 0xed, 0x74, 0x10, 0xa5, 0x4f, 0xe3, 0x9e, 0x57, 0xc7, 0x21, 0xb6, 0x00, 0xf7,
	0x8f, 0x54, 0x79, 0x01, 0xf3, 0x94, 0x21, 0x76, 0x48, 0x53, 0xb5, 0x12, 0x57, 0x5b, 0x1d, 0xab,
	0xb6, 0xcf, 0x9b, 0xb8, 0x9c, 0x4c, 0xc5, 0x99, 0x2a, 0x2b, 0x30, 0xff, 0x3e, 0x22, 0x7e, 0x0b,
	0x39, 0x4e, 0x84, 0x29, 0xad, 0x4c, 0xd5, 0xa4, 0xc6, 0x9c, 0x25, 0xc7, 0x6f, 0x5b, 0xc9, 0xd3,
	0xe3, 0xdb, 0x9f, 0x2e, 0x4f, 0x9b, 0x43, 0x54, 0x7d, 0x19, 0x16, 0x33, 0x3b, 0xb1, 0x30, 0x0d,
	0x49, 0x40, 0x71, 0xfd, 0x8b, 0x04, 0xb7, 0x32, 0xef, 0x7c, 0xb0, 0xf2, 0x04, 0x64, 0xbe, 0x87,
	0x96, 0x1d, 0x5f, 0xd3, 0xb5, 0x55, 0x47, 0xaf, 0x8d, 0x77, 0x59, 0x80, 0x06, 0x0a, 0x57, 0x3d,
	0x16, 0x27, 0xf2, 0xa8, 0x42, 0xe5, 0xaa, 0x17, 0x61, 0xf4, 0x1d, 0x2c, 0xec, 0x51, 0x77, 0x27,
	0xc2, 0x88, 0xe1, 0x97, 0x84, 0x74, 0x94, 0x32, 0xfc, 0x17, 0x12, 0xd2, 0x69, 0x79, 0x0e, 0x37,
	0x38, 0x67, 0xcd, 0xc4, 0xd7, 0x67, 0xce, 0x0d, 0x67, 0x97, 0x61, 0x79, 0x48, 0x5f, 0x0c, 0xfe,
	0x2c, 0xc1, 0x9d, 0x41, 0x05, 0x45, 0xcc, 0xb3, 0xbd, 0x10, 0x31, 0x8f, 0x04, 0xca, 0x26, 0x4c,
	0x3b, 0x38, 0x20, 0x7e, 0xba, 0xa1, 0xbb, 0x7a, 0x92, 0x6a, 0x3d, 0x4e, 0xbd, 0x9e, 0xa6, 0x5e,
	0xdf, 0x21, 0x5e, 0xb0, 0x3d, 0x75, 0xf6, 0xab, 0x5a, 0xb0, 0x12, 0xfa, 0x2f, 0x83, 0xa5, 0x89,
	0x0c, 0xd6, 0x40, 0xcb, 0xb7, 0x21, 0x9c, 0x7e, 0x97, 0xa0, 0x2c, 0x90, 0x7d, 0x6c, 0x1f, 0x46,
	0x1e, 0xf3, 0x4e, 0x12, 0xab, 0xff, 0x43, 0x51, 0x2c, 0xaa, 0xe8, 0x39, 0xca, 0x26, 0xcc, 0xb2,
	0x08, 0x05, 0xf6, 0x81, 0x88, 0xf7, 0x68, 0xf7, 0x96, 0x40, 0x6f, 0x68, 0x7d, 0x05, 0xaa, 0x23,
	0x7c, 0xf5, 0xbd, 0xaf, 0xff, 0x98, 0x82, 0xd2, 0x1e, 0x75, 0x95, 0xd7, 0x30, 0x2b, 0xfe, 0x6f,
	0x6b, 0xb9, 0x89, 0xcb, 0x24, 0x44, 0x6d, 0x8c, 0x23, 0xfa, 0xfa, 0x0a, 0x86, 0x85, 0xe1, 0x8c,
	0xdf, 0x1f, 0xd7, 0xca, 0x31, 0x75, 0x6d, 0x22, 0x4c, 0x8c, 0x79, 0x0b, 0x90, 0x89, 0x68, 0x7d,
	0x54, 0xf3, 0x80, 0x51, 0x9b, 0xe3, 0x19, 0xa1, 0xfe, 0x01, 0x16, 0xf3, 0x62, 0xb8, 0x3a, 0x46,
	0x22, 0x0b, 0xab, 0x1b, 0xd7, 0x80, 0xc5, 0xe0, 0x13, 0x58, 0xca, 0x4d, 0xd5, 0x83, 0x7f, 0x8b,
	0x0d, 0xd3, 0xea, 0xa3, 0xeb, 0xd0, 0xfd, 0xd9, 0xea, 0xf4, 0xc7, 0xcb, 0xd3, 0xa6, 0xb4, 0xbd,
	0x7b, 0x76, 0xa1, 0x49, 0xe7, 0x17, 0x9a, 0xf4, 0xfb, 0x42, 0x93, 0xbe, 0xf6, 0xb4, 0xc2, 0x79,
	0x4f, 0x2b, 0xfc, 0xec, 0x69, 0x85, 0x37, 0xa6, 0xeb, 0xb1, 0x83, 0xc3, 0xb6, 0x6e, 0x13, 0xdf,
	0x18, 0x0c, 0x58, 0xf3, 0x48, 0xe6, 0x66, 0x1c, 0xa5, 0x5f, 0x13, 0xfe, 0x13, 0xdc, 0x9e, 0xe1,
	0x1f, 0x8a, 0x8d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xf2, 0x3e, 0x8a, 0xf0, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddAsset(ctx context.Context, in *MsgAddAsset, opts ...grpc.CallOption) (*MsgAddAssetResponse, error)
	AddAssetClass(ctx context.Context, in *MsgAddAssetClass, opts ...grpc.CallOption) (*MsgAddAssetClassResponse, error)
	CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error)
	CreateParticipation(ctx context.Context, in *MsgCreateParticipation, opts ...grpc.CallOption) (*MsgCreateParticipationResponse, error)
	CreateSecuritization(ctx context.Context, in *MsgCreateSecuritization, opts ...grpc.CallOption) (*MsgCreateSecuritizationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddAsset(ctx context.Context, in *MsgAddAsset, opts ...grpc.CallOption) (*MsgAddAssetResponse, error) {
	out := new(MsgAddAssetResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAssetClass(ctx context.Context, in *MsgAddAssetClass, opts ...grpc.CallOption) (*MsgAddAssetClassResponse, error) {
	out := new(MsgAddAssetClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/AddAssetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error) {
	out := new(MsgCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateParticipation(ctx context.Context, in *MsgCreateParticipation, opts ...grpc.CallOption) (*MsgCreateParticipationResponse, error) {
	out := new(MsgCreateParticipationResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSecuritization(ctx context.Context, in *MsgCreateSecuritization, opts ...grpc.CallOption) (*MsgCreateSecuritizationResponse, error) {
	out := new(MsgCreateSecuritizationResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateSecuritization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddAsset(context.Context, *MsgAddAsset) (*MsgAddAssetResponse, error)
	AddAssetClass(context.Context, *MsgAddAssetClass) (*MsgAddAssetClassResponse, error)
	CreatePool(context.Context, *MsgCreatePool) (*MsgCreatePoolResponse, error)
	CreateParticipation(context.Context, *MsgCreateParticipation) (*MsgCreateParticipationResponse, error)
	CreateSecuritization(context.Context, *MsgCreateSecuritization) (*MsgCreateSecuritizationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddAsset(ctx context.Context, req *MsgAddAsset) (*MsgAddAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (*UnimplementedMsgServer) AddAssetClass(ctx context.Context, req *MsgAddAssetClass) (*MsgAddAssetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetClass not implemented")
}
func (*UnimplementedMsgServer) CreatePool(ctx context.Context, req *MsgCreatePool) (*MsgCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedMsgServer) CreateParticipation(ctx context.Context, req *MsgCreateParticipation) (*MsgCreateParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParticipation not implemented")
}
func (*UnimplementedMsgServer) CreateSecuritization(ctx context.Context, req *MsgCreateSecuritization) (*MsgCreateSecuritizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecuritization not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAsset(ctx, req.(*MsgAddAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAssetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAssetClass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAssetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/AddAssetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAssetClass(ctx, req.(*MsgAddAssetClass))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePool(ctx, req.(*MsgCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateParticipation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateParticipation(ctx, req.(*MsgCreateParticipation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSecuritization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSecuritization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSecuritization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateSecuritization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSecuritization(ctx, req.(*MsgCreateSecuritization))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.asset.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAsset",
			Handler:    _Msg_AddAsset_Handler,
		},
		{
			MethodName: "AddAssetClass",
			Handler:    _Msg_AddAssetClass_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Msg_CreatePool_Handler,
		},
		{
			MethodName: "CreateParticipation",
			Handler:    _Msg_CreateParticipation_Handler,
		},
		{
			MethodName: "CreateSecuritization",
			Handler:    _Msg_CreateSecuritization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/asset/v1/tx.proto",
}

func (m *MsgAddAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StatusTypes) > 0 {
		for iNdEx := len(m.StatusTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EntryTypes) > 0 {
		for iNdEx := len(m.EntryTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntryTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetClass != nil {
		{
			size, err := m.AssetClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAssetClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAssetClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAssetClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateParticipation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateParticipation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateParticipation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Denom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateParticipationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateParticipationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateParticipationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSecuritization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSecuritization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSecuritization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tranches) > 0 {
		for iNdEx := len(m.Tranches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tranches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSecuritizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSecuritizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSecuritizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.EntryTypes) > 0 {
		for _, e := range m.EntryTypes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.StatusTypes) > 0 {
		for _, e := range m.StatusTypes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAssetClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetClass != nil {
		l = m.AssetClass.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddAssetClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateParticipation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Denom.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateParticipationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSecuritization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Tranches) > 0 {
		for _, e := range m.Tranches {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSecuritizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryTypes = append(m.EntryTypes, &ledger.LedgerClassEntryType{})
			if err := m.EntryTypes[len(m.EntryTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusTypes = append(m.StatusTypes, &ledger.LedgerClassStatusType{})
			if err := m.StatusTypes[len(m.StatusTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetClass == nil {
				m.AssetClass = &AssetClass{}
			}
			if err := m.AssetClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAssetClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAssetClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAssetClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateParticipation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateParticipation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateParticipation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Denom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateParticipationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateParticipationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateParticipationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSecuritization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSecuritization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSecuritization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranches = append(m.Tranches, &types.Coin{})
			if err := m.Tranches[len(m.Tranches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSecuritizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSecuritizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSecuritizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
