// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/asset/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateAsset is the message type for creating a new asset.
type MsgCreateAsset struct {
	// asset defines the asset to be created.
	Asset *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// owner defines the address to set as the created asset.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// signer defines the address of the message sender.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateAsset) Reset()         { *m = MsgCreateAsset{} }
func (m *MsgCreateAsset) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAsset) ProtoMessage()    {}
func (*MsgCreateAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{0}
}
func (m *MsgCreateAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAsset.Merge(m, src)
}
func (m *MsgCreateAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAsset proto.InternalMessageInfo

func (m *MsgCreateAsset) GetAsset() *Asset {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *MsgCreateAsset) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgCreateAsset) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateAssetResponse is the response type for the CreateAsset RPC method.
type MsgCreateAssetResponse struct {
}

func (m *MsgCreateAssetResponse) Reset()         { *m = MsgCreateAssetResponse{} }
func (m *MsgCreateAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAssetResponse) ProtoMessage()    {}
func (*MsgCreateAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{1}
}
func (m *MsgCreateAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAssetResponse.Merge(m, src)
}
func (m *MsgCreateAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAssetResponse proto.InternalMessageInfo

// MsgCreateAssetClass is the message type for creating a new asset class.
type MsgCreateAssetClass struct {
	// asset_class defines the asset class to be created.
	AssetClass *AssetClass `protobuf:"bytes,1,opt,name=asset_class,json=assetClass,proto3" json:"asset_class,omitempty"`
	// signer defines the address of the message sender.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateAssetClass) Reset()         { *m = MsgCreateAssetClass{} }
func (m *MsgCreateAssetClass) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAssetClass) ProtoMessage()    {}
func (*MsgCreateAssetClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{2}
}
func (m *MsgCreateAssetClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAssetClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAssetClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAssetClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAssetClass.Merge(m, src)
}
func (m *MsgCreateAssetClass) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAssetClass) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAssetClass.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAssetClass proto.InternalMessageInfo

func (m *MsgCreateAssetClass) GetAssetClass() *AssetClass {
	if m != nil {
		return m.AssetClass
	}
	return nil
}

func (m *MsgCreateAssetClass) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateAssetClassResponse is the response type for the CreateAssetClass RPC method.
type MsgCreateAssetClassResponse struct {
}

func (m *MsgCreateAssetClassResponse) Reset()         { *m = MsgCreateAssetClassResponse{} }
func (m *MsgCreateAssetClassResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateAssetClassResponse) ProtoMessage()    {}
func (*MsgCreateAssetClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{3}
}
func (m *MsgCreateAssetClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateAssetClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateAssetClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateAssetClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateAssetClassResponse.Merge(m, src)
}
func (m *MsgCreateAssetClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateAssetClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateAssetClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateAssetClassResponse proto.InternalMessageInfo

// MsgCreatePool is the message type for creating a new pool.
type MsgCreatePool struct {
	// pool defines the pool to be created.
	Pool *types.Coin `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// assets defines the list of assets by keys to be included in the pool.
	Assets []*AssetKey `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	// signer defines the address of the message sender.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreatePool) Reset()         { *m = MsgCreatePool{} }
func (m *MsgCreatePool) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePool) ProtoMessage()    {}
func (*MsgCreatePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{4}
}
func (m *MsgCreatePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePool.Merge(m, src)
}
func (m *MsgCreatePool) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePool proto.InternalMessageInfo

func (m *MsgCreatePool) GetPool() *types.Coin {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *MsgCreatePool) GetAssets() []*AssetKey {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *MsgCreatePool) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreatePoolResponse is the response type for the CreatePool RPC method.
type MsgCreatePoolResponse struct {
}

func (m *MsgCreatePoolResponse) Reset()         { *m = MsgCreatePoolResponse{} }
func (m *MsgCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePoolResponse) ProtoMessage()    {}
func (*MsgCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{5}
}
func (m *MsgCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePoolResponse.Merge(m, src)
}
func (m *MsgCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePoolResponse proto.InternalMessageInfo

// MsgCreateTokenization is the message type for creating a new tokenization.
type MsgCreateTokenization struct {
	// token defines the new token supply and symbol.
	Token types.Coin `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
	// asset defines the asset by key to be tokenized.
	Asset *AssetKey `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	// signer defines the address of the message sender.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateTokenization) Reset()         { *m = MsgCreateTokenization{} }
func (m *MsgCreateTokenization) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTokenization) ProtoMessage()    {}
func (*MsgCreateTokenization) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{6}
}
func (m *MsgCreateTokenization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTokenization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTokenization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTokenization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTokenization.Merge(m, src)
}
func (m *MsgCreateTokenization) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTokenization) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTokenization.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTokenization proto.InternalMessageInfo

func (m *MsgCreateTokenization) GetToken() types.Coin {
	if m != nil {
		return m.Token
	}
	return types.Coin{}
}

func (m *MsgCreateTokenization) GetAsset() *AssetKey {
	if m != nil {
		return m.Asset
	}
	return nil
}

func (m *MsgCreateTokenization) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateTokenizationResponse is the response type for the CreateTokenization RPC method.
type MsgCreateTokenizationResponse struct {
}

func (m *MsgCreateTokenizationResponse) Reset()         { *m = MsgCreateTokenizationResponse{} }
func (m *MsgCreateTokenizationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTokenizationResponse) ProtoMessage()    {}
func (*MsgCreateTokenizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{7}
}
func (m *MsgCreateTokenizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTokenizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTokenizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTokenizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTokenizationResponse.Merge(m, src)
}
func (m *MsgCreateTokenizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTokenizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTokenizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTokenizationResponse proto.InternalMessageInfo

// MsgCreateSecuritization is the message type for creating a new securitization.
type MsgCreateSecuritization struct {
	// id defines the unique identifier for the securitization.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// pools defines the list of pool identifiers to be included in the securitization.
	Pools []string `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	// tranches defines the list of tranches for the securitization.
	Tranches []*types.Coin `protobuf:"bytes,3,rep,name=tranches,proto3" json:"tranches,omitempty"`
	// signer defines the address of the message sender.
	Signer string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateSecuritization) Reset()         { *m = MsgCreateSecuritization{} }
func (m *MsgCreateSecuritization) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSecuritization) ProtoMessage()    {}
func (*MsgCreateSecuritization) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{8}
}
func (m *MsgCreateSecuritization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSecuritization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSecuritization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSecuritization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSecuritization.Merge(m, src)
}
func (m *MsgCreateSecuritization) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSecuritization) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSecuritization.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSecuritization proto.InternalMessageInfo

func (m *MsgCreateSecuritization) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgCreateSecuritization) GetPools() []string {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *MsgCreateSecuritization) GetTranches() []*types.Coin {
	if m != nil {
		return m.Tranches
	}
	return nil
}

func (m *MsgCreateSecuritization) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateSecuritizationResponse is the response type for the CreateSecuritization RPC method.
type MsgCreateSecuritizationResponse struct {
}

func (m *MsgCreateSecuritizationResponse) Reset()         { *m = MsgCreateSecuritizationResponse{} }
func (m *MsgCreateSecuritizationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSecuritizationResponse) ProtoMessage()    {}
func (*MsgCreateSecuritizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b6b5899559789d, []int{9}
}
func (m *MsgCreateSecuritizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSecuritizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSecuritizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSecuritizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSecuritizationResponse.Merge(m, src)
}
func (m *MsgCreateSecuritizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSecuritizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSecuritizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSecuritizationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateAsset)(nil), "provenance.asset.v1.MsgCreateAsset")
	proto.RegisterType((*MsgCreateAssetResponse)(nil), "provenance.asset.v1.MsgCreateAssetResponse")
	proto.RegisterType((*MsgCreateAssetClass)(nil), "provenance.asset.v1.MsgCreateAssetClass")
	proto.RegisterType((*MsgCreateAssetClassResponse)(nil), "provenance.asset.v1.MsgCreateAssetClassResponse")
	proto.RegisterType((*MsgCreatePool)(nil), "provenance.asset.v1.MsgCreatePool")
	proto.RegisterType((*MsgCreatePoolResponse)(nil), "provenance.asset.v1.MsgCreatePoolResponse")
	proto.RegisterType((*MsgCreateTokenization)(nil), "provenance.asset.v1.MsgCreateTokenization")
	proto.RegisterType((*MsgCreateTokenizationResponse)(nil), "provenance.asset.v1.MsgCreateTokenizationResponse")
	proto.RegisterType((*MsgCreateSecuritization)(nil), "provenance.asset.v1.MsgCreateSecuritization")
	proto.RegisterType((*MsgCreateSecuritizationResponse)(nil), "provenance.asset.v1.MsgCreateSecuritizationResponse")
}

func init() { proto.RegisterFile("provenance/asset/v1/tx.proto", fileDescriptor_b5b6b5899559789d) }

var fileDescriptor_b5b6b5899559789d = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x33, 0x4e, 0x52, 0x7d, 0xbd, 0xd1, 0x57, 0xa1, 0x69, 0xa0, 0xae, 0xa1, 0x4e, 0x09,
	0x9b, 0xa8, 0x50, 0xbb, 0x49, 0xe9, 0x86, 0x15, 0x4d, 0x96, 0x55, 0x25, 0xe4, 0xb2, 0x42, 0x48,
	0x91, 0xe3, 0x8c, 0x5c, 0x8b, 0xc4, 0x13, 0x79, 0xa6, 0xa1, 0xed, 0x0a, 0xf1, 0x04, 0xac, 0xe0,
	0x29, 0x90, 0xba, 0x28, 0x2f, 0xc0, 0xaa, 0xcb, 0x8a, 0x15, 0x2b, 0x84, 0x92, 0x45, 0x5f, 0x03,
	0x79, 0x3c, 0x71, 0x1c, 0xe1, 0xfc, 0xa1, 0xdd, 0xf5, 0xfa, 0xfc, 0x7c, 0xef, 0x39, 0x9d, 0x3b,
	0x31, 0x3c, 0xea, 0x05, 0xb4, 0x4f, 0x7c, 0xdb, 0x77, 0x88, 0x69, 0x33, 0x46, 0xb8, 0xd9, 0xaf,
	0x9a, 0xfc, 0xd4, 0xe8, 0x05, 0x94, 0x53, 0xbc, 0x3a, 0x56, 0x0d, 0xa1, 0x1a, 0xfd, 0xaa, 0x56,
	0x74, 0xa9, 0x4b, 0x85, 0x6e, 0x86, 0x7f, 0x45, 0xa8, 0xa6, 0x3b, 0x94, 0x75, 0x29, 0x33, 0x5b,
	0x36, 0x23, 0x66, 0xbf, 0xda, 0x22, 0xdc, 0xae, 0x9a, 0x0e, 0xf5, 0x7c, 0xa9, 0xaf, 0x49, 0xbd,
	0xcb, 0xdc, 0x70, 0x44, 0x97, 0xb9, 0x52, 0x58, 0x8f, 0x84, 0x66, 0xd4, 0x31, 0x2a, 0xa4, 0x54,
	0x4a, 0x33, 0x17, 0xf9, 0x10, 0x40, 0xf9, 0x0b, 0x82, 0x95, 0x43, 0xe6, 0x36, 0x02, 0x62, 0x73,
	0xb2, 0x1f, 0x0a, 0x78, 0x07, 0xf2, 0x82, 0x50, 0xd1, 0x26, 0xaa, 0x14, 0x6a, 0x9a, 0x91, 0x12,
	0xc1, 0x10, 0xa8, 0x15, 0x81, 0xb8, 0x08, 0x79, 0xfa, 0xde, 0x27, 0x81, 0xaa, 0x6c, 0xa2, 0xca,
	0xb2, 0x15, 0x15, 0x78, 0x07, 0x96, 0x98, 0xe7, 0x86, 0x8f, 0xb3, 0xe1, 0xe3, 0xba, 0xfa, 0xe3,
	0x72, 0xbb, 0x28, 0xdd, 0xed, 0xb7, 0xdb, 0x01, 0x61, 0xec, 0x88, 0x07, 0x9e, 0xef, 0x5a, 0x92,
	0x7b, 0x51, 0xf8, 0x78, 0x73, 0xb1, 0x25, 0x8b, 0xb2, 0x0a, 0x0f, 0x26, 0x8d, 0x59, 0x84, 0xf5,
	0xa8, 0xcf, 0x48, 0xf9, 0x33, 0x82, 0xd5, 0x49, 0xa9, 0xd1, 0xb1, 0x19, 0xc3, 0x2f, 0xa1, 0x20,
	0xfc, 0x34, 0x9d, 0xb0, 0x94, 0xf6, 0x4b, 0xd3, 0xed, 0x8b, 0xb7, 0x2c, 0xb0, 0xc7, 0x1d, 0xc6,
	0x96, 0x95, 0xdb, 0x58, 0xde, 0x80, 0x87, 0x29, 0xbe, 0x62, 0xdf, 0x97, 0x08, 0xfe, 0x8f, 0xf5,
	0x57, 0x94, 0x76, 0xf0, 0x36, 0xe4, 0x7a, 0x94, 0x76, 0xa4, 0xd5, 0x75, 0x43, 0x8e, 0x0a, 0x37,
	0xc0, 0x90, 0x1b, 0x60, 0x34, 0xa8, 0xe7, 0x5b, 0x02, 0xc3, 0x7b, 0xb0, 0x24, 0xcc, 0x32, 0x55,
	0xd9, 0xcc, 0x56, 0x0a, 0xb5, 0x8d, 0xe9, 0xd9, 0x0e, 0xc8, 0x99, 0x25, 0xe1, 0xbb, 0x1e, 0xc4,
	0x1a, 0xdc, 0x9f, 0x70, 0x1d, 0xe7, 0xf9, 0x8e, 0x12, 0xca, 0x6b, 0xfa, 0x8e, 0xf8, 0xde, 0xb9,
	0xcd, 0x3d, 0xea, 0xe3, 0x3d, 0xc8, 0xf3, 0xb0, 0x9e, 0x1b, 0xac, 0x9e, 0xbb, 0xfa, 0x55, 0xca,
	0x58, 0x11, 0x8d, 0x77, 0x47, 0x9b, 0xa7, 0x88, 0xd7, 0xe6, 0xc4, 0x93, 0xcb, 0x77, 0xc7, 0x74,
	0x25, 0xd8, 0x48, 0xcd, 0x10, 0xa7, 0xfc, 0x86, 0x60, 0x2d, 0x26, 0x8e, 0x88, 0x73, 0x12, 0x78,
	0x7c, 0x94, 0x73, 0x05, 0x14, 0xaf, 0x2d, 0x42, 0x2e, 0x5b, 0x8a, 0xd7, 0x0e, 0x2f, 0x42, 0x78,
	0x50, 0xd1, 0xf9, 0x2c, 0x5b, 0x51, 0x81, 0xf7, 0xe0, 0x3f, 0x1e, 0xd8, 0xbe, 0x73, 0x4c, 0x98,
	0x9a, 0x15, 0x07, 0x37, 0xe3, 0xa4, 0x63, 0x34, 0x11, 0x2c, 0x77, 0x9b, 0x60, 0x8f, 0xa1, 0x34,
	0xc5, 0xf6, 0x28, 0x5a, 0xed, 0x6b, 0x0e, 0xb2, 0x87, 0xcc, 0xc5, 0x4d, 0x28, 0x24, 0x7f, 0x00,
	0x9e, 0xa4, 0xfe, 0xdf, 0x27, 0x37, 0x5b, 0x7b, 0xba, 0x00, 0x34, 0x1a, 0x84, 0x7d, 0xb8, 0xf7,
	0xd7, 0x6d, 0xad, 0x2c, 0xd0, 0x40, 0x90, 0xda, 0xce, 0xa2, 0x64, 0x3c, 0xef, 0x2d, 0x40, 0xe2,
	0x96, 0x95, 0x67, 0xbf, 0x1f, 0x32, 0xda, 0xd6, 0x7c, 0x26, 0xee, 0xce, 0x01, 0xa7, 0xec, 0xfc,
	0x9c, 0x0e, 0x49, 0x56, 0xab, 0x2d, 0xce, 0xc6, 0x53, 0xcf, 0xa1, 0x98, 0xba, 0x83, 0xcf, 0x66,
	0xf7, 0x9a, 0xa4, 0xb5, 0xe7, 0xff, 0x42, 0x8f, 0x66, 0x6b, 0xf9, 0x0f, 0x37, 0x17, 0x5b, 0xa8,
	0x7e, 0x70, 0x35, 0xd0, 0xd1, 0xf5, 0x40, 0x47, 0xbf, 0x07, 0x3a, 0xfa, 0x34, 0xd4, 0x33, 0xd7,
	0x43, 0x3d, 0xf3, 0x73, 0xa8, 0x67, 0xde, 0x54, 0x5d, 0x8f, 0x1f, 0x9f, 0xb4, 0x0c, 0x87, 0x76,
	0xcd, 0xf1, 0x80, 0x6d, 0x8f, 0x26, 0x2a, 0xf3, 0x54, 0x7e, 0x82, 0xf8, 0x59, 0x8f, 0xb0, 0xd6,
	0x92, 0xf8, 0x00, 0xed, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x55, 0xc9, 0xaa, 0x40, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateAsset creates a new asset.
	CreateAsset(ctx context.Context, in *MsgCreateAsset, opts ...grpc.CallOption) (*MsgCreateAssetResponse, error)
	// CreateAssetClass creates a new asset class.
	CreateAssetClass(ctx context.Context, in *MsgCreateAssetClass, opts ...grpc.CallOption) (*MsgCreateAssetClassResponse, error)
	// CreatePool creates a new pool.
	CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error)
	// CreateTokenization creates a new tokenization.
	CreateTokenization(ctx context.Context, in *MsgCreateTokenization, opts ...grpc.CallOption) (*MsgCreateTokenizationResponse, error)
	// CreateSecuritization creates a new securitization.
	CreateSecuritization(ctx context.Context, in *MsgCreateSecuritization, opts ...grpc.CallOption) (*MsgCreateSecuritizationResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateAsset(ctx context.Context, in *MsgCreateAsset, opts ...grpc.CallOption) (*MsgCreateAssetResponse, error) {
	out := new(MsgCreateAssetResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateAssetClass(ctx context.Context, in *MsgCreateAssetClass, opts ...grpc.CallOption) (*MsgCreateAssetClassResponse, error) {
	out := new(MsgCreateAssetClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateAssetClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePool(ctx context.Context, in *MsgCreatePool, opts ...grpc.CallOption) (*MsgCreatePoolResponse, error) {
	out := new(MsgCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTokenization(ctx context.Context, in *MsgCreateTokenization, opts ...grpc.CallOption) (*MsgCreateTokenizationResponse, error) {
	out := new(MsgCreateTokenizationResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateTokenization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSecuritization(ctx context.Context, in *MsgCreateSecuritization, opts ...grpc.CallOption) (*MsgCreateSecuritizationResponse, error) {
	out := new(MsgCreateSecuritizationResponse)
	err := c.cc.Invoke(ctx, "/provenance.asset.v1.Msg/CreateSecuritization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateAsset creates a new asset.
	CreateAsset(context.Context, *MsgCreateAsset) (*MsgCreateAssetResponse, error)
	// CreateAssetClass creates a new asset class.
	CreateAssetClass(context.Context, *MsgCreateAssetClass) (*MsgCreateAssetClassResponse, error)
	// CreatePool creates a new pool.
	CreatePool(context.Context, *MsgCreatePool) (*MsgCreatePoolResponse, error)
	// CreateTokenization creates a new tokenization.
	CreateTokenization(context.Context, *MsgCreateTokenization) (*MsgCreateTokenizationResponse, error)
	// CreateSecuritization creates a new securitization.
	CreateSecuritization(context.Context, *MsgCreateSecuritization) (*MsgCreateSecuritizationResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateAsset(ctx context.Context, req *MsgCreateAsset) (*MsgCreateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAsset not implemented")
}
func (*UnimplementedMsgServer) CreateAssetClass(ctx context.Context, req *MsgCreateAssetClass) (*MsgCreateAssetClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetClass not implemented")
}
func (*UnimplementedMsgServer) CreatePool(ctx context.Context, req *MsgCreatePool) (*MsgCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedMsgServer) CreateTokenization(ctx context.Context, req *MsgCreateTokenization) (*MsgCreateTokenizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTokenization not implemented")
}
func (*UnimplementedMsgServer) CreateSecuritization(ctx context.Context, req *MsgCreateSecuritization) (*MsgCreateSecuritizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecuritization not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAsset(ctx, req.(*MsgCreateAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateAssetClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateAssetClass)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateAssetClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateAssetClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateAssetClass(ctx, req.(*MsgCreateAssetClass))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePool(ctx, req.(*MsgCreatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTokenization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTokenization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTokenization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateTokenization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTokenization(ctx, req.(*MsgCreateTokenization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSecuritization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSecuritization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSecuritization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.asset.v1.Msg/CreateSecuritization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSecuritization(ctx, req.(*MsgCreateSecuritization))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.asset.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAsset",
			Handler:    _Msg_CreateAsset_Handler,
		},
		{
			MethodName: "CreateAssetClass",
			Handler:    _Msg_CreateAssetClass_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Msg_CreatePool_Handler,
		},
		{
			MethodName: "CreateTokenization",
			Handler:    _Msg_CreateTokenization_Handler,
		},
		{
			MethodName: "CreateSecuritization",
			Handler:    _Msg_CreateSecuritization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/asset/v1/tx.proto",
}

func (m *MsgCreateAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateAssetClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAssetClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAssetClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetClass != nil {
		{
			size, err := m.AssetClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateAssetClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateAssetClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateAssetClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTokenization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTokenization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTokenization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateTokenizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTokenizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTokenizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSecuritization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSecuritization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSecuritization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tranches) > 0 {
		for iNdEx := len(m.Tranches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tranches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pools[iNdEx])
			copy(dAtA[i:], m.Pools[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Pools[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSecuritizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSecuritizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSecuritizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateAssetClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetClass != nil {
		l = m.AssetClass.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateAssetClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTokenization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTokenizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSecuritization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Pools) > 0 {
		for _, s := range m.Pools {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Tranches) > 0 {
		for _, e := range m.Tranches {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSecuritizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &Asset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAssetClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAssetClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAssetClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetClass == nil {
				m.AssetClass = &AssetClass{}
			}
			if err := m.AssetClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateAssetClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateAssetClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateAssetClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &types.Coin{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &AssetKey{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTokenization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTokenization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTokenization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &AssetKey{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTokenizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTokenizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTokenizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSecuritization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSecuritization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSecuritization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tranches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tranches = append(m.Tranches, &types.Coin{})
			if err := m.Tranches[len(m.Tranches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSecuritizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSecuritizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSecuritizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
