// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/escrow/v1/query.proto

package escrow

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GetEscrowRequest is the request type for the Query/GetEscrow query.
type GetEscrowRequest struct {
	// address is the account address to get escrow balances for.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetEscrowRequest) Reset()         { *m = GetEscrowRequest{} }
func (m *GetEscrowRequest) String() string { return proto.CompactTextString(m) }
func (*GetEscrowRequest) ProtoMessage()    {}
func (*GetEscrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64bc72820e146ca, []int{0}
}
func (m *GetEscrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEscrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEscrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEscrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEscrowRequest.Merge(m, src)
}
func (m *GetEscrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEscrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEscrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEscrowRequest proto.InternalMessageInfo

// GetEscrowResponse is the response type for the Query/GetEscrow query.
type GetEscrowResponse struct {
	// amount is the total in escrow for the requested address.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *GetEscrowResponse) Reset()         { *m = GetEscrowResponse{} }
func (m *GetEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*GetEscrowResponse) ProtoMessage()    {}
func (*GetEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64bc72820e146ca, []int{1}
}
func (m *GetEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEscrowResponse.Merge(m, src)
}
func (m *GetEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetEscrowResponse proto.InternalMessageInfo

// GetAllEscrowRequest is the request type for the Query/GetAllEscrow query.
type GetAllEscrowRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllEscrowRequest) Reset()         { *m = GetAllEscrowRequest{} }
func (m *GetAllEscrowRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllEscrowRequest) ProtoMessage()    {}
func (*GetAllEscrowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64bc72820e146ca, []int{2}
}
func (m *GetAllEscrowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllEscrowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllEscrowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllEscrowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllEscrowRequest.Merge(m, src)
}
func (m *GetAllEscrowRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllEscrowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllEscrowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllEscrowRequest proto.InternalMessageInfo

// GetAllEscrowResponse is the response type for the Query/GetAllEscrow query.
type GetAllEscrowResponse struct {
	// escrows is a list of addresses with funds in escrow and the amounts in escrow.
	Escrows []AccountEscrow `protobuf:"bytes,1,rep,name=escrows,proto3" json:"escrows"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *GetAllEscrowResponse) Reset()         { *m = GetAllEscrowResponse{} }
func (m *GetAllEscrowResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllEscrowResponse) ProtoMessage()    {}
func (*GetAllEscrowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c64bc72820e146ca, []int{3}
}
func (m *GetAllEscrowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllEscrowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllEscrowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllEscrowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllEscrowResponse.Merge(m, src)
}
func (m *GetAllEscrowResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllEscrowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllEscrowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllEscrowResponse proto.InternalMessageInfo

func (m *GetAllEscrowResponse) GetEscrows() []AccountEscrow {
	if m != nil {
		return m.Escrows
	}
	return nil
}

func (m *GetAllEscrowResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*GetEscrowRequest)(nil), "provenance.escrow.v1.GetEscrowRequest")
	proto.RegisterType((*GetEscrowResponse)(nil), "provenance.escrow.v1.GetEscrowResponse")
	proto.RegisterType((*GetAllEscrowRequest)(nil), "provenance.escrow.v1.GetAllEscrowRequest")
	proto.RegisterType((*GetAllEscrowResponse)(nil), "provenance.escrow.v1.GetAllEscrowResponse")
}

func init() { proto.RegisterFile("provenance/escrow/v1/query.proto", fileDescriptor_c64bc72820e146ca) }

var fileDescriptor_c64bc72820e146ca = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x05, 0x5a, 0x7a, 0x65, 0x80, 0xa3, 0x12, 0x21, 0x80, 0x13, 0x52, 0xd1, 0x84,
	0x8a, 0xdc, 0x91, 0x20, 0x31, 0xb0, 0x35, 0x15, 0x64, 0x2d, 0x1e, 0xd9, 0x2e, 0xce, 0x61, 0x2c,
	0x92, 0x7b, 0x5d, 0xdf, 0x39, 0x50, 0x21, 0x96, 0x4e, 0x08, 0x16, 0x24, 0xbe, 0x40, 0x85, 0x98,
	0xf8, 0x24, 0x1d, 0x2b, 0xb1, 0x30, 0x01, 0x4a, 0x18, 0xf8, 0x18, 0xc8, 0xbe, 0x33, 0x71, 0x2a,
	0x43, 0x99, 0x72, 0xb9, 0x7b, 0xde, 0xf7, 0xf9, 0xbd, 0x7f, 0x8c, 0xeb, 0x51, 0x0c, 0x13, 0x21,
	0xb9, 0xf4, 0x05, 0x13, 0xca, 0x8f, 0xe1, 0x05, 0x9b, 0x74, 0xd8, 0x5e, 0x22, 0xe2, 0x7d, 0x1a,
	0xc5, 0xa0, 0x81, 0xac, 0xcf, 0x15, 0xd4, 0x28, 0xe8, 0xa4, 0x53, 0xdd, 0xf2, 0x41, 0x8d, 0x41,
	0xb1, 0x01, 0x57, 0xc2, 0xc8, 0xd9, 0xa4, 0x33, 0x10, 0x9a, 0x77, 0x58, 0xc4, 0x83, 0x50, 0x72,
	0x1d, 0x82, 0x34, 0x19, 0xaa, 0x6e, 0x51, 0x9b, 0xab, 0x7c, 0x08, 0xf3, 0xf7, 0xf5, 0x00, 0x02,
	0xc8, 0x8e, 0x2c, 0x3d, 0xd9, 0xdb, 0xeb, 0x01, 0x40, 0x30, 0x12, 0x8c, 0x47, 0x21, 0xe3, 0x52,
	0x82, 0xce, 0x52, 0x2a, 0xfb, 0x7a, 0xb3, 0x94, 0xdb, 0xf2, 0x65, 0x92, 0xc6, 0x7d, 0x7c, 0xb1,
	0x2f, 0xf4, 0xc3, 0xec, 0xca, 0x13, 0x7b, 0x89, 0x50, 0x9a, 0x54, 0xf0, 0x0a, 0x1f, 0x0e, 0x63,
	0xa1, 0x54, 0x05, 0xd5, 0x51, 0x6b, 0xd5, 0xcb, 0xff, 0x3e, 0x38, 0xff, 0xe6, 0xb0, 0xe6, 0xfc,
	0x3a, 0xac, 0x39, 0x8d, 0x03, 0x84, 0x2f, 0x15, 0x02, 0x55, 0x04, 0x52, 0x09, 0xe2, 0xe3, 0x65,
	0x3e, 0x86, 0x44, 0xea, 0x0a, 0xaa, 0x9f, 0x69, 0xad, 0x75, 0xaf, 0x52, 0x53, 0x15, 0x4d, 0xab,
	0xa2, 0xb6, 0x2a, 0xba, 0x03, 0xa1, 0xec, 0xdd, 0x3d, 0xfa, 0x56, 0x73, 0x3e, 0x7f, 0xaf, 0xb5,
	0x82, 0x50, 0x3f, 0x4b, 0x06, 0xd4, 0x87, 0x31, 0xb3, 0x2d, 0x30, 0x3f, 0x6d, 0x35, 0x7c, 0xce,
	0xf4, 0x7e, 0x24, 0x54, 0x16, 0xa0, 0x3c, 0x9b, 0xba, 0x00, 0x11, 0xe0, 0xcb, 0x7d, 0xa1, 0xb7,
	0x47, 0xa3, 0x45, 0xfe, 0x47, 0x18, 0xcf, 0xdb, 0x5b, 0xf1, 0xeb, 0xa8, 0xb5, 0xd6, 0xdd, 0x5c,
	0x20, 0x31, 0xa3, 0xcb, 0x79, 0x76, 0x79, 0x20, 0x6c, 0xac, 0x57, 0x88, 0x2c, 0x18, 0x7d, 0x42,
	0x78, 0x7d, 0xd1, 0xc9, 0x16, 0xbc, 0x83, 0x57, 0x4c, 0x3b, 0x95, 0xad, 0x78, 0x83, 0x96, 0x6d,
	0x02, 0xdd, 0xf6, 0xfd, 0x94, 0xdd, 0x44, 0xf7, 0xce, 0xa6, 0xb5, 0x7b, 0x79, 0x24, 0xe9, 0x97,
	0xf0, 0x36, 0x4f, 0xe5, 0x35, 0x04, 0x45, 0xe0, 0xee, 0xc7, 0x25, 0x7c, 0xee, 0x71, 0x2a, 0x25,
	0xef, 0x10, 0x5e, 0xfd, 0x33, 0x1e, 0xb2, 0x59, 0x0e, 0x75, 0x72, 0xf0, 0xd5, 0xe6, 0xa9, 0x3a,
	0x63, 0xda, 0x68, 0x1f, 0x7c, 0xf9, 0xf9, 0x61, 0xa9, 0x49, 0x6e, 0xb1, 0xd2, 0x0d, 0x7b, 0x9a,
	0xc8, 0xa1, 0x62, 0xaf, 0xec, 0xd6, 0xbc, 0x26, 0x6f, 0x11, 0xbe, 0x50, 0x6c, 0x1f, 0xb9, 0xfd,
	0x57, 0xa3, 0x93, 0xc3, 0xac, 0x6e, 0xfd, 0x8f, 0xd4, 0x62, 0x6d, 0x64, 0x58, 0x37, 0xc8, 0xb5,
	0x7f, 0x60, 0xf5, 0xf8, 0xd1, 0xd4, 0x45, 0xc7, 0x53, 0x17, 0xfd, 0x98, 0xba, 0xe8, 0xfd, 0xcc,
	0x75, 0x8e, 0x67, 0xae, 0xf3, 0x75, 0xe6, 0x3a, 0xf8, 0x4a, 0x08, 0xa5, 0x66, 0xbb, 0xe8, 0xc9,
	0x9d, 0xc2, 0x96, 0xce, 0x25, 0xed, 0x10, 0x8a, 0x4e, 0x2f, 0xad, 0xd7, 0x60, 0x39, 0xfb, 0xb6,
	0xee, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x58, 0x88, 0xd3, 0xd2, 0x38, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetEscrow looks up the funds that are in escrow for an address.
	GetEscrow(ctx context.Context, in *GetEscrowRequest, opts ...grpc.CallOption) (*GetEscrowResponse, error)
	// GetAllEscrow returns all addresses with funds in escrow, and the amount in escrow.
	GetAllEscrow(ctx context.Context, in *GetAllEscrowRequest, opts ...grpc.CallOption) (*GetAllEscrowResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetEscrow(ctx context.Context, in *GetEscrowRequest, opts ...grpc.CallOption) (*GetEscrowResponse, error) {
	out := new(GetEscrowResponse)
	err := c.cc.Invoke(ctx, "/provenance.escrow.v1.Query/GetEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllEscrow(ctx context.Context, in *GetAllEscrowRequest, opts ...grpc.CallOption) (*GetAllEscrowResponse, error) {
	out := new(GetAllEscrowResponse)
	err := c.cc.Invoke(ctx, "/provenance.escrow.v1.Query/GetAllEscrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetEscrow looks up the funds that are in escrow for an address.
	GetEscrow(context.Context, *GetEscrowRequest) (*GetEscrowResponse, error)
	// GetAllEscrow returns all addresses with funds in escrow, and the amount in escrow.
	GetAllEscrow(context.Context, *GetAllEscrowRequest) (*GetAllEscrowResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetEscrow(ctx context.Context, req *GetEscrowRequest) (*GetEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEscrow not implemented")
}
func (*UnimplementedQueryServer) GetAllEscrow(ctx context.Context, req *GetAllEscrowRequest) (*GetAllEscrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEscrow not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.escrow.v1.Query/GetEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEscrow(ctx, req.(*GetEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllEscrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEscrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllEscrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.escrow.v1.Query/GetAllEscrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllEscrow(ctx, req.(*GetAllEscrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.escrow.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEscrow",
			Handler:    _Query_GetEscrow_Handler,
		},
		{
			MethodName: "GetAllEscrow",
			Handler:    _Query_GetAllEscrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/escrow/v1/query.proto",
}

func (m *GetEscrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEscrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEscrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetAllEscrowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllEscrowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllEscrowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *GetAllEscrowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllEscrowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllEscrowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Escrows) > 0 {
		for iNdEx := len(m.Escrows) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrows[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetEscrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetAllEscrowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GetAllEscrowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Escrows) > 0 {
		for _, e := range m.Escrows {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetEscrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEscrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEscrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllEscrowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllEscrowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllEscrowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllEscrowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllEscrowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllEscrowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrows = append(m.Escrows, AccountEscrow{})
			if err := m.Escrows[len(m.Escrows)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
