// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/tx.proto

package ledger

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRequest
type MsgCreateRequest struct {
	Ledger *Ledger `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
	Owner  string  `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgCreateRequest) Reset()         { *m = MsgCreateRequest{} }
func (m *MsgCreateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRequest) ProtoMessage()    {}
func (*MsgCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{0}
}
func (m *MsgCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRequest.Merge(m, src)
}
func (m *MsgCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRequest proto.InternalMessageInfo

func (m *MsgCreateRequest) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

func (m *MsgCreateRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgCreateResponse
type MsgCreateResponse struct {
}

func (m *MsgCreateResponse) Reset()         { *m = MsgCreateResponse{} }
func (m *MsgCreateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateResponse) ProtoMessage()    {}
func (*MsgCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{1}
}
func (m *MsgCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateResponse.Merge(m, src)
}
func (m *MsgCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateResponse proto.InternalMessageInfo

// MsgAppendRequest
type MsgAppendRequest struct {
	NftAddress string       `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Entry      *LedgerEntry `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	Owner      string       `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgAppendRequest) Reset()         { *m = MsgAppendRequest{} }
func (m *MsgAppendRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAppendRequest) ProtoMessage()    {}
func (*MsgAppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{2}
}
func (m *MsgAppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendRequest.Merge(m, src)
}
func (m *MsgAppendRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendRequest proto.InternalMessageInfo

func (m *MsgAppendRequest) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *MsgAppendRequest) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *MsgAppendRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgAppendResponse
type MsgAppendResponse struct {
}

func (m *MsgAppendResponse) Reset()         { *m = MsgAppendResponse{} }
func (m *MsgAppendResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAppendResponse) ProtoMessage()    {}
func (*MsgAppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{3}
}
func (m *MsgAppendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendResponse.Merge(m, src)
}
func (m *MsgAppendResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendResponse proto.InternalMessageInfo

// MsgProcessFundTransfersRequest represents a request to process multiple fund transfers
type MsgProcessFundTransfersRequest struct {
	Owner     string          `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Transfers []*FundTransfer `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *MsgProcessFundTransfersRequest) Reset()         { *m = MsgProcessFundTransfersRequest{} }
func (m *MsgProcessFundTransfersRequest) String() string { return proto.CompactTextString(m) }
func (*MsgProcessFundTransfersRequest) ProtoMessage()    {}
func (*MsgProcessFundTransfersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{4}
}
func (m *MsgProcessFundTransfersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessFundTransfersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessFundTransfersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessFundTransfersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessFundTransfersRequest.Merge(m, src)
}
func (m *MsgProcessFundTransfersRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessFundTransfersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessFundTransfersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessFundTransfersRequest proto.InternalMessageInfo

func (m *MsgProcessFundTransfersRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgProcessFundTransfersRequest) GetTransfers() []*FundTransfer {
	if m != nil {
		return m.Transfers
	}
	return nil
}

// MsgProcessFundTransfersResponse represents the response from processing fund transfers
type MsgProcessFundTransfersResponse struct {
}

func (m *MsgProcessFundTransfersResponse) Reset()         { *m = MsgProcessFundTransfersResponse{} }
func (m *MsgProcessFundTransfersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProcessFundTransfersResponse) ProtoMessage()    {}
func (*MsgProcessFundTransfersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{5}
}
func (m *MsgProcessFundTransfersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessFundTransfersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessFundTransfersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessFundTransfersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessFundTransfersResponse.Merge(m, src)
}
func (m *MsgProcessFundTransfersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessFundTransfersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessFundTransfersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessFundTransfersResponse proto.InternalMessageInfo

// MsgProcessFundTransfersWithSettlementRequest represents a request to process fund transfers with settlement
// instructions
type MsgProcessFundTransfersWithSettlementRequest struct {
	Owner     string                        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Transfers []*FundTransferWithSettlement `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *MsgProcessFundTransfersWithSettlementRequest) Reset() {
	*m = MsgProcessFundTransfersWithSettlementRequest{}
}
func (m *MsgProcessFundTransfersWithSettlementRequest) String() string {
	return proto.CompactTextString(m)
}
func (*MsgProcessFundTransfersWithSettlementRequest) ProtoMessage() {}
func (*MsgProcessFundTransfersWithSettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{6}
}
func (m *MsgProcessFundTransfersWithSettlementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessFundTransfersWithSettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessFundTransfersWithSettlementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessFundTransfersWithSettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessFundTransfersWithSettlementRequest.Merge(m, src)
}
func (m *MsgProcessFundTransfersWithSettlementRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessFundTransfersWithSettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessFundTransfersWithSettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessFundTransfersWithSettlementRequest proto.InternalMessageInfo

func (m *MsgProcessFundTransfersWithSettlementRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgProcessFundTransfersWithSettlementRequest) GetTransfers() []*FundTransferWithSettlement {
	if m != nil {
		return m.Transfers
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateRequest)(nil), "provenance.ledger.v1.MsgCreateRequest")
	proto.RegisterType((*MsgCreateResponse)(nil), "provenance.ledger.v1.MsgCreateResponse")
	proto.RegisterType((*MsgAppendRequest)(nil), "provenance.ledger.v1.MsgAppendRequest")
	proto.RegisterType((*MsgAppendResponse)(nil), "provenance.ledger.v1.MsgAppendResponse")
	proto.RegisterType((*MsgProcessFundTransfersRequest)(nil), "provenance.ledger.v1.MsgProcessFundTransfersRequest")
	proto.RegisterType((*MsgProcessFundTransfersResponse)(nil), "provenance.ledger.v1.MsgProcessFundTransfersResponse")
	proto.RegisterType((*MsgProcessFundTransfersWithSettlementRequest)(nil), "provenance.ledger.v1.MsgProcessFundTransfersWithSettlementRequest")
}

func init() { proto.RegisterFile("provenance/ledger/v1/tx.proto", fileDescriptor_3c124d2e9569f84d) }

var fileDescriptor_3c124d2e9569f84d = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0x55, 0xad, 0xd4, 0xaf, 0x17, 0x30, 0x95, 0x56, 0x45, 0x90, 0xb5, 0x39, 0x40,
	0x35, 0x8d, 0x84, 0x95, 0x21, 0x24, 0x4e, 0x6c, 0x08, 0x4e, 0x14, 0x4d, 0x01, 0x09, 0xc1, 0x05,
	0x65, 0xcd, 0xd7, 0xac, 0x68, 0xb1, 0x83, 0xed, 0x96, 0x71, 0x43, 0xc0, 0x19, 0xf1, 0x06, 0xf0,
	0x08, 0x7b, 0x0c, 0x8e, 0x3b, 0x72, 0x44, 0xed, 0x61, 0x12, 0x4f, 0x81, 0x1a, 0xa7, 0xb4, 0x1d,
	0x6e, 0xaa, 0xed, 0x66, 0xc7, 0x7f, 0xff, 0xbe, 0x5f, 0xec, 0x4f, 0x86, 0x1b, 0x89, 0xe0, 0x43,
	0x64, 0x01, 0xeb, 0xa2, 0x77, 0x84, 0x61, 0x84, 0xc2, 0x1b, 0x6e, 0x7b, 0xea, 0xd8, 0x4d, 0x04,
	0x57, 0x9c, 0xd6, 0x66, 0xcb, 0xae, 0x5e, 0x76, 0x87, 0xdb, 0xd6, 0x7a, 0x97, 0xcb, 0x98, 0x4b,
	0x2f, 0x96, 0xd1, 0x24, 0x1d, 0xcb, 0x48, 0xc7, 0xad, 0xa6, 0x91, 0x96, 0x6d, 0x4c, 0x23, 0xce,
	0x5b, 0xb8, 0xd2, 0x91, 0xd1, 0x23, 0x81, 0x81, 0x42, 0x1f, 0xdf, 0x0d, 0x50, 0x2a, 0xba, 0x03,
	0x65, 0x9d, 0xa9, 0x93, 0x06, 0x69, 0x55, 0xdb, 0xd7, 0x5d, 0x53, 0x59, 0xf7, 0x69, 0x3a, 0xf2,
	0xb3, 0x2c, 0xad, 0x41, 0x89, 0xbf, 0x67, 0x28, 0xea, 0x6b, 0x0d, 0xd2, 0xaa, 0xf8, 0x7a, 0xf2,
	0x00, 0x3e, 0x9d, 0x9d, 0x6c, 0xea, 0xb1, 0x73, 0x0d, 0xae, 0xce, 0xd5, 0x92, 0x09, 0x67, 0x12,
	0x9d, 0xaf, 0x24, 0x35, 0xd8, 0x4d, 0x12, 0x64, 0xe1, 0xd4, 0x60, 0x03, 0xaa, 0xac, 0xa7, 0xde,
	0x04, 0x61, 0x28, 0x50, 0xca, 0x54, 0xa3, 0xe2, 0x03, 0xeb, 0xa9, 0x5d, 0xfd, 0x85, 0xde, 0x87,
	0x12, 0x32, 0x25, 0x3e, 0xa4, 0xc5, 0xaa, 0xed, 0x66, 0x9e, 0xe1, 0xe3, 0x49, 0xd0, 0xd7, 0xf9,
	0x99, 0x65, 0x31, 0xdf, 0x72, 0xea, 0x93, 0x59, 0x7e, 0x21, 0x60, 0x77, 0x64, 0xb4, 0x2f, 0x78,
	0x17, 0xa5, 0x7c, 0x32, 0x60, 0xe1, 0x0b, 0x11, 0x30, 0xd9, 0x43, 0x21, 0xa7, 0xce, 0xff, 0xc8,
	0x64, 0x8e, 0x4c, 0x1f, 0x42, 0x45, 0x4d, 0x93, 0xf5, 0xb5, 0x46, 0xb1, 0x55, 0x6d, 0x3b, 0x66,
	0xd9, 0x79, 0xa8, 0x3f, 0xdb, 0xb4, 0xe0, 0xd6, 0x84, 0x8d, 0xa5, 0x16, 0x99, 0xe9, 0x0f, 0x02,
	0x5b, 0x4b, 0x32, 0x2f, 0xfb, 0xea, 0xf0, 0x39, 0x2a, 0x75, 0x84, 0x31, 0x32, 0x95, 0xef, 0xfd,
	0xec, 0x7f, 0xef, 0x3b, 0xab, 0xbd, 0xcf, 0x55, 0x30, 0xff, 0x45, 0xfb, 0x4f, 0x11, 0x8a, 0x1d,
	0x19, 0xd1, 0x57, 0x50, 0xd6, 0xcd, 0x40, 0x6f, 0x9a, 0xd1, 0xe7, 0x3b, 0xd3, 0xba, 0xb5, 0x32,
	0xa7, 0x4f, 0x61, 0x82, 0xd6, 0x37, 0x98, 0x83, 0x5e, 0x68, 0xb9, 0x1c, 0xf4, 0x62, 0x2b, 0xd0,
	0xcf, 0x04, 0x6a, 0xa6, 0xd3, 0xa5, 0x3b, 0x4b, 0x09, 0x39, 0x6d, 0x63, 0xdd, 0xbb, 0xe0, 0xae,
	0xcc, 0xe2, 0x3b, 0x01, 0x67, 0xf5, 0x1d, 0xd3, 0xbd, 0x0b, 0xd1, 0x8d, 0x0d, 0x72, 0x49, 0x43,
	0xab, 0xf4, 0xf1, 0xec, 0x64, 0x93, 0xec, 0x05, 0x3f, 0x47, 0x36, 0x39, 0x1d, 0xd9, 0xe4, 0xf7,
	0xc8, 0x26, 0xdf, 0xc6, 0x76, 0xe1, 0x74, 0x6c, 0x17, 0x7e, 0x8d, 0xed, 0x02, 0xac, 0xf7, 0xb9,
	0x91, 0xbc, 0x4f, 0x5e, 0x6f, 0x45, 0x7d, 0x75, 0x38, 0x38, 0x70, 0xbb, 0x3c, 0xf6, 0x66, 0x91,
	0xdb, 0x7d, 0x3e, 0x37, 0xf3, 0x8e, 0xb3, 0x97, 0xec, 0xa0, 0x9c, 0x3e, 0x65, 0x77, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xdd, 0x2f, 0x2c, 0x99, 0x3d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create a new NFT ledger
	Create(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateResponse, error)
	// Append a ledger entry
	Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error)
	// Process multiple fund transfers (payments and disbursements)
	ProcessFundTransfers(ctx context.Context, in *MsgProcessFundTransfersRequest, opts ...grpc.CallOption) (*MsgProcessFundTransfersResponse, error)
	// Process multiple fund transfers with manual settlement instructions
	ProcessFundTransfersWithSettlement(ctx context.Context, in *MsgProcessFundTransfersWithSettlementRequest, opts ...grpc.CallOption) (*MsgProcessFundTransfersResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Create(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateResponse, error) {
	out := new(MsgCreateResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error) {
	out := new(MsgAppendResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessFundTransfers(ctx context.Context, in *MsgProcessFundTransfersRequest, opts ...grpc.CallOption) (*MsgProcessFundTransfersResponse, error) {
	out := new(MsgProcessFundTransfersResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/ProcessFundTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessFundTransfersWithSettlement(ctx context.Context, in *MsgProcessFundTransfersWithSettlementRequest, opts ...grpc.CallOption) (*MsgProcessFundTransfersResponse, error) {
	out := new(MsgProcessFundTransfersResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/ProcessFundTransfersWithSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create a new NFT ledger
	Create(context.Context, *MsgCreateRequest) (*MsgCreateResponse, error)
	// Append a ledger entry
	Append(context.Context, *MsgAppendRequest) (*MsgAppendResponse, error)
	// Process multiple fund transfers (payments and disbursements)
	ProcessFundTransfers(context.Context, *MsgProcessFundTransfersRequest) (*MsgProcessFundTransfersResponse, error)
	// Process multiple fund transfers with manual settlement instructions
	ProcessFundTransfersWithSettlement(context.Context, *MsgProcessFundTransfersWithSettlementRequest) (*MsgProcessFundTransfersResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Create(ctx context.Context, req *MsgCreateRequest) (*MsgCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedMsgServer) Append(ctx context.Context, req *MsgAppendRequest) (*MsgAppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedMsgServer) ProcessFundTransfers(ctx context.Context, req *MsgProcessFundTransfersRequest) (*MsgProcessFundTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFundTransfers not implemented")
}
func (*UnimplementedMsgServer) ProcessFundTransfersWithSettlement(ctx context.Context, req *MsgProcessFundTransfersWithSettlementRequest) (*MsgProcessFundTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFundTransfersWithSettlement not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Create(ctx, req.(*MsgCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Append(ctx, req.(*MsgAppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessFundTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessFundTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessFundTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/ProcessFundTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessFundTransfers(ctx, req.(*MsgProcessFundTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessFundTransfersWithSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessFundTransfersWithSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessFundTransfersWithSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/ProcessFundTransfersWithSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessFundTransfersWithSettlement(ctx, req.(*MsgProcessFundTransfersWithSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Msg_Create_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Msg_Append_Handler,
		},
		{
			MethodName: "ProcessFundTransfers",
			Handler:    _Msg_ProcessFundTransfers_Handler,
		},
		{
			MethodName: "ProcessFundTransfersWithSettlement",
			Handler:    _Msg_ProcessFundTransfersWithSettlement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/tx.proto",
}

func (m *MsgCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProcessFundTransfersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessFundTransfersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessFundTransfersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessFundTransfersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessFundTransfersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessFundTransfersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProcessFundTransfersWithSettlementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessFundTransfersWithSettlementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessFundTransfersWithSettlementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAppendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAppendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProcessFundTransfersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgProcessFundTransfersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProcessFundTransfersWithSettlementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ledger == nil {
				m.Ledger = &Ledger{}
			}
			if err := m.Ledger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessFundTransfersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessFundTransfersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessFundTransfersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &FundTransfer{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessFundTransfersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessFundTransfersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessFundTransfersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessFundTransfersWithSettlementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessFundTransfersWithSettlementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessFundTransfersWithSettlementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &FundTransferWithSettlement{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
