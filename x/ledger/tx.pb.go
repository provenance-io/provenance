// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/tx.proto

package ledger

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRequest
type MsgCreateRequest struct {
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Owner      string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgCreateRequest) Reset()         { *m = MsgCreateRequest{} }
func (m *MsgCreateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRequest) ProtoMessage()    {}
func (*MsgCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{0}
}
func (m *MsgCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRequest.Merge(m, src)
}
func (m *MsgCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRequest proto.InternalMessageInfo

func (m *MsgCreateRequest) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *MsgCreateRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCreateRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgCreateResponse
type MsgCreateResponse struct {
}

func (m *MsgCreateResponse) Reset()         { *m = MsgCreateResponse{} }
func (m *MsgCreateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateResponse) ProtoMessage()    {}
func (*MsgCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{1}
}
func (m *MsgCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateResponse.Merge(m, src)
}
func (m *MsgCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateResponse proto.InternalMessageInfo

// MsgAppendRequest
type MsgAppendRequest struct {
	NftAddress string       `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Entry      *LedgerEntry `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
	Owner      string       `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgAppendRequest) Reset()         { *m = MsgAppendRequest{} }
func (m *MsgAppendRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAppendRequest) ProtoMessage()    {}
func (*MsgAppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{2}
}
func (m *MsgAppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendRequest.Merge(m, src)
}
func (m *MsgAppendRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendRequest proto.InternalMessageInfo

func (m *MsgAppendRequest) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *MsgAppendRequest) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *MsgAppendRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// MsgAppendResponse
type MsgAppendResponse struct {
}

func (m *MsgAppendResponse) Reset()         { *m = MsgAppendResponse{} }
func (m *MsgAppendResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAppendResponse) ProtoMessage()    {}
func (*MsgAppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{3}
}
func (m *MsgAppendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendResponse.Merge(m, src)
}
func (m *MsgAppendResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendResponse proto.InternalMessageInfo

// PaymentEntry represents a single payment to process
type PaymentEntry struct {
	LedgerEntryUuid string `protobuf:"bytes,1,opt,name=ledger_entry_uuid,json=ledgerEntryUuid,proto3" json:"ledger_entry_uuid,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Memo            string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *PaymentEntry) Reset()         { *m = PaymentEntry{} }
func (m *PaymentEntry) String() string { return proto.CompactTextString(m) }
func (*PaymentEntry) ProtoMessage()    {}
func (*PaymentEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{4}
}
func (m *PaymentEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentEntry.Merge(m, src)
}
func (m *PaymentEntry) XXX_Size() int {
	return m.Size()
}
func (m *PaymentEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentEntry proto.InternalMessageInfo

func (m *PaymentEntry) GetLedgerEntryUuid() string {
	if m != nil {
		return m.LedgerEntryUuid
	}
	return ""
}

func (m *PaymentEntry) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *PaymentEntry) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// MsgProcessPaymentsRequest represents a request to process multiple payments
type MsgProcessPaymentsRequest struct {
	Owner    string          `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Payments []*PaymentEntry `protobuf:"bytes,2,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (m *MsgProcessPaymentsRequest) Reset()         { *m = MsgProcessPaymentsRequest{} }
func (m *MsgProcessPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgProcessPaymentsRequest) ProtoMessage()    {}
func (*MsgProcessPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{5}
}
func (m *MsgProcessPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessPaymentsRequest.Merge(m, src)
}
func (m *MsgProcessPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessPaymentsRequest proto.InternalMessageInfo

func (m *MsgProcessPaymentsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgProcessPaymentsRequest) GetPayments() []*PaymentEntry {
	if m != nil {
		return m.Payments
	}
	return nil
}

// MsgProcessPaymentsResponse represents the response from processing payments
type MsgProcessPaymentsResponse struct {
	ProcessedEntryUuids []string `protobuf:"bytes,1,rep,name=processed_entry_uuids,json=processedEntryUuids,proto3" json:"processed_entry_uuids,omitempty"`
	FlowIds             []string `protobuf:"bytes,2,rep,name=flow_ids,json=flowIds,proto3" json:"flow_ids,omitempty"`
}

func (m *MsgProcessPaymentsResponse) Reset()         { *m = MsgProcessPaymentsResponse{} }
func (m *MsgProcessPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProcessPaymentsResponse) ProtoMessage()    {}
func (*MsgProcessPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{6}
}
func (m *MsgProcessPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessPaymentsResponse.Merge(m, src)
}
func (m *MsgProcessPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessPaymentsResponse proto.InternalMessageInfo

func (m *MsgProcessPaymentsResponse) GetProcessedEntryUuids() []string {
	if m != nil {
		return m.ProcessedEntryUuids
	}
	return nil
}

func (m *MsgProcessPaymentsResponse) GetFlowIds() []string {
	if m != nil {
		return m.FlowIds
	}
	return nil
}

// DisbursementEntry represents a single disbursement to process
type DisbursementEntry struct {
	LedgerEntryUuid string `protobuf:"bytes,1,opt,name=ledger_entry_uuid,json=ledgerEntryUuid,proto3" json:"ledger_entry_uuid,omitempty"`
	Amount          string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Memo            string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *DisbursementEntry) Reset()         { *m = DisbursementEntry{} }
func (m *DisbursementEntry) String() string { return proto.CompactTextString(m) }
func (*DisbursementEntry) ProtoMessage()    {}
func (*DisbursementEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{7}
}
func (m *DisbursementEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisbursementEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisbursementEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisbursementEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisbursementEntry.Merge(m, src)
}
func (m *DisbursementEntry) XXX_Size() int {
	return m.Size()
}
func (m *DisbursementEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DisbursementEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DisbursementEntry proto.InternalMessageInfo

func (m *DisbursementEntry) GetLedgerEntryUuid() string {
	if m != nil {
		return m.LedgerEntryUuid
	}
	return ""
}

func (m *DisbursementEntry) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *DisbursementEntry) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// MsgProcessDisbursementsRequest represents a request to process multiple disbursements
type MsgProcessDisbursementsRequest struct {
	Owner         string               `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Disbursements []*DisbursementEntry `protobuf:"bytes,2,rep,name=disbursements,proto3" json:"disbursements,omitempty"`
}

func (m *MsgProcessDisbursementsRequest) Reset()         { *m = MsgProcessDisbursementsRequest{} }
func (m *MsgProcessDisbursementsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgProcessDisbursementsRequest) ProtoMessage()    {}
func (*MsgProcessDisbursementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{8}
}
func (m *MsgProcessDisbursementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessDisbursementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessDisbursementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessDisbursementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessDisbursementsRequest.Merge(m, src)
}
func (m *MsgProcessDisbursementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessDisbursementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessDisbursementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessDisbursementsRequest proto.InternalMessageInfo

func (m *MsgProcessDisbursementsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgProcessDisbursementsRequest) GetDisbursements() []*DisbursementEntry {
	if m != nil {
		return m.Disbursements
	}
	return nil
}

// MsgProcessDisbursementsResponse represents the response from processing disbursements
type MsgProcessDisbursementsResponse struct {
	ProcessedEntryUuids []string `protobuf:"bytes,1,rep,name=processed_entry_uuids,json=processedEntryUuids,proto3" json:"processed_entry_uuids,omitempty"`
	FlowIds             []string `protobuf:"bytes,2,rep,name=flow_ids,json=flowIds,proto3" json:"flow_ids,omitempty"`
}

func (m *MsgProcessDisbursementsResponse) Reset()         { *m = MsgProcessDisbursementsResponse{} }
func (m *MsgProcessDisbursementsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProcessDisbursementsResponse) ProtoMessage()    {}
func (*MsgProcessDisbursementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{9}
}
func (m *MsgProcessDisbursementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessDisbursementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessDisbursementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessDisbursementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessDisbursementsResponse.Merge(m, src)
}
func (m *MsgProcessDisbursementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessDisbursementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessDisbursementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessDisbursementsResponse proto.InternalMessageInfo

func (m *MsgProcessDisbursementsResponse) GetProcessedEntryUuids() []string {
	if m != nil {
		return m.ProcessedEntryUuids
	}
	return nil
}

func (m *MsgProcessDisbursementsResponse) GetFlowIds() []string {
	if m != nil {
		return m.FlowIds
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateRequest)(nil), "provenance.ledger.v1.MsgCreateRequest")
	proto.RegisterType((*MsgCreateResponse)(nil), "provenance.ledger.v1.MsgCreateResponse")
	proto.RegisterType((*MsgAppendRequest)(nil), "provenance.ledger.v1.MsgAppendRequest")
	proto.RegisterType((*MsgAppendResponse)(nil), "provenance.ledger.v1.MsgAppendResponse")
	proto.RegisterType((*PaymentEntry)(nil), "provenance.ledger.v1.PaymentEntry")
	proto.RegisterType((*MsgProcessPaymentsRequest)(nil), "provenance.ledger.v1.MsgProcessPaymentsRequest")
	proto.RegisterType((*MsgProcessPaymentsResponse)(nil), "provenance.ledger.v1.MsgProcessPaymentsResponse")
	proto.RegisterType((*DisbursementEntry)(nil), "provenance.ledger.v1.DisbursementEntry")
	proto.RegisterType((*MsgProcessDisbursementsRequest)(nil), "provenance.ledger.v1.MsgProcessDisbursementsRequest")
	proto.RegisterType((*MsgProcessDisbursementsResponse)(nil), "provenance.ledger.v1.MsgProcessDisbursementsResponse")
}

func init() { proto.RegisterFile("provenance/ledger/v1/tx.proto", fileDescriptor_3c124d2e9569f84d) }

var fileDescriptor_3c124d2e9569f84d = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x13, 0x12, 0xda, 0x09, 0xa8, 0x64, 0x1b, 0x68, 0x6a, 0x09, 0xb7, 0xf5, 0x81, 0x46,
	0x11, 0xd8, 0x34, 0x80, 0x90, 0x38, 0x20, 0x95, 0x8f, 0x03, 0x12, 0x91, 0x22, 0x4b, 0x1c, 0xca,
	0x25, 0x72, 0xe2, 0x8d, 0xb1, 0x12, 0x7b, 0x8d, 0x77, 0x9d, 0xb6, 0x07, 0x24, 0x04, 0x77, 0x04,
	0xff, 0xa4, 0xbf, 0x80, 0x33, 0xc7, 0x1e, 0x39, 0xa2, 0xe4, 0xd0, 0xbf, 0x81, 0xbc, 0xbb, 0x4d,
	0x9c, 0xe2, 0x36, 0xe1, 0xd0, 0xdb, 0xce, 0xce, 0x9b, 0x99, 0xf7, 0x9e, 0x3d, 0x36, 0xdc, 0x0d,
	0x23, 0x32, 0xc4, 0x81, 0x1d, 0x74, 0xb1, 0x39, 0xc0, 0x8e, 0x8b, 0x23, 0x73, 0xb8, 0x6b, 0xb2,
	0x43, 0x23, 0x8c, 0x08, 0x23, 0xa8, 0x32, 0x4d, 0x1b, 0x22, 0x6d, 0x0c, 0x77, 0xd5, 0xf5, 0x2e,
	0xa1, 0x3e, 0xa1, 0xa6, 0x4f, 0xdd, 0x04, 0xed, 0x53, 0x57, 0xc0, 0xd5, 0xed, 0xcc, 0x6e, 0xb2,
	0x90, 0x43, 0xf4, 0x3e, 0xdc, 0x6a, 0x52, 0xf7, 0x65, 0x84, 0x6d, 0x86, 0x2d, 0xfc, 0x31, 0xc6,
	0x94, 0xa1, 0x4d, 0x28, 0x05, 0x3d, 0xd6, 0xb6, 0x1d, 0x27, 0xc2, 0x94, 0x56, 0x95, 0x2d, 0xa5,
	0xb6, 0x62, 0x41, 0xd0, 0x63, 0x7b, 0xe2, 0x06, 0x55, 0xa0, 0xe0, 0xe0, 0x80, 0xf8, 0xd5, 0x1c,
	0x4f, 0x89, 0x20, 0xb9, 0x25, 0x07, 0x01, 0x8e, 0xaa, 0x79, 0x71, 0xcb, 0x83, 0x67, 0xf0, 0xe5,
	0xf4, 0xb8, 0x2e, 0xce, 0xfa, 0x1a, 0x94, 0x53, 0xc3, 0x68, 0x48, 0x02, 0x8a, 0xf5, 0x6f, 0x0a,
	0xa7, 0xb0, 0x17, 0x86, 0x38, 0x70, 0x16, 0xa6, 0xf0, 0x14, 0x0a, 0x38, 0x60, 0xd1, 0x11, 0xa7,
	0x50, 0x6a, 0x6c, 0x1b, 0x59, 0xce, 0x18, 0x6f, 0xf9, 0xe9, 0x75, 0x02, 0xb4, 0x04, 0x7e, 0x61,
	0x96, 0x67, 0x7c, 0x24, 0xcb, 0x1e, 0xdc, 0x68, 0xd9, 0x47, 0x3e, 0x0e, 0x18, 0xef, 0x86, 0xea,
	0x50, 0x16, 0x63, 0xda, 0xbc, 0x6d, 0x3b, 0x8e, 0x3d, 0x47, 0xd2, 0x5c, 0x1d, 0x4c, 0xa7, 0xbe,
	0x8b, 0x3d, 0x07, 0xdd, 0x81, 0xa2, 0xed, 0x93, 0x38, 0x60, 0xd2, 0x2f, 0x19, 0x21, 0x04, 0xd7,
	0x7c, 0xec, 0x13, 0xc9, 0x84, 0x9f, 0xf5, 0x4f, 0xb0, 0xd1, 0xa4, 0x6e, 0x2b, 0x22, 0x5d, 0x4c,
	0xa9, 0x9c, 0x48, 0xcf, 0x5c, 0x99, 0x70, 0x57, 0x52, 0xdc, 0xd1, 0x73, 0x58, 0x0e, 0x25, 0xb0,
	0x9a, 0xdb, 0xca, 0xd7, 0x4a, 0x0d, 0x3d, 0xdb, 0x8d, 0xb4, 0x00, 0x6b, 0x52, 0x33, 0xa3, 0xbd,
	0x0f, 0x6a, 0xd6, 0x78, 0x61, 0x02, 0x6a, 0xc0, 0xed, 0x50, 0xa4, 0xb0, 0x93, 0xd2, 0x9d, 0x3c,
	0x9f, 0x7c, 0x6d, 0xc5, 0x5a, 0x9b, 0x24, 0x27, 0xda, 0x29, 0xda, 0x80, 0xe5, 0xde, 0x80, 0x1c,
	0xb4, 0x13, 0x58, 0x8e, 0xc3, 0xae, 0x27, 0xf1, 0x1b, 0x87, 0xea, 0x7d, 0x28, 0xbf, 0xf2, 0x68,
	0x27, 0x8e, 0x28, 0xbe, 0x7a, 0x63, 0x7f, 0x28, 0xa0, 0x4d, 0xa5, 0xa5, 0xe7, 0xce, 0xb1, 0xb7,
	0x09, 0x37, 0x9d, 0x34, 0x5a, 0x7a, 0xbc, 0x93, 0xed, 0xf1, 0x3f, 0x82, 0xac, 0xd9, 0xea, 0x19,
	0xb7, 0x43, 0xd8, 0xbc, 0x90, 0xd2, 0x95, 0x58, 0xde, 0xf8, 0x99, 0x87, 0x7c, 0x93, 0xba, 0x68,
	0x1f, 0x8a, 0x62, 0x0d, 0xd1, 0xbd, 0x6c, 0x1d, 0xe7, 0x3f, 0x0a, 0xea, 0xce, 0x5c, 0x9c, 0x64,
	0xbc, 0x0f, 0x45, 0xb1, 0x3b, 0x97, 0xb4, 0x9e, 0x59, 0xf6, 0x4b, 0x5a, 0xcf, 0x2e, 0x21, 0x62,
	0xb0, 0x7a, 0xee, 0xd5, 0x44, 0xe6, 0x85, 0xb5, 0xd9, 0x3b, 0xa4, 0x3e, 0x5c, 0xbc, 0x40, 0x4e,
	0xfd, 0xaa, 0x40, 0x25, 0xeb, 0x19, 0xa1, 0xc7, 0xf3, 0x5a, 0x65, 0xbd, 0x65, 0xea, 0x93, 0xff,
	0xac, 0x12, 0x2c, 0xd4, 0xc2, 0xe7, 0xd3, 0xe3, 0xba, 0xf2, 0xc2, 0xfe, 0x35, 0xd2, 0x94, 0x93,
	0x91, 0xa6, 0xfc, 0x19, 0x69, 0xca, 0xf7, 0xb1, 0xb6, 0x74, 0x32, 0xd6, 0x96, 0x7e, 0x8f, 0xb5,
	0x25, 0x58, 0xf7, 0x48, 0x66, 0xe7, 0x96, 0xf2, 0xfe, 0xbe, 0xeb, 0xb1, 0x0f, 0x71, 0xc7, 0xe8,
	0x12, 0xdf, 0x9c, 0x42, 0x1e, 0x78, 0x24, 0x15, 0x99, 0x87, 0xf2, 0xc7, 0xd0, 0x29, 0xf2, 0x3f,
	0xc3, 0xa3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x7e, 0xc7, 0x91, 0x8c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Create a new NFT ledger
	Create(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateResponse, error)
	// Append a ledger entry
	Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error)
	// Process multiple payments
	ProcessPayments(ctx context.Context, in *MsgProcessPaymentsRequest, opts ...grpc.CallOption) (*MsgProcessPaymentsResponse, error)
	// Process multiple disbursements
	ProcessDisbursements(ctx context.Context, in *MsgProcessDisbursementsRequest, opts ...grpc.CallOption) (*MsgProcessDisbursementsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Create(ctx context.Context, in *MsgCreateRequest, opts ...grpc.CallOption) (*MsgCreateResponse, error) {
	out := new(MsgCreateResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error) {
	out := new(MsgAppendResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessPayments(ctx context.Context, in *MsgProcessPaymentsRequest, opts ...grpc.CallOption) (*MsgProcessPaymentsResponse, error) {
	out := new(MsgProcessPaymentsResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/ProcessPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessDisbursements(ctx context.Context, in *MsgProcessDisbursementsRequest, opts ...grpc.CallOption) (*MsgProcessDisbursementsResponse, error) {
	out := new(MsgProcessDisbursementsResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/ProcessDisbursements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Create a new NFT ledger
	Create(context.Context, *MsgCreateRequest) (*MsgCreateResponse, error)
	// Append a ledger entry
	Append(context.Context, *MsgAppendRequest) (*MsgAppendResponse, error)
	// Process multiple payments
	ProcessPayments(context.Context, *MsgProcessPaymentsRequest) (*MsgProcessPaymentsResponse, error)
	// Process multiple disbursements
	ProcessDisbursements(context.Context, *MsgProcessDisbursementsRequest) (*MsgProcessDisbursementsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Create(ctx context.Context, req *MsgCreateRequest) (*MsgCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedMsgServer) Append(ctx context.Context, req *MsgAppendRequest) (*MsgAppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedMsgServer) ProcessPayments(ctx context.Context, req *MsgProcessPaymentsRequest) (*MsgProcessPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayments not implemented")
}
func (*UnimplementedMsgServer) ProcessDisbursements(ctx context.Context, req *MsgProcessDisbursementsRequest) (*MsgProcessDisbursementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDisbursements not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Create(ctx, req.(*MsgCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Append(ctx, req.(*MsgAppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/ProcessPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessPayments(ctx, req.(*MsgProcessPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessDisbursements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessDisbursementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessDisbursements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/ProcessDisbursements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessDisbursements(ctx, req.(*MsgProcessDisbursementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Msg_Create_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Msg_Append_Handler,
		},
		{
			MethodName: "ProcessPayments",
			Handler:    _Msg_ProcessPayments_Handler,
		},
		{
			MethodName: "ProcessDisbursements",
			Handler:    _Msg_ProcessDisbursements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/tx.proto",
}

func (m *MsgCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PaymentEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerEntryUuid) > 0 {
		i -= len(m.LedgerEntryUuid)
		copy(dAtA[i:], m.LedgerEntryUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerEntryUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlowIds) > 0 {
		for iNdEx := len(m.FlowIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FlowIds[iNdEx])
			copy(dAtA[i:], m.FlowIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.FlowIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProcessedEntryUuids) > 0 {
		for iNdEx := len(m.ProcessedEntryUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProcessedEntryUuids[iNdEx])
			copy(dAtA[i:], m.ProcessedEntryUuids[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ProcessedEntryUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DisbursementEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisbursementEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisbursementEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerEntryUuid) > 0 {
		i -= len(m.LedgerEntryUuid)
		copy(dAtA[i:], m.LedgerEntryUuid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerEntryUuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessDisbursementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessDisbursementsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessDisbursementsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Disbursements) > 0 {
		for iNdEx := len(m.Disbursements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Disbursements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessDisbursementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessDisbursementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessDisbursementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FlowIds) > 0 {
		for iNdEx := len(m.FlowIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FlowIds[iNdEx])
			copy(dAtA[i:], m.FlowIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.FlowIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProcessedEntryUuids) > 0 {
		for iNdEx := len(m.ProcessedEntryUuids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProcessedEntryUuids[iNdEx])
			copy(dAtA[i:], m.ProcessedEntryUuids[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ProcessedEntryUuids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAppendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAppendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PaymentEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerEntryUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProcessPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgProcessPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProcessedEntryUuids) > 0 {
		for _, s := range m.ProcessedEntryUuids {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.FlowIds) > 0 {
		for _, s := range m.FlowIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *DisbursementEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerEntryUuid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProcessDisbursementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Disbursements) > 0 {
		for _, e := range m.Disbursements {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgProcessDisbursementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProcessedEntryUuids) > 0 {
		for _, s := range m.ProcessedEntryUuids {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.FlowIds) > 0 {
		for _, s := range m.FlowIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &PaymentEntry{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedEntryUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessedEntryUuids = append(m.ProcessedEntryUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowIds = append(m.FlowIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisbursementEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisbursementEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisbursementEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessDisbursementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessDisbursementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessDisbursementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disbursements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disbursements = append(m.Disbursements, &DisbursementEntry{})
			if err := m.Disbursements[len(m.Disbursements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessDisbursementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessDisbursementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessDisbursementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedEntryUuids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessedEntryUuids = append(m.ProcessedEntryUuids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlowIds = append(m.FlowIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
