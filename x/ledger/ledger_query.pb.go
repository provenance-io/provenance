// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/ledger_query.proto

package ledger

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ledger
type LedgerPlainText struct {
	// Address of the NFT to which this ledger is linked.
	NftId string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	// Status of the ledger
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Next payment date
	NextPmtDate string `protobuf:"bytes,3,opt,name=next_pmt_date,json=nextPmtDate,proto3" json:"next_pmt_date,omitempty"`
	// Next payment amount
	NextPmtAmt string `protobuf:"bytes,4,opt,name=next_pmt_amt,json=nextPmtAmt,proto3" json:"next_pmt_amt,omitempty"`
	// Interest rate
	InterestRate string `protobuf:"bytes,5,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// Maturity date
	MaturityDate string `protobuf:"bytes,6,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
}

func (m *LedgerPlainText) Reset()         { *m = LedgerPlainText{} }
func (m *LedgerPlainText) String() string { return proto.CompactTextString(m) }
func (*LedgerPlainText) ProtoMessage()    {}
func (*LedgerPlainText) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d5ebc9f31c7f052, []int{0}
}
func (m *LedgerPlainText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerPlainText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerPlainText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerPlainText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerPlainText.Merge(m, src)
}
func (m *LedgerPlainText) XXX_Size() int {
	return m.Size()
}
func (m *LedgerPlainText) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerPlainText.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerPlainText proto.InternalMessageInfo

func (m *LedgerPlainText) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *LedgerPlainText) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LedgerPlainText) GetNextPmtDate() string {
	if m != nil {
		return m.NextPmtDate
	}
	return ""
}

func (m *LedgerPlainText) GetNextPmtAmt() string {
	if m != nil {
		return m.NextPmtAmt
	}
	return ""
}

func (m *LedgerPlainText) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

func (m *LedgerPlainText) GetMaturityDate() string {
	if m != nil {
		return m.MaturityDate
	}
	return ""
}

// LedgerEntry
type LedgerEntryPlainText struct {
	// Correlation ID for tracking ledger entries with external systems (max 50 characters)
	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Sequence number of the ledger entry (less than 100)
	// This field is used to maintain the correct order of entries when multiple entries
	// share the same effective date. Entries are sorted first by effective date, then by sequence.
	Sequence uint32 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The type of ledger entry specified by the LedgerClassEntryType.id
	Type *LedgerClassEntryType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Posted date
	PostedDate string `protobuf:"bytes,5,opt,name=posted_date,json=postedDate,proto3" json:"posted_date,omitempty"`
	// Effective date
	EffectiveDate string `protobuf:"bytes,6,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// The total amount of the ledger entry
	TotalAmt string `protobuf:"bytes,7,opt,name=total_amt,json=totalAmt,proto3" json:"total_amt,omitempty"`
	// The amounts applied to each bucket
	AppliedAmounts []*LedgerBucketAmountPlainText `protobuf:"bytes,8,rep,name=applied_amounts,json=appliedAmounts,proto3" json:"applied_amounts,omitempty"`
}

func (m *LedgerEntryPlainText) Reset()         { *m = LedgerEntryPlainText{} }
func (m *LedgerEntryPlainText) String() string { return proto.CompactTextString(m) }
func (*LedgerEntryPlainText) ProtoMessage()    {}
func (*LedgerEntryPlainText) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d5ebc9f31c7f052, []int{1}
}
func (m *LedgerEntryPlainText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerEntryPlainText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerEntryPlainText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerEntryPlainText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerEntryPlainText.Merge(m, src)
}
func (m *LedgerEntryPlainText) XXX_Size() int {
	return m.Size()
}
func (m *LedgerEntryPlainText) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerEntryPlainText.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerEntryPlainText proto.InternalMessageInfo

func (m *LedgerEntryPlainText) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *LedgerEntryPlainText) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *LedgerEntryPlainText) GetType() *LedgerClassEntryType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *LedgerEntryPlainText) GetPostedDate() string {
	if m != nil {
		return m.PostedDate
	}
	return ""
}

func (m *LedgerEntryPlainText) GetEffectiveDate() string {
	if m != nil {
		return m.EffectiveDate
	}
	return ""
}

func (m *LedgerEntryPlainText) GetTotalAmt() string {
	if m != nil {
		return m.TotalAmt
	}
	return ""
}

func (m *LedgerEntryPlainText) GetAppliedAmounts() []*LedgerBucketAmountPlainText {
	if m != nil {
		return m.AppliedAmounts
	}
	return nil
}

type LedgerBucketAmountPlainText struct {
	Bucket     *LedgerClassBucketType `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	AppliedAmt string                 `protobuf:"bytes,2,opt,name=applied_amt,json=appliedAmt,proto3" json:"applied_amt,omitempty"`
	BalanceAmt string                 `protobuf:"bytes,3,opt,name=balance_amt,json=balanceAmt,proto3" json:"balance_amt,omitempty"`
}

func (m *LedgerBucketAmountPlainText) Reset()         { *m = LedgerBucketAmountPlainText{} }
func (m *LedgerBucketAmountPlainText) String() string { return proto.CompactTextString(m) }
func (*LedgerBucketAmountPlainText) ProtoMessage()    {}
func (*LedgerBucketAmountPlainText) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d5ebc9f31c7f052, []int{2}
}
func (m *LedgerBucketAmountPlainText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerBucketAmountPlainText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerBucketAmountPlainText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerBucketAmountPlainText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerBucketAmountPlainText.Merge(m, src)
}
func (m *LedgerBucketAmountPlainText) XXX_Size() int {
	return m.Size()
}
func (m *LedgerBucketAmountPlainText) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerBucketAmountPlainText.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerBucketAmountPlainText proto.InternalMessageInfo

func (m *LedgerBucketAmountPlainText) GetBucket() *LedgerClassBucketType {
	if m != nil {
		return m.Bucket
	}
	return nil
}

func (m *LedgerBucketAmountPlainText) GetAppliedAmt() string {
	if m != nil {
		return m.AppliedAmt
	}
	return ""
}

func (m *LedgerBucketAmountPlainText) GetBalanceAmt() string {
	if m != nil {
		return m.BalanceAmt
	}
	return ""
}

type QueryLedgerEntryResponsePlainText struct {
	Entries []*LedgerEntryPlainText `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueryLedgerEntryResponsePlainText) Reset()         { *m = QueryLedgerEntryResponsePlainText{} }
func (m *QueryLedgerEntryResponsePlainText) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryResponsePlainText) ProtoMessage()    {}
func (*QueryLedgerEntryResponsePlainText) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d5ebc9f31c7f052, []int{3}
}
func (m *QueryLedgerEntryResponsePlainText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryResponsePlainText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryResponsePlainText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryResponsePlainText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryResponsePlainText.Merge(m, src)
}
func (m *QueryLedgerEntryResponsePlainText) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryResponsePlainText) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryResponsePlainText.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryResponsePlainText proto.InternalMessageInfo

func (m *QueryLedgerEntryResponsePlainText) GetEntries() []*LedgerEntryPlainText {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*LedgerPlainText)(nil), "provenance.ledger.v1.LedgerPlainText")
	proto.RegisterType((*LedgerEntryPlainText)(nil), "provenance.ledger.v1.LedgerEntryPlainText")
	proto.RegisterType((*LedgerBucketAmountPlainText)(nil), "provenance.ledger.v1.LedgerBucketAmountPlainText")
	proto.RegisterType((*QueryLedgerEntryResponsePlainText)(nil), "provenance.ledger.v1.QueryLedgerEntryResponsePlainText")
}

func init() {
	proto.RegisterFile("provenance/ledger/v1/ledger_query.proto", fileDescriptor_2d5ebc9f31c7f052)
}

var fileDescriptor_2d5ebc9f31c7f052 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0xfc, 0x04, 0xb8, 0xc1, 0x20, 0x59, 0x7c, 0x5f, 0x2d, 0x90, 0x5c, 0x08, 0x42, 0x45,
	0xfd, 0x71, 0x94, 0x74, 0x5f, 0x29, 0x40, 0x17, 0x48, 0x5d, 0xa4, 0x16, 0x2b, 0x36, 0xd6, 0xc4,
	0xbe, 0xa1, 0xa3, 0xda, 0x33, 0xc6, 0x73, 0x1d, 0x25, 0x6f, 0xd1, 0x87, 0xe8, 0xc3, 0x74, 0x99,
	0x65, 0xd5, 0x55, 0x95, 0xbc, 0x48, 0xe5, 0x19, 0x27, 0x4e, 0x25, 0x94, 0xee, 0x3c, 0x67, 0xce,
	0x3d, 0x73, 0xcf, 0xf1, 0xbd, 0xf0, 0x2a, 0xcb, 0xe5, 0x08, 0x05, 0x13, 0x11, 0xb6, 0x13, 0x8c,
	0x1f, 0x31, 0x6f, 0x8f, 0x3a, 0xd5, 0x57, 0xf8, 0x54, 0x60, 0x3e, 0xf1, 0xb3, 0x5c, 0x92, 0x74,
	0x8e, 0x6b, 0xa2, 0x6f, 0xae, 0xfd, 0x51, 0xe7, 0xe4, 0x7c, 0x4d, 0xb9, 0x29, 0x6c, 0x4d, 0x2d,
	0x38, 0xfa, 0xa4, 0x81, 0x7e, 0xc2, 0xb8, 0xb8, 0xc7, 0x31, 0x39, 0xff, 0x41, 0x43, 0x0c, 0x29,
	0xe4, 0xb1, 0x6b, 0x9d, 0x59, 0x57, 0xfb, 0xc1, 0x8e, 0x18, 0xd2, 0x5d, 0xec, 0xfc, 0x0f, 0x0d,
	0x45, 0x8c, 0x0a, 0xe5, 0x6e, 0x6a, 0xb8, 0x3a, 0x39, 0x2d, 0xb0, 0x05, 0x8e, 0x29, 0xcc, 0x52,
	0x0a, 0x63, 0x46, 0xe8, 0x6e, 0xe9, 0xeb, 0x66, 0x09, 0xf6, 0x53, 0xba, 0x65, 0x84, 0xce, 0x19,
	0x1c, 0x2c, 0x39, 0x2c, 0x25, 0x77, 0x5b, 0x53, 0xa0, 0xa2, 0xf4, 0x52, 0x72, 0x2e, 0xc0, 0xe6,
	0x82, 0x30, 0x47, 0x45, 0x61, 0x5e, 0xaa, 0xec, 0x68, 0xca, 0xc1, 0x02, 0x0c, 0x4a, 0x99, 0x0b,
	0xb0, 0x53, 0x46, 0x45, 0xce, 0x69, 0x62, 0x9e, 0x6a, 0x18, 0xd2, 0x02, 0x2c, 0xdf, 0x6a, 0xfd,
	0xda, 0x84, 0x63, 0x63, 0xe9, 0xa3, 0xa0, 0x7c, 0x52, 0xfb, 0xba, 0x84, 0xc3, 0x48, 0xe6, 0x39,
	0x26, 0x8c, 0xb8, 0x14, 0xb5, 0x3f, 0x7b, 0x05, 0xbd, 0x8b, 0x9d, 0x13, 0xd8, 0x53, 0xf8, 0x54,
	0xa0, 0x88, 0x50, 0x3b, 0xb5, 0x83, 0xe5, 0xd9, 0xf9, 0x00, 0xdb, 0x34, 0xc9, 0x8c, 0xc5, 0x66,
	0xf7, 0xb5, 0xff, 0x5c, 0xec, 0xbe, 0x79, 0xfc, 0x26, 0x61, 0x4a, 0xe9, 0x0e, 0xee, 0x27, 0x19,
	0x06, 0xba, 0xce, 0x79, 0x09, 0xcd, 0x4c, 0x2a, 0xc2, 0xd8, 0xb4, 0x6f, 0x3c, 0x82, 0x81, 0x74,
	0x50, 0x97, 0x70, 0x88, 0xc3, 0x21, 0x46, 0xc4, 0x47, 0xb8, 0x6a, 0xd1, 0x5e, 0xa2, 0x9a, 0x76,
	0x0a, 0xfb, 0x24, 0x89, 0x25, 0x3a, 0xcc, 0x5d, 0xcd, 0xd8, 0xd3, 0x40, 0x19, 0xe5, 0x03, 0x1c,
	0xb1, 0x2c, 0x4b, 0x38, 0xc6, 0x21, 0x4b, 0x65, 0x21, 0x48, 0xb9, 0x7b, 0x67, 0x5b, 0x57, 0xcd,
	0x6e, 0x67, 0x5d, 0xbf, 0xd7, 0x45, 0xf4, 0x15, 0xa9, 0xa7, 0x0b, 0x96, 0x99, 0x05, 0x87, 0x95,
	0x92, 0xc1, 0x55, 0xeb, 0xbb, 0x05, 0xa7, 0x6b, 0xf8, 0xce, 0x0d, 0x34, 0x06, 0xfa, 0x42, 0x67,
	0xdb, 0xec, 0xbe, 0xf9, 0x67, 0x44, 0x46, 0x47, 0x67, 0x54, 0x95, 0x96, 0x29, 0xd5, 0x06, 0xa8,
	0x1a, 0x37, 0x58, 0x76, 0xa2, 0x09, 0x03, 0x96, 0x94, 0x9a, 0x9a, 0x60, 0x06, 0x0e, 0x2a, 0xa8,
	0x97, 0x52, 0x8b, 0xc3, 0xf9, 0xe7, 0x72, 0x3d, 0x56, 0xe6, 0x20, 0x40, 0x95, 0x49, 0xa1, 0xb0,
	0xee, 0xf5, 0x16, 0x76, 0x51, 0x50, 0xce, 0x51, 0xb9, 0x96, 0xce, 0x67, 0xed, 0xff, 0xfc, 0x7b,
	0x98, 0x82, 0x45, 0xe9, 0x35, 0xfb, 0x31, 0xf3, 0xac, 0xe9, 0xcc, 0xb3, 0x7e, 0xcf, 0x3c, 0xeb,
	0xdb, 0xdc, 0xdb, 0x98, 0xce, 0xbd, 0x8d, 0x9f, 0x73, 0x6f, 0x03, 0x5e, 0x70, 0xf9, 0xac, 0x60,
	0xdf, 0x7a, 0x78, 0xfb, 0xc8, 0xe9, 0x4b, 0x31, 0xf0, 0x23, 0x99, 0xb6, 0x6b, 0xca, 0x3b, 0x2e,
	0x57, 0x4e, 0xed, 0x71, 0xb5, 0xaa, 0x83, 0x86, 0xde, 0xd5, 0xf7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0x5a, 0x23, 0xcf, 0x0f, 0x04, 0x00, 0x00,
}

func (m *LedgerPlainText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerPlainText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerPlainText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaturityDate) > 0 {
		i -= len(m.MaturityDate)
		copy(dAtA[i:], m.MaturityDate)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.MaturityDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NextPmtAmt) > 0 {
		i -= len(m.NextPmtAmt)
		copy(dAtA[i:], m.NextPmtAmt)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.NextPmtAmt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPmtDate) > 0 {
		i -= len(m.NextPmtDate)
		copy(dAtA[i:], m.NextPmtDate)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.NextPmtDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerEntryPlainText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerEntryPlainText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerEntryPlainText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppliedAmounts) > 0 {
		for iNdEx := len(m.AppliedAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppliedAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedgerQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.TotalAmt) > 0 {
		i -= len(m.TotalAmt)
		copy(dAtA[i:], m.TotalAmt)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.TotalAmt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EffectiveDate) > 0 {
		i -= len(m.EffectiveDate)
		copy(dAtA[i:], m.EffectiveDate)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.EffectiveDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PostedDate) > 0 {
		i -= len(m.PostedDate)
		copy(dAtA[i:], m.PostedDate)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.PostedDate)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedgerQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintLedgerQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerBucketAmountPlainText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerBucketAmountPlainText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerBucketAmountPlainText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceAmt) > 0 {
		i -= len(m.BalanceAmt)
		copy(dAtA[i:], m.BalanceAmt)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.BalanceAmt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AppliedAmt) > 0 {
		i -= len(m.AppliedAmt)
		copy(dAtA[i:], m.AppliedAmt)
		i = encodeVarintLedgerQuery(dAtA, i, uint64(len(m.AppliedAmt)))
		i--
		dAtA[i] = 0x12
	}
	if m.Bucket != nil {
		{
			size, err := m.Bucket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLedgerQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryResponsePlainText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryResponsePlainText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryResponsePlainText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedgerQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLedgerQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedgerQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LedgerPlainText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.NextPmtDate)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.NextPmtAmt)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.MaturityDate)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	return n
}

func (m *LedgerEntryPlainText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovLedgerQuery(uint64(m.Sequence))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.PostedDate)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.EffectiveDate)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.TotalAmt)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	if len(m.AppliedAmounts) > 0 {
		for _, e := range m.AppliedAmounts {
			l = e.Size()
			n += 1 + l + sovLedgerQuery(uint64(l))
		}
	}
	return n
}

func (m *LedgerBucketAmountPlainText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bucket != nil {
		l = m.Bucket.Size()
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.AppliedAmt)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	l = len(m.BalanceAmt)
	if l > 0 {
		n += 1 + l + sovLedgerQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntryResponsePlainText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovLedgerQuery(uint64(l))
		}
	}
	return n
}

func sovLedgerQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedgerQuery(x uint64) (n int) {
	return sovLedgerQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LedgerPlainText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerPlainText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerPlainText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPmtDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPmtAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerEntryPlainText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerEntryPlainText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerEntryPlainText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &LedgerClassEntryType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedAmounts = append(m.AppliedAmounts, &LedgerBucketAmountPlainText{})
			if err := m.AppliedAmounts[len(m.AppliedAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerBucketAmountPlainText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerBucketAmountPlainText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerBucketAmountPlainText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bucket == nil {
				m.Bucket = &LedgerClassBucketType{}
			}
			if err := m.Bucket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryResponsePlainText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryResponsePlainText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryResponsePlainText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LedgerEntryPlainText{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedgerQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedgerQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedgerQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedgerQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedgerQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedgerQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedgerQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedgerQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedgerQuery = fmt.Errorf("proto: unexpected end of group")
)
