// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/ledger_settlement.proto

package ledger

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FlowStatus represents the current status of a flow
type FundingTransferStatus int32

const (
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_UNSPECIFIED FundingTransferStatus = 0
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_PENDING     FundingTransferStatus = 1
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_PROCESSING  FundingTransferStatus = 2
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_COMPLETED   FundingTransferStatus = 3
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_FAILED      FundingTransferStatus = 4
)

var FundingTransferStatus_name = map[int32]string{
	0: "FUNDING_TRANSFER_STATUS_UNSPECIFIED",
	1: "FUNDING_TRANSFER_STATUS_PENDING",
	2: "FUNDING_TRANSFER_STATUS_PROCESSING",
	3: "FUNDING_TRANSFER_STATUS_COMPLETED",
	4: "FUNDING_TRANSFER_STATUS_FAILED",
}

var FundingTransferStatus_value = map[string]int32{
	"FUNDING_TRANSFER_STATUS_UNSPECIFIED": 0,
	"FUNDING_TRANSFER_STATUS_PENDING":     1,
	"FUNDING_TRANSFER_STATUS_PROCESSING":  2,
	"FUNDING_TRANSFER_STATUS_COMPLETED":   3,
	"FUNDING_TRANSFER_STATUS_FAILED":      4,
}

func (x FundingTransferStatus) String() string {
	return proto.EnumName(FundingTransferStatus_name, int32(x))
}

func (FundingTransferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0caa3a369f9ea91c, []int{0}
}

// FundTransfer represents a single fund transfer to process
type FundTransfer struct {
	NftId                    string                `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	LedgerEntryCorrelationId string                `protobuf:"bytes,2,opt,name=ledger_entry_correlation_id,json=ledgerEntryCorrelationId,proto3" json:"ledger_entry_correlation_id,omitempty"`
	Amount                   string                `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status                   FundingTransferStatus `protobuf:"varint,4,opt,name=status,proto3,enum=provenance.ledger.v1.FundingTransferStatus" json:"status,omitempty"`
	Memo                     string                `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	// The minimum block height or timestamp for settlement
	SettlementBlock int64 `protobuf:"varint,6,opt,name=settlement_block,json=settlementBlock,proto3" json:"settlement_block,omitempty"`
}

func (m *FundTransfer) Reset()         { *m = FundTransfer{} }
func (m *FundTransfer) String() string { return proto.CompactTextString(m) }
func (*FundTransfer) ProtoMessage()    {}
func (*FundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0caa3a369f9ea91c, []int{0}
}
func (m *FundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTransfer.Merge(m, src)
}
func (m *FundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *FundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_FundTransfer proto.InternalMessageInfo

func (m *FundTransfer) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *FundTransfer) GetLedgerEntryCorrelationId() string {
	if m != nil {
		return m.LedgerEntryCorrelationId
	}
	return ""
}

func (m *FundTransfer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *FundTransfer) GetStatus() FundingTransferStatus {
	if m != nil {
		return m.Status
	}
	return FundingTransferStatus_FUNDING_TRANSFER_STATUS_UNSPECIFIED
}

func (m *FundTransfer) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *FundTransfer) GetSettlementBlock() int64 {
	if m != nil {
		return m.SettlementBlock
	}
	return 0
}

// SettlementInstruction represents blockchain-specific settlement instructions
type SettlementInstruction struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The recipient's blockchain address
	RecipientAddress string `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	// Optional memo or note for the transaction
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// The minimum block height or timestamp for settlement
	SettlementBlock int64 `protobuf:"varint,4,opt,name=settlement_block,json=settlementBlock,proto3" json:"settlement_block,omitempty"`
}

func (m *SettlementInstruction) Reset()         { *m = SettlementInstruction{} }
func (m *SettlementInstruction) String() string { return proto.CompactTextString(m) }
func (*SettlementInstruction) ProtoMessage()    {}
func (*SettlementInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0caa3a369f9ea91c, []int{1}
}
func (m *SettlementInstruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettlementInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettlementInstruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettlementInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementInstruction.Merge(m, src)
}
func (m *SettlementInstruction) XXX_Size() int {
	return m.Size()
}
func (m *SettlementInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementInstruction proto.InternalMessageInfo

func (m *SettlementInstruction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SettlementInstruction) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *SettlementInstruction) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *SettlementInstruction) GetSettlementBlock() int64 {
	if m != nil {
		return m.SettlementBlock
	}
	return 0
}

// FundTransferEntryWithSettlement represents a fund transfer with settlement instructions
type FundTransferWithSettlement struct {
	NftId                    string                   `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	LedgerEntryCorrelationId string                   `protobuf:"bytes,2,opt,name=ledger_entry_correlation_id,json=ledgerEntryCorrelationId,proto3" json:"ledger_entry_correlation_id,omitempty"`
	SettlementInstructions   []*SettlementInstruction `protobuf:"bytes,3,rep,name=settlementInstructions,proto3" json:"settlementInstructions,omitempty"`
}

func (m *FundTransferWithSettlement) Reset()         { *m = FundTransferWithSettlement{} }
func (m *FundTransferWithSettlement) String() string { return proto.CompactTextString(m) }
func (*FundTransferWithSettlement) ProtoMessage()    {}
func (*FundTransferWithSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_0caa3a369f9ea91c, []int{2}
}
func (m *FundTransferWithSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundTransferWithSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTransferWithSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundTransferWithSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTransferWithSettlement.Merge(m, src)
}
func (m *FundTransferWithSettlement) XXX_Size() int {
	return m.Size()
}
func (m *FundTransferWithSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTransferWithSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_FundTransferWithSettlement proto.InternalMessageInfo

func (m *FundTransferWithSettlement) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *FundTransferWithSettlement) GetLedgerEntryCorrelationId() string {
	if m != nil {
		return m.LedgerEntryCorrelationId
	}
	return ""
}

func (m *FundTransferWithSettlement) GetSettlementInstructions() []*SettlementInstruction {
	if m != nil {
		return m.SettlementInstructions
	}
	return nil
}

func init() {
	proto.RegisterEnum("provenance.ledger.v1.FundingTransferStatus", FundingTransferStatus_name, FundingTransferStatus_value)
	proto.RegisterType((*FundTransfer)(nil), "provenance.ledger.v1.FundTransfer")
	proto.RegisterType((*SettlementInstruction)(nil), "provenance.ledger.v1.SettlementInstruction")
	proto.RegisterType((*FundTransferWithSettlement)(nil), "provenance.ledger.v1.FundTransferWithSettlement")
}

func init() {
	proto.RegisterFile("provenance/ledger/v1/ledger_settlement.proto", fileDescriptor_0caa3a369f9ea91c)
}

var fileDescriptor_0caa3a369f9ea91c = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x75, 0x1a, 0x89, 0x01, 0x81, 0x19, 0x35, 0xc5, 0x14, 0xc9, 0x84, 0x54, 0x40,
	0x80, 0xd6, 0x51, 0x61, 0xcd, 0x22, 0x3f, 0x0e, 0xb2, 0x54, 0xd2, 0xc8, 0x4e, 0x84, 0xc4, 0xc6,
	0x72, 0xec, 0x49, 0x3a, 0x22, 0x9e, 0x89, 0x66, 0xc6, 0x11, 0xec, 0x78, 0x04, 0x1e, 0x06, 0xde,
	0x81, 0x65, 0xc5, 0x86, 0x2e, 0x51, 0xf2, 0x22, 0xc8, 0x3f, 0xc4, 0x41, 0xb2, 0xc5, 0x8a, 0xdd,
	0xdc, 0xe3, 0xef, 0x5e, 0x9f, 0x39, 0x57, 0x36, 0x3c, 0x59, 0x72, 0xb6, 0xc2, 0xd4, 0xa3, 0x3e,
	0x6e, 0x2f, 0x70, 0x30, 0xc7, 0xbc, 0xbd, 0x3a, 0xcb, 0x4e, 0xae, 0xc0, 0x52, 0x2e, 0x70, 0x88,
	0xa9, 0x34, 0x96, 0x9c, 0x49, 0x86, 0x0e, 0x72, 0xda, 0x48, 0x19, 0x63, 0x75, 0x76, 0x74, 0xdf,
	0x67, 0x22, 0x64, 0xc2, 0x4d, 0x98, 0x76, 0x5a, 0xa4, 0x0d, 0xcd, 0xcf, 0x7b, 0xf0, 0xd6, 0x20,
	0xa2, 0xc1, 0x98, 0x7b, 0x54, 0xcc, 0x30, 0x47, 0x75, 0x58, 0xa3, 0x33, 0xe9, 0x92, 0x40, 0x03,
	0x0d, 0xd0, 0xba, 0x61, 0xef, 0xd3, 0x99, 0xb4, 0x02, 0xf4, 0x1a, 0x3e, 0xc8, 0xde, 0x89, 0xa9,
	0xe4, 0x9f, 0x5c, 0x9f, 0x71, 0x8e, 0x17, 0x9e, 0x24, 0x8c, 0xc6, 0xec, 0x5e, 0xc2, 0x6a, 0x29,
	0x62, 0xc6, 0x44, 0x2f, 0x07, 0xac, 0x00, 0x1d, 0xc2, 0x9a, 0x17, 0xb2, 0x88, 0x4a, 0x4d, 0x49,
	0xc8, 0xac, 0x42, 0x3d, 0x58, 0x13, 0xd2, 0x93, 0x91, 0xd0, 0xaa, 0x0d, 0xd0, 0xba, 0xfd, 0xf2,
	0x85, 0x51, 0x74, 0x01, 0x23, 0x76, 0x48, 0xe8, 0xfc, 0x8f, 0x49, 0x27, 0x69, 0xb1, 0xb3, 0x56,
	0x84, 0x60, 0x35, 0xc4, 0x21, 0xd3, 0xf6, 0x93, 0xd1, 0xc9, 0x19, 0x3d, 0x83, 0x6a, 0x1e, 0x8e,
	0x3b, 0x5d, 0x30, 0xff, 0x83, 0x56, 0x6b, 0x80, 0x96, 0x62, 0xdf, 0xc9, 0xf5, 0x6e, 0x2c, 0x37,
	0xbf, 0x01, 0x58, 0x77, 0xb6, 0x9a, 0x45, 0x85, 0xe4, 0x91, 0x1f, 0xfb, 0xde, 0x71, 0x0d, 0xfe,
	0x72, 0x6d, 0xc2, 0xbb, 0x1c, 0xfb, 0x64, 0x49, 0xe2, 0xd9, 0x5e, 0x10, 0x70, 0x2c, 0x44, 0x1a,
	0x41, 0x57, 0xfb, 0xf1, 0xf5, 0xf4, 0x20, 0x4b, 0xb8, 0x93, 0x3e, 0x71, 0x24, 0x27, 0x74, 0x6e,
	0xab, 0xdb, 0x96, 0x4c, 0xdf, 0xfa, 0x56, 0xfe, 0xe1, 0xbb, 0x5a, 0xec, 0xfb, 0x27, 0x80, 0x47,
	0xbb, 0xab, 0x7b, 0x47, 0xe4, 0x65, 0x7e, 0x8f, 0xff, 0xb4, 0x48, 0x1f, 0x1e, 0x8a, 0xa2, 0xac,
	0x84, 0xa6, 0x34, 0x94, 0xd6, 0xcd, 0xb2, 0x05, 0x16, 0xe6, 0x6b, 0x97, 0x8c, 0x7a, 0x7e, 0x0d,
	0x60, 0xbd, 0x70, 0xe5, 0xe8, 0x29, 0x3c, 0x1e, 0x4c, 0x86, 0x7d, 0x6b, 0xf8, 0xc6, 0x1d, 0xdb,
	0x9d, 0xa1, 0x33, 0x30, 0x6d, 0xd7, 0x19, 0x77, 0xc6, 0x13, 0xc7, 0x9d, 0x0c, 0x9d, 0x91, 0xd9,
	0xb3, 0x06, 0x96, 0xd9, 0x57, 0x2b, 0xe8, 0x18, 0x3e, 0x2c, 0x03, 0x47, 0x66, 0xa2, 0xab, 0x00,
	0x3d, 0x81, 0xcd, 0x52, 0xc8, 0xbe, 0xe8, 0x99, 0x8e, 0x13, 0x73, 0x7b, 0xe8, 0x31, 0x7c, 0x54,
	0xc6, 0xf5, 0x2e, 0xde, 0x8e, 0xce, 0xcd, 0xb1, 0xd9, 0x57, 0x15, 0xd4, 0x84, 0x7a, 0x19, 0x36,
	0xe8, 0x58, 0xe7, 0x66, 0x5f, 0xad, 0x76, 0xbd, 0xef, 0x6b, 0x1d, 0x5c, 0xad, 0x75, 0xf0, 0x6b,
	0xad, 0x83, 0x2f, 0x1b, 0xbd, 0x72, 0xb5, 0xd1, 0x2b, 0xd7, 0x1b, 0xbd, 0x02, 0xef, 0x11, 0x56,
	0x98, 0xdd, 0x08, 0xbc, 0x3f, 0x99, 0x13, 0x79, 0x19, 0x4d, 0x0d, 0x9f, 0x85, 0xed, 0x1c, 0x39,
	0x25, 0x6c, 0xa7, 0x6a, 0x7f, 0xcc, 0x7e, 0x0a, 0xd3, 0x5a, 0xf2, 0x65, 0xbf, 0xfa, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x28, 0xd4, 0x71, 0x3a, 0x04, 0x00, 0x00,
}

func (m *FundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementBlock != 0 {
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(m.SettlementBlock))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LedgerEntryCorrelationId) > 0 {
		i -= len(m.LedgerEntryCorrelationId)
		copy(dAtA[i:], m.LedgerEntryCorrelationId)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.LedgerEntryCorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettlementInstruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlementInstruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettlementInstruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementBlock != 0 {
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(m.SettlementBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundTransferWithSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTransferWithSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTransferWithSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettlementInstructions) > 0 {
		for iNdEx := len(m.SettlementInstructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementInstructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedgerSettlement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LedgerEntryCorrelationId) > 0 {
		i -= len(m.LedgerEntryCorrelationId)
		copy(dAtA[i:], m.LedgerEntryCorrelationId)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.LedgerEntryCorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintLedgerSettlement(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLedgerSettlement(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedgerSettlement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	l = len(m.LedgerEntryCorrelationId)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovLedgerSettlement(uint64(m.Status))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	if m.SettlementBlock != 0 {
		n += 1 + sovLedgerSettlement(uint64(m.SettlementBlock))
	}
	return n
}

func (m *SettlementInstruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	if m.SettlementBlock != 0 {
		n += 1 + sovLedgerSettlement(uint64(m.SettlementBlock))
	}
	return n
}

func (m *FundTransferWithSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	l = len(m.LedgerEntryCorrelationId)
	if l > 0 {
		n += 1 + l + sovLedgerSettlement(uint64(l))
	}
	if len(m.SettlementInstructions) > 0 {
		for _, e := range m.SettlementInstructions {
			l = e.Size()
			n += 1 + l + sovLedgerSettlement(uint64(l))
		}
	}
	return n
}

func sovLedgerSettlement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedgerSettlement(x uint64) (n int) {
	return sovLedgerSettlement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerSettlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryCorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryCorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FundingTransferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementBlock", wireType)
			}
			m.SettlementBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerSettlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlementInstruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerSettlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlementInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlementInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementBlock", wireType)
			}
			m.SettlementBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerSettlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundTransferWithSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedgerSettlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTransferWithSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTransferWithSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryCorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryCorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementInstructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementInstructions = append(m.SettlementInstructions, &SettlementInstruction{})
			if err := m.SettlementInstructions[len(m.SettlementInstructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedgerSettlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedgerSettlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedgerSettlement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedgerSettlement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedgerSettlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedgerSettlement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedgerSettlement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedgerSettlement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedgerSettlement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedgerSettlement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedgerSettlement = fmt.Errorf("proto: unexpected end of group")
)
