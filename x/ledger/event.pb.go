// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/event.proto

package ledger

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventLedgerCreated is emitted when a new ledger is created for an NFT.
type EventLedgerCreated struct {
	// The address of the NFT
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	// The denomination used for the ledger
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EventLedgerCreated) Reset()         { *m = EventLedgerCreated{} }
func (m *EventLedgerCreated) String() string { return proto.CompactTextString(m) }
func (*EventLedgerCreated) ProtoMessage()    {}
func (*EventLedgerCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{0}
}
func (m *EventLedgerCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLedgerCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLedgerCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLedgerCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLedgerCreated.Merge(m, src)
}
func (m *EventLedgerCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventLedgerCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLedgerCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventLedgerCreated proto.InternalMessageInfo

func (m *EventLedgerCreated) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *EventLedgerCreated) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// EventLedgerEntryAdded is emitted when a new entry is added to a ledger.
type EventLedgerEntryAdded struct {
	// The address of the NFT
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	// The correlation ID of the entry (max 50 characters)
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// The type of the entry
	EntryType LedgerEntryType `protobuf:"varint,3,opt,name=entry_type,json=entryType,proto3,enum=provenance.ledger.v1.LedgerEntryType" json:"entry_type,omitempty"`
	// The date the entry was posted
	PostedDate *time.Time `protobuf:"bytes,4,opt,name=posted_date,json=postedDate,proto3,stdtime" json:"posted_date,omitempty"`
	// The date the entry takes effect
	EffectiveDate *time.Time `protobuf:"bytes,5,opt,name=effective_date,json=effectiveDate,proto3,stdtime" json:"effective_date,omitempty"`
	// The total amount of the entry
	Amount string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *EventLedgerEntryAdded) Reset()         { *m = EventLedgerEntryAdded{} }
func (m *EventLedgerEntryAdded) String() string { return proto.CompactTextString(m) }
func (*EventLedgerEntryAdded) ProtoMessage()    {}
func (*EventLedgerEntryAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{1}
}
func (m *EventLedgerEntryAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLedgerEntryAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLedgerEntryAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLedgerEntryAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLedgerEntryAdded.Merge(m, src)
}
func (m *EventLedgerEntryAdded) XXX_Size() int {
	return m.Size()
}
func (m *EventLedgerEntryAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLedgerEntryAdded.DiscardUnknown(m)
}

var xxx_messageInfo_EventLedgerEntryAdded proto.InternalMessageInfo

func (m *EventLedgerEntryAdded) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *EventLedgerEntryAdded) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *EventLedgerEntryAdded) GetEntryType() LedgerEntryType {
	if m != nil {
		return m.EntryType
	}
	return LedgerEntryType_Unspecified
}

func (m *EventLedgerEntryAdded) GetPostedDate() *time.Time {
	if m != nil {
		return m.PostedDate
	}
	return nil
}

func (m *EventLedgerEntryAdded) GetEffectiveDate() *time.Time {
	if m != nil {
		return m.EffectiveDate
	}
	return nil
}

func (m *EventLedgerEntryAdded) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// EventBalanceUpdated is emitted when balances are updated due to a ledger entry.
type EventBalanceUpdated struct {
	// The address of the NFT
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	// The new principal balance
	PrincipalBalance string `protobuf:"bytes,2,opt,name=principal_balance,json=principalBalance,proto3" json:"principal_balance,omitempty"`
	// The new interest balance
	InterestBalance string `protobuf:"bytes,3,opt,name=interest_balance,json=interestBalance,proto3" json:"interest_balance,omitempty"`
	// The new other balance
	OtherBalance string `protobuf:"bytes,4,opt,name=other_balance,json=otherBalance,proto3" json:"other_balance,omitempty"`
}

func (m *EventBalanceUpdated) Reset()         { *m = EventBalanceUpdated{} }
func (m *EventBalanceUpdated) String() string { return proto.CompactTextString(m) }
func (*EventBalanceUpdated) ProtoMessage()    {}
func (*EventBalanceUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{2}
}
func (m *EventBalanceUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBalanceUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBalanceUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBalanceUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBalanceUpdated.Merge(m, src)
}
func (m *EventBalanceUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventBalanceUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBalanceUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBalanceUpdated proto.InternalMessageInfo

func (m *EventBalanceUpdated) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *EventBalanceUpdated) GetPrincipalBalance() string {
	if m != nil {
		return m.PrincipalBalance
	}
	return ""
}

func (m *EventBalanceUpdated) GetInterestBalance() string {
	if m != nil {
		return m.InterestBalance
	}
	return ""
}

func (m *EventBalanceUpdated) GetOtherBalance() string {
	if m != nil {
		return m.OtherBalance
	}
	return ""
}

// EventLedgerConfigUpdated is emitted when ledger configuration is modified.
type EventLedgerConfigUpdated struct {
	// The address of the NFT
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	// The new denomination
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// The previous denomination (if changed)
	PreviousDenom string `protobuf:"bytes,3,opt,name=previous_denom,json=previousDenom,proto3" json:"previous_denom,omitempty"`
}

func (m *EventLedgerConfigUpdated) Reset()         { *m = EventLedgerConfigUpdated{} }
func (m *EventLedgerConfigUpdated) String() string { return proto.CompactTextString(m) }
func (*EventLedgerConfigUpdated) ProtoMessage()    {}
func (*EventLedgerConfigUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{3}
}
func (m *EventLedgerConfigUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLedgerConfigUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLedgerConfigUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLedgerConfigUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLedgerConfigUpdated.Merge(m, src)
}
func (m *EventLedgerConfigUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventLedgerConfigUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLedgerConfigUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventLedgerConfigUpdated proto.InternalMessageInfo

func (m *EventLedgerConfigUpdated) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *EventLedgerConfigUpdated) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EventLedgerConfigUpdated) GetPreviousDenom() string {
	if m != nil {
		return m.PreviousDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*EventLedgerCreated)(nil), "provenance.ledger.v1.EventLedgerCreated")
	proto.RegisterType((*EventLedgerEntryAdded)(nil), "provenance.ledger.v1.EventLedgerEntryAdded")
	proto.RegisterType((*EventBalanceUpdated)(nil), "provenance.ledger.v1.EventBalanceUpdated")
	proto.RegisterType((*EventLedgerConfigUpdated)(nil), "provenance.ledger.v1.EventLedgerConfigUpdated")
}

func init() { proto.RegisterFile("provenance/ledger/v1/event.proto", fileDescriptor_a60494a0b0d3ba7b) }

var fileDescriptor_a60494a0b0d3ba7b = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x97, 0xad, 0xab, 0x34, 0x97, 0x96, 0x11, 0x0a, 0x8a, 0x7a, 0x48, 0x4b, 0xd1, 0xa4,
	0x22, 0x20, 0xd1, 0xc6, 0x13, 0xb4, 0x74, 0x20, 0x04, 0xa7, 0x6a, 0x5c, 0xb8, 0x44, 0x6e, 0xfd,
	0x25, 0xb3, 0xd4, 0xd8, 0x96, 0xf3, 0x35, 0x5a, 0xdf, 0x62, 0xef, 0xc2, 0x4b, 0xc0, 0x6d, 0x47,
	0x6e, 0xa0, 0xf6, 0x45, 0x50, 0xec, 0xa4, 0xcb, 0xa1, 0x87, 0xde, 0xf2, 0xfd, 0xfd, 0xf3, 0xdf,
	0x9f, 0xff, 0xfe, 0x42, 0x06, 0x4a, 0xcb, 0x1c, 0x04, 0x15, 0x0b, 0x08, 0x97, 0xc0, 0x12, 0xd0,
	0x61, 0x7e, 0x19, 0x42, 0x0e, 0x02, 0x03, 0xa5, 0x25, 0x4a, 0xb7, 0xfb, 0x48, 0x04, 0x96, 0x08,
	0xf2, 0xcb, 0x5e, 0x37, 0x91, 0x89, 0x34, 0x40, 0x58, 0x7c, 0x59, 0xb6, 0xd7, 0x4f, 0xa4, 0x4c,
	0x96, 0x10, 0x9a, 0x6a, 0xbe, 0x8a, 0x43, 0xe4, 0x29, 0x64, 0x48, 0x53, 0x55, 0x02, 0xaf, 0xf6,
	0x1e, 0x57, 0xda, 0x1a, 0x64, 0xf8, 0x95, 0xb8, 0xd7, 0xc5, 0xf1, 0xdf, 0x8c, 0xf8, 0x51, 0x03,
	0x45, 0x60, 0x6e, 0x9f, 0xb4, 0x44, 0x8c, 0x11, 0x65, 0x4c, 0x43, 0x96, 0x79, 0xce, 0xc0, 0x19,
	0x9d, 0xcd, 0x88, 0x88, 0x71, 0x6c, 0x15, 0xb7, 0x4b, 0x4e, 0x19, 0x08, 0x99, 0x7a, 0xc7, 0x66,
	0xc9, 0x16, 0xc3, 0xdf, 0xc7, 0xe4, 0x45, 0xcd, 0xed, 0x5a, 0xa0, 0x5e, 0x8f, 0x19, 0x3b, 0xc4,
	0xf0, 0x82, 0x74, 0x16, 0x52, 0x6b, 0x58, 0x52, 0xe4, 0x52, 0x44, 0x9c, 0x95, 0xce, 0xed, 0x9a,
	0xfa, 0x85, 0xb9, 0x53, 0x42, 0xa0, 0x70, 0x8d, 0x70, 0xad, 0xc0, 0x3b, 0x19, 0x38, 0xa3, 0xce,
	0xd5, 0x45, 0xb0, 0x2f, 0xb3, 0xa0, 0xd6, 0xc3, 0xcd, 0x5a, 0xc1, 0xec, 0x0c, 0xaa, 0x4f, 0x77,
	0x4c, 0x5a, 0x4a, 0x66, 0x08, 0x2c, 0x62, 0x14, 0xc1, 0x6b, 0x0c, 0x9c, 0x51, 0xeb, 0xaa, 0x17,
	0xd8, 0x38, 0x83, 0x2a, 0xce, 0xe0, 0xa6, 0x8a, 0x73, 0xd2, 0xb8, 0xff, 0xdb, 0x77, 0x66, 0xc4,
	0x6e, 0x9a, 0x52, 0x04, 0xf7, 0x33, 0xe9, 0x40, 0x1c, 0xc3, 0x02, 0x79, 0x0e, 0xd6, 0xe5, 0xf4,
	0x40, 0x97, 0xf6, 0x6e, 0x9f, 0x31, 0x7a, 0x49, 0x9a, 0x34, 0x95, 0x2b, 0x81, 0x5e, 0xd3, 0x5c,
	0xb8, 0xac, 0x86, 0x3f, 0x1d, 0xf2, 0xdc, 0x64, 0x39, 0xa1, 0xcb, 0xe2, 0x66, 0xdf, 0x15, 0x3b,
	0xec, 0x69, 0xde, 0x92, 0x67, 0x4a, 0x73, 0xb1, 0xe0, 0x8a, 0x2e, 0xa3, 0xb9, 0xdd, 0x5c, 0x86,
	0x79, 0xbe, 0x5b, 0x28, 0x4d, 0xdd, 0x37, 0xe4, 0x9c, 0x0b, 0x04, 0x0d, 0x19, 0xee, 0xd8, 0x13,
	0xc3, 0x3e, 0xad, 0xf4, 0x0a, 0x7d, 0x4d, 0xda, 0x12, 0x6f, 0x41, 0xef, 0xb8, 0x86, 0xe1, 0x9e,
	0x18, 0xb1, 0x84, 0x86, 0x77, 0xc4, 0xab, 0x8f, 0x93, 0x14, 0x31, 0x4f, 0x0e, 0xee, 0x7c, 0xef,
	0x50, 0x15, 0x93, 0xa1, 0x34, 0xe4, 0x5c, 0xae, 0xb2, 0xc8, 0x2e, 0xdb, 0x06, 0xdb, 0x95, 0x3a,
	0x2d, 0xc4, 0xc9, 0xa7, 0x5f, 0x1b, 0xdf, 0x79, 0xd8, 0xf8, 0xce, 0xbf, 0x8d, 0xef, 0xdc, 0x6f,
	0xfd, 0xa3, 0x87, 0xad, 0x7f, 0xf4, 0x67, 0xeb, 0x1f, 0xfd, 0x78, 0x97, 0x70, 0xbc, 0x5d, 0xcd,
	0x83, 0x85, 0x4c, 0xc3, 0xc7, 0x49, 0x79, 0xcf, 0x65, 0xad, 0x0a, 0xef, 0xca, 0xdf, 0x62, 0xde,
	0x34, 0x0f, 0xf7, 0xe1, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x02, 0x9c, 0x4f, 0xab, 0x03,
	0x00, 0x00,
}

func (m *EventLedgerCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLedgerCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLedgerCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLedgerEntryAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLedgerEntryAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLedgerEntryAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x32
	}
	if m.EffectiveDate != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.EffectiveDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveDate):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvent(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.PostedDate != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.PostedDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PostedDate):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintEvent(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if m.EntryType != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.EntryType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBalanceUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBalanceUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBalanceUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherBalance) > 0 {
		i -= len(m.OtherBalance)
		copy(dAtA[i:], m.OtherBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.OtherBalance)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InterestBalance) > 0 {
		i -= len(m.InterestBalance)
		copy(dAtA[i:], m.InterestBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.InterestBalance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrincipalBalance) > 0 {
		i -= len(m.PrincipalBalance)
		copy(dAtA[i:], m.PrincipalBalance)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PrincipalBalance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventLedgerConfigUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLedgerConfigUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLedgerConfigUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreviousDenom) > 0 {
		i -= len(m.PreviousDenom)
		copy(dAtA[i:], m.PreviousDenom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.PreviousDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventLedgerCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventLedgerEntryAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.EntryType != 0 {
		n += 1 + sovEvent(uint64(m.EntryType))
	}
	if m.PostedDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.PostedDate)
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.EffectiveDate != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.EffectiveDate)
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventBalanceUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PrincipalBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.InterestBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.OtherBalance)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *EventLedgerConfigUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.PreviousDenom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventLedgerCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLedgerCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLedgerCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLedgerEntryAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLedgerEntryAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLedgerEntryAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			m.EntryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryType |= LedgerEntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostedDate == nil {
				m.PostedDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.PostedDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveDate == nil {
				m.EffectiveDate = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.EffectiveDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBalanceUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBalanceUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBalanceUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrincipalBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherBalance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventLedgerConfigUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLedgerConfigUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLedgerConfigUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
