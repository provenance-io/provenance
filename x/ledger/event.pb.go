// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/event.proto

package ledger

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LedgerCreatedEvent represents an event emitted when a new ledger is created
type LedgerCreatedEvent struct {
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *LedgerCreatedEvent) Reset()         { *m = LedgerCreatedEvent{} }
func (m *LedgerCreatedEvent) String() string { return proto.CompactTextString(m) }
func (*LedgerCreatedEvent) ProtoMessage()    {}
func (*LedgerCreatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{0}
}
func (m *LedgerCreatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerCreatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerCreatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerCreatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerCreatedEvent.Merge(m, src)
}
func (m *LedgerCreatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LedgerCreatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerCreatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerCreatedEvent proto.InternalMessageInfo

func (m *LedgerCreatedEvent) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *LedgerCreatedEvent) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// LedgerEntryAddedEvent represents an event emitted when a new entry is added to a ledger
type LedgerEntryAddedEvent struct {
	NftAddress string       `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Entry      *LedgerEntry `protobuf:"bytes,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *LedgerEntryAddedEvent) Reset()         { *m = LedgerEntryAddedEvent{} }
func (m *LedgerEntryAddedEvent) String() string { return proto.CompactTextString(m) }
func (*LedgerEntryAddedEvent) ProtoMessage()    {}
func (*LedgerEntryAddedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{1}
}
func (m *LedgerEntryAddedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerEntryAddedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerEntryAddedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerEntryAddedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerEntryAddedEvent.Merge(m, src)
}
func (m *LedgerEntryAddedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LedgerEntryAddedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerEntryAddedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerEntryAddedEvent proto.InternalMessageInfo

func (m *LedgerEntryAddedEvent) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *LedgerEntryAddedEvent) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// LedgerPaymentEvent represents an event emitted when a payment is made on a ledger
type LedgerPaymentEvent struct {
	NftAddress string       `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Payment    *LedgerEntry `protobuf:"bytes,2,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (m *LedgerPaymentEvent) Reset()         { *m = LedgerPaymentEvent{} }
func (m *LedgerPaymentEvent) String() string { return proto.CompactTextString(m) }
func (*LedgerPaymentEvent) ProtoMessage()    {}
func (*LedgerPaymentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{2}
}
func (m *LedgerPaymentEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerPaymentEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerPaymentEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerPaymentEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerPaymentEvent.Merge(m, src)
}
func (m *LedgerPaymentEvent) XXX_Size() int {
	return m.Size()
}
func (m *LedgerPaymentEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerPaymentEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerPaymentEvent proto.InternalMessageInfo

func (m *LedgerPaymentEvent) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *LedgerPaymentEvent) GetPayment() *LedgerEntry {
	if m != nil {
		return m.Payment
	}
	return nil
}

// LedgerDisbursementEvent represents an event emitted when a disbursement is made from a ledger
type LedgerDisbursementEvent struct {
	NftAddress   string       `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	Disbursement *LedgerEntry `protobuf:"bytes,2,opt,name=disbursement,proto3" json:"disbursement,omitempty"`
}

func (m *LedgerDisbursementEvent) Reset()         { *m = LedgerDisbursementEvent{} }
func (m *LedgerDisbursementEvent) String() string { return proto.CompactTextString(m) }
func (*LedgerDisbursementEvent) ProtoMessage()    {}
func (*LedgerDisbursementEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{3}
}
func (m *LedgerDisbursementEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerDisbursementEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerDisbursementEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerDisbursementEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerDisbursementEvent.Merge(m, src)
}
func (m *LedgerDisbursementEvent) XXX_Size() int {
	return m.Size()
}
func (m *LedgerDisbursementEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerDisbursementEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerDisbursementEvent proto.InternalMessageInfo

func (m *LedgerDisbursementEvent) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *LedgerDisbursementEvent) GetDisbursement() *LedgerEntry {
	if m != nil {
		return m.Disbursement
	}
	return nil
}

// LedgerNavUpdatedEvent represents an event emitted when the NAV (Net Asset Value) of a ledger is updated
type LedgerNavUpdatedEvent struct {
	NftAddress string                `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	NavAmount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=nav_amount,json=navAmount,proto3,customtype=cosmossdk.io/math.Int" json:"nav_amount"`
}

func (m *LedgerNavUpdatedEvent) Reset()         { *m = LedgerNavUpdatedEvent{} }
func (m *LedgerNavUpdatedEvent) String() string { return proto.CompactTextString(m) }
func (*LedgerNavUpdatedEvent) ProtoMessage()    {}
func (*LedgerNavUpdatedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a60494a0b0d3ba7b, []int{4}
}
func (m *LedgerNavUpdatedEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerNavUpdatedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerNavUpdatedEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerNavUpdatedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerNavUpdatedEvent.Merge(m, src)
}
func (m *LedgerNavUpdatedEvent) XXX_Size() int {
	return m.Size()
}
func (m *LedgerNavUpdatedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerNavUpdatedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerNavUpdatedEvent proto.InternalMessageInfo

func (m *LedgerNavUpdatedEvent) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*LedgerCreatedEvent)(nil), "provenance.ledger.v1.LedgerCreatedEvent")
	proto.RegisterType((*LedgerEntryAddedEvent)(nil), "provenance.ledger.v1.LedgerEntryAddedEvent")
	proto.RegisterType((*LedgerPaymentEvent)(nil), "provenance.ledger.v1.LedgerPaymentEvent")
	proto.RegisterType((*LedgerDisbursementEvent)(nil), "provenance.ledger.v1.LedgerDisbursementEvent")
	proto.RegisterType((*LedgerNavUpdatedEvent)(nil), "provenance.ledger.v1.LedgerNavUpdatedEvent")
}

func init() { proto.RegisterFile("provenance/ledger/v1/event.proto", fileDescriptor_a60494a0b0d3ba7b) }

var fileDescriptor_a60494a0b0d3ba7b = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbf, 0x6e, 0xda, 0x40,
	0x1c, 0xf6, 0x55, 0xa2, 0x15, 0x47, 0x97, 0x5a, 0x20, 0x28, 0x83, 0x01, 0x4f, 0x55, 0x55, 0xee,
	0x4a, 0x3b, 0x74, 0xe8, 0x04, 0x2d, 0x03, 0x6a, 0x95, 0x20, 0xa4, 0x2c, 0x59, 0xd0, 0xc1, 0x1d,
	0xc6, 0x4a, 0x7c, 0xe7, 0x9c, 0x0f, 0x2b, 0x8c, 0x19, 0xb3, 0xe5, 0x31, 0x32, 0x66, 0xc8, 0x43,
	0x30, 0xa2, 0x4c, 0x51, 0x06, 0x14, 0xc1, 0x90, 0xd7, 0x88, 0xb8, 0x33, 0x82, 0x48, 0x0c, 0x66,
	0xb1, 0xfc, 0xfd, 0xee, 0xfb, 0x73, 0xfe, 0xf9, 0x83, 0xd5, 0x50, 0x8a, 0x98, 0x71, 0xc2, 0x87,
	0x0c, 0x9f, 0x33, 0xea, 0x31, 0x89, 0xe3, 0x06, 0x66, 0x31, 0xe3, 0x0a, 0x85, 0x52, 0x28, 0x61,
	0xe7, 0xb7, 0x0c, 0x64, 0x18, 0x28, 0x6e, 0x94, 0x3f, 0x0f, 0x45, 0x14, 0x88, 0xa8, 0xaf, 0x39,
	0xd8, 0x00, 0x23, 0x28, 0x7f, 0x22, 0x81, 0xcf, 0x05, 0xd6, 0xcf, 0x64, 0x94, 0xf7, 0x84, 0x27,
	0x0c, 0x75, 0xfd, 0x96, 0x4c, 0x6b, 0x7b, 0xb3, 0x93, 0x0c, 0x4d, 0x71, 0xff, 0x41, 0xfb, 0xbf,
	0xc6, 0x7f, 0x24, 0x23, 0x8a, 0xd1, 0xf6, 0xfa, 0x62, 0x76, 0x05, 0xe6, 0xf8, 0x48, 0xf5, 0x09,
	0xa5, 0x92, 0x45, 0x51, 0x09, 0x54, 0xc1, 0x97, 0x6c, 0x0f, 0xf2, 0x91, 0x6a, 0x9a, 0x89, 0x9d,
	0x87, 0x19, 0xca, 0xb8, 0x08, 0x4a, 0xef, 0xf4, 0x91, 0x01, 0xee, 0x05, 0x2c, 0x18, 0xb3, 0x36,
	0x57, 0x72, 0xda, 0xa4, 0x34, 0xb5, 0xdf, 0x2f, 0x98, 0x61, 0x6b, 0x8d, 0xf6, 0xcb, 0xfd, 0xa8,
	0xa1, 0x7d, 0x3b, 0x41, 0x3b, 0xe6, 0x3d, 0xc3, 0x77, 0xe5, 0xe6, 0xfe, 0x5d, 0x32, 0x0d, 0x18,
	0x57, 0x29, 0xf3, 0x7e, 0xc3, 0x0f, 0xa1, 0x11, 0xa4, 0x4f, 0xdc, 0x28, 0xdc, 0x2b, 0x00, 0x8b,
	0xe6, 0xe0, 0xaf, 0x1f, 0x0d, 0x26, 0x32, 0x62, 0x07, 0x24, 0xb7, 0xe1, 0x47, 0xba, 0xa3, 0x4a,
	0x1f, 0xff, 0x46, 0xe6, 0x5e, 0x83, 0xcd, 0xae, 0x8f, 0x48, 0x7c, 0x12, 0xd2, 0x03, 0xfe, 0xdd,
	0x31, 0x84, 0x9c, 0xc4, 0x7d, 0x12, 0x88, 0x49, 0x92, 0x9f, 0x6d, 0x7d, 0x9f, 0x2d, 0x2a, 0xd6,
	0xd3, 0xa2, 0x52, 0x30, 0x45, 0x8b, 0xe8, 0x19, 0xf2, 0x05, 0x0e, 0x88, 0x1a, 0xa3, 0x0e, 0x57,
	0x0f, 0xf7, 0x75, 0x98, 0x34, 0xb0, 0xc3, 0xd5, 0xed, 0xcb, 0xdd, 0x57, 0xd0, 0xcb, 0x72, 0x12,
	0x37, 0xb5, 0x45, 0x8b, 0xcc, 0x96, 0x0e, 0x98, 0x2f, 0x1d, 0xf0, 0xbc, 0x74, 0xc0, 0xcd, 0xca,
	0xb1, 0xe6, 0x2b, 0xc7, 0x7a, 0x5c, 0x39, 0x16, 0x2c, 0xfa, 0x62, 0xef, 0x87, 0x75, 0xc1, 0xe9,
	0x37, 0xcf, 0x57, 0xe3, 0xc9, 0x00, 0x0d, 0x45, 0x80, 0xb7, 0x94, 0xba, 0x2f, 0x76, 0x10, 0xbe,
	0x4c, 0xca, 0x3a, 0x78, 0xaf, 0xdb, 0xfa, 0xf3, 0x35, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x97, 0xc0,
	0xcc, 0x4e, 0x03, 0x00, 0x00,
}

func (m *LedgerCreatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerCreatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerCreatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerEntryAddedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerEntryAddedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerEntryAddedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerPaymentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerPaymentEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerPaymentEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payment != nil {
		{
			size, err := m.Payment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerDisbursementEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerDisbursementEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerDisbursementEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disbursement != nil {
		{
			size, err := m.Disbursement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerNavUpdatedEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerNavUpdatedEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerNavUpdatedEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NavAmount.Size()
		i -= size
		if _, err := m.NavAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LedgerCreatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LedgerEntryAddedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LedgerPaymentEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Payment != nil {
		l = m.Payment.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LedgerDisbursementEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Disbursement != nil {
		l = m.Disbursement.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *LedgerNavUpdatedEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = m.NavAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LedgerCreatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerCreatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerCreatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerEntryAddedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerEntryAddedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerEntryAddedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerPaymentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerPaymentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerPaymentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payment == nil {
				m.Payment = &LedgerEntry{}
			}
			if err := m.Payment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerDisbursementEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerDisbursementEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerDisbursementEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disbursement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Disbursement == nil {
				m.Disbursement = &LedgerEntry{}
			}
			if err := m.Disbursement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerNavUpdatedEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerNavUpdatedEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerNavUpdatedEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NavAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
