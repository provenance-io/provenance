// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateLedgerRequest represents a request to create a new ledger.
type MsgCreateLedgerRequest struct {
	// The ledger to create.
	Ledger *Ledger `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
	// The signer address that can create ledgers.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateLedgerRequest) Reset()         { *m = MsgCreateLedgerRequest{} }
func (m *MsgCreateLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLedgerRequest) ProtoMessage()    {}
func (*MsgCreateLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{0}
}
func (m *MsgCreateLedgerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLedgerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLedgerRequest.Merge(m, src)
}
func (m *MsgCreateLedgerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLedgerRequest proto.InternalMessageInfo

func (m *MsgCreateLedgerRequest) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

func (m *MsgCreateLedgerRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateLedgerResponse represents the response from creating a ledger.
type MsgCreateLedgerResponse struct {
}

func (m *MsgCreateLedgerResponse) Reset()         { *m = MsgCreateLedgerResponse{} }
func (m *MsgCreateLedgerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLedgerResponse) ProtoMessage()    {}
func (*MsgCreateLedgerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{1}
}
func (m *MsgCreateLedgerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLedgerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLedgerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLedgerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLedgerResponse.Merge(m, src)
}
func (m *MsgCreateLedgerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLedgerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLedgerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLedgerResponse proto.InternalMessageInfo

// MsgUpdateStatusRequest represents a request to update the status of a ledger.
type MsgUpdateStatusRequest struct {
	// Ledger key of the ledger whose status is being updated.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is updating the status.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// The new status type id of the ledger.
	StatusTypeId int32 `protobuf:"varint,3,opt,name=status_type_id,json=statusTypeId,proto3" json:"status_type_id,omitempty"`
}

func (m *MsgUpdateStatusRequest) Reset()         { *m = MsgUpdateStatusRequest{} }
func (m *MsgUpdateStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStatusRequest) ProtoMessage()    {}
func (*MsgUpdateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{2}
}
func (m *MsgUpdateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStatusRequest.Merge(m, src)
}
func (m *MsgUpdateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStatusRequest proto.InternalMessageInfo

func (m *MsgUpdateStatusRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgUpdateStatusRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateStatusRequest) GetStatusTypeId() int32 {
	if m != nil {
		return m.StatusTypeId
	}
	return 0
}

// MsgUpdateStatusResponse represents the response from updating a ledger status.
type MsgUpdateStatusResponse struct {
}

func (m *MsgUpdateStatusResponse) Reset()         { *m = MsgUpdateStatusResponse{} }
func (m *MsgUpdateStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStatusResponse) ProtoMessage()    {}
func (*MsgUpdateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{3}
}
func (m *MsgUpdateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStatusResponse.Merge(m, src)
}
func (m *MsgUpdateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStatusResponse proto.InternalMessageInfo

// MsgUpdateInterestRateRequest represents a request to update the interest rate configuration of a ledger.
type MsgUpdateInterestRateRequest struct {
	// Ledger key of the ledger whose interest rate is being updated.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is updating the interest rate.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// The new interest rate of the ledger.
	InterestRate int32 `protobuf:"varint,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// The new interest day count convention of the ledger.
	InterestDayCountConvention DayCountConvention `protobuf:"varint,4,opt,name=interest_day_count_convention,json=interestDayCountConvention,proto3,enum=provenance.ledger.v1.DayCountConvention" json:"interest_day_count_convention,omitempty"`
	// The new interest accrual method of the ledger.
	InterestAccrualMethod InterestAccrualMethod `protobuf:"varint,5,opt,name=interest_accrual_method,json=interestAccrualMethod,proto3,enum=provenance.ledger.v1.InterestAccrualMethod" json:"interest_accrual_method,omitempty"`
}

func (m *MsgUpdateInterestRateRequest) Reset()         { *m = MsgUpdateInterestRateRequest{} }
func (m *MsgUpdateInterestRateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInterestRateRequest) ProtoMessage()    {}
func (*MsgUpdateInterestRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{4}
}
func (m *MsgUpdateInterestRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInterestRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInterestRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInterestRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInterestRateRequest.Merge(m, src)
}
func (m *MsgUpdateInterestRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInterestRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInterestRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInterestRateRequest proto.InternalMessageInfo

func (m *MsgUpdateInterestRateRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgUpdateInterestRateRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateInterestRateRequest) GetInterestRate() int32 {
	if m != nil {
		return m.InterestRate
	}
	return 0
}

func (m *MsgUpdateInterestRateRequest) GetInterestDayCountConvention() DayCountConvention {
	if m != nil {
		return m.InterestDayCountConvention
	}
	return DAY_COUNT_CONVENTION_UNSPECIFIED
}

func (m *MsgUpdateInterestRateRequest) GetInterestAccrualMethod() InterestAccrualMethod {
	if m != nil {
		return m.InterestAccrualMethod
	}
	return INTEREST_ACCRUAL_METHOD_UNSPECIFIED
}

// MsgUpdateInterestRateResponse represents the response from updating a ledger interest rate.
type MsgUpdateInterestRateResponse struct {
}

func (m *MsgUpdateInterestRateResponse) Reset()         { *m = MsgUpdateInterestRateResponse{} }
func (m *MsgUpdateInterestRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateInterestRateResponse) ProtoMessage()    {}
func (*MsgUpdateInterestRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{5}
}
func (m *MsgUpdateInterestRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateInterestRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateInterestRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateInterestRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateInterestRateResponse.Merge(m, src)
}
func (m *MsgUpdateInterestRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateInterestRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateInterestRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateInterestRateResponse proto.InternalMessageInfo

// MsgUpdatePaymentRequest represents a request to update payment configuration of a ledger.
type MsgUpdatePaymentRequest struct {
	// Ledger key of the ledger whose payment is being updated.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is updating the payment.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// The new next payment amount of the ledger.
	// The units of this field are defined by the denom field in this ledger's class.
	NextPmtAmt cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=next_pmt_amt,json=nextPmtAmt,proto3,customtype=cosmossdk.io/math.Int" json:"nextPmtAmt,omitempty"`
	// The new next payment date in days since epoch.
	NextPmtDate int32 `protobuf:"varint,4,opt,name=next_pmt_date,json=nextPmtDate,proto3" json:"next_pmt_date,omitempty"`
	// The new payment frequency of the ledger.
	PaymentFrequency PaymentFrequency `protobuf:"varint,5,opt,name=payment_frequency,json=paymentFrequency,proto3,enum=provenance.ledger.v1.PaymentFrequency" json:"payment_frequency,omitempty"`
}

func (m *MsgUpdatePaymentRequest) Reset()         { *m = MsgUpdatePaymentRequest{} }
func (m *MsgUpdatePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePaymentRequest) ProtoMessage()    {}
func (*MsgUpdatePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{6}
}
func (m *MsgUpdatePaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePaymentRequest.Merge(m, src)
}
func (m *MsgUpdatePaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePaymentRequest proto.InternalMessageInfo

func (m *MsgUpdatePaymentRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgUpdatePaymentRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdatePaymentRequest) GetNextPmtDate() int32 {
	if m != nil {
		return m.NextPmtDate
	}
	return 0
}

func (m *MsgUpdatePaymentRequest) GetPaymentFrequency() PaymentFrequency {
	if m != nil {
		return m.PaymentFrequency
	}
	return PAYMENT_FREQUENCY_UNSPECIFIED
}

// MsgUpdatePaymentResponse represents the response from updating a ledger payment configuration.
type MsgUpdatePaymentResponse struct {
}

func (m *MsgUpdatePaymentResponse) Reset()         { *m = MsgUpdatePaymentResponse{} }
func (m *MsgUpdatePaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePaymentResponse) ProtoMessage()    {}
func (*MsgUpdatePaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{7}
}
func (m *MsgUpdatePaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePaymentResponse.Merge(m, src)
}
func (m *MsgUpdatePaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePaymentResponse proto.InternalMessageInfo

// MsgUpdateMaturityDateRequest represents a request to update the maturity date of a ledger.
type MsgUpdateMaturityDateRequest struct {
	// Ledger key of the ledger whose maturity date is being updated.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is updating the maturity date.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// The new maturity date in days since epoch.
	MaturityDate int32 `protobuf:"varint,3,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
}

func (m *MsgUpdateMaturityDateRequest) Reset()         { *m = MsgUpdateMaturityDateRequest{} }
func (m *MsgUpdateMaturityDateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaturityDateRequest) ProtoMessage()    {}
func (*MsgUpdateMaturityDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{8}
}
func (m *MsgUpdateMaturityDateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaturityDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaturityDateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaturityDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaturityDateRequest.Merge(m, src)
}
func (m *MsgUpdateMaturityDateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaturityDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaturityDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaturityDateRequest proto.InternalMessageInfo

func (m *MsgUpdateMaturityDateRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgUpdateMaturityDateRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateMaturityDateRequest) GetMaturityDate() int32 {
	if m != nil {
		return m.MaturityDate
	}
	return 0
}

// MsgUpdateMaturityDateResponse represents the response from updating a ledger maturity date.
type MsgUpdateMaturityDateResponse struct {
}

func (m *MsgUpdateMaturityDateResponse) Reset()         { *m = MsgUpdateMaturityDateResponse{} }
func (m *MsgUpdateMaturityDateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaturityDateResponse) ProtoMessage()    {}
func (*MsgUpdateMaturityDateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{9}
}
func (m *MsgUpdateMaturityDateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaturityDateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaturityDateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaturityDateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaturityDateResponse.Merge(m, src)
}
func (m *MsgUpdateMaturityDateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaturityDateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaturityDateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaturityDateResponse proto.InternalMessageInfo

// MsgAppendRequest represents a request to append entries to a ledger.
type MsgAppendRequest struct {
	// Ledger key of the ledger whose entries are being appended.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The entries to append to the ledger.
	Entries []*LedgerEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	// The signer that is appending the entries.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAppendRequest) Reset()         { *m = MsgAppendRequest{} }
func (m *MsgAppendRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAppendRequest) ProtoMessage()    {}
func (*MsgAppendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{10}
}
func (m *MsgAppendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendRequest.Merge(m, src)
}
func (m *MsgAppendRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendRequest proto.InternalMessageInfo

func (m *MsgAppendRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgAppendRequest) GetEntries() []*LedgerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *MsgAppendRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAppendResponse represents the response from appending entries to a ledger.
type MsgAppendResponse struct {
}

func (m *MsgAppendResponse) Reset()         { *m = MsgAppendResponse{} }
func (m *MsgAppendResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAppendResponse) ProtoMessage()    {}
func (*MsgAppendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{11}
}
func (m *MsgAppendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAppendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAppendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAppendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAppendResponse.Merge(m, src)
}
func (m *MsgAppendResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAppendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAppendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAppendResponse proto.InternalMessageInfo

// MsgUpdateBalancesRequest represents a request to update balances for a ledger entry.
type MsgUpdateBalancesRequest struct {
	// Ledger key of the ledger whose balances are being updated.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is updating the balances.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	// The correlation id of the ledger entry.
	CorrelationId string `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// The total amount of the ledger entry.
	// The units of this field are defined by the denom field in this ledger's class.
	TotalAmt cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_amt,json=totalAmt,proto3,customtype=cosmossdk.io/math.Int" json:"totalAmt,omitempty"`
	// Applied amounts represent how the entry affects different buckets.
	AppliedAmounts []*LedgerBucketAmount `protobuf:"bytes,5,rep,name=applied_amounts,json=appliedAmounts,proto3" json:"applied_amounts,omitempty"`
	// Bucket balances represent the current state of funds in each bucket.
	BalanceAmounts []*BucketBalance `protobuf:"bytes,6,rep,name=balance_amounts,json=balanceAmounts,proto3" json:"balance_amounts,omitempty"`
}

func (m *MsgUpdateBalancesRequest) Reset()         { *m = MsgUpdateBalancesRequest{} }
func (m *MsgUpdateBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBalancesRequest) ProtoMessage()    {}
func (*MsgUpdateBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{12}
}
func (m *MsgUpdateBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBalancesRequest.Merge(m, src)
}
func (m *MsgUpdateBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBalancesRequest proto.InternalMessageInfo

func (m *MsgUpdateBalancesRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgUpdateBalancesRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateBalancesRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *MsgUpdateBalancesRequest) GetAppliedAmounts() []*LedgerBucketAmount {
	if m != nil {
		return m.AppliedAmounts
	}
	return nil
}

func (m *MsgUpdateBalancesRequest) GetBalanceAmounts() []*BucketBalance {
	if m != nil {
		return m.BalanceAmounts
	}
	return nil
}

// MsgUpdateBalancesResponse represents the response from updating ledger balances.
type MsgUpdateBalancesResponse struct {
}

func (m *MsgUpdateBalancesResponse) Reset()         { *m = MsgUpdateBalancesResponse{} }
func (m *MsgUpdateBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBalancesResponse) ProtoMessage()    {}
func (*MsgUpdateBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{13}
}
func (m *MsgUpdateBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBalancesResponse.Merge(m, src)
}
func (m *MsgUpdateBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBalancesResponse proto.InternalMessageInfo

// MsgTransferFundsWithSettlementRequest represents a request to transfer funds with settlement instructions.
type MsgTransferFundsWithSettlementRequest struct {
	// The signer that is transferring the funds.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The transfers to be made.
	Transfers []*FundTransferWithSettlement `protobuf:"bytes,2,rep,name=transfers,proto3" json:"transfers,omitempty"`
}

func (m *MsgTransferFundsWithSettlementRequest) Reset()         { *m = MsgTransferFundsWithSettlementRequest{} }
func (m *MsgTransferFundsWithSettlementRequest) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFundsWithSettlementRequest) ProtoMessage()    {}
func (*MsgTransferFundsWithSettlementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{14}
}
func (m *MsgTransferFundsWithSettlementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFundsWithSettlementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFundsWithSettlementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFundsWithSettlementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFundsWithSettlementRequest.Merge(m, src)
}
func (m *MsgTransferFundsWithSettlementRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFundsWithSettlementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFundsWithSettlementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFundsWithSettlementRequest proto.InternalMessageInfo

func (m *MsgTransferFundsWithSettlementRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgTransferFundsWithSettlementRequest) GetTransfers() []*FundTransferWithSettlement {
	if m != nil {
		return m.Transfers
	}
	return nil
}

// MsgTransferFundsWithSettlementResponse represents the response from transferring funds with settlement.
type MsgTransferFundsWithSettlementResponse struct {
}

func (m *MsgTransferFundsWithSettlementResponse) Reset() {
	*m = MsgTransferFundsWithSettlementResponse{}
}
func (m *MsgTransferFundsWithSettlementResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferFundsWithSettlementResponse) ProtoMessage()    {}
func (*MsgTransferFundsWithSettlementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{15}
}
func (m *MsgTransferFundsWithSettlementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferFundsWithSettlementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferFundsWithSettlementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferFundsWithSettlementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferFundsWithSettlementResponse.Merge(m, src)
}
func (m *MsgTransferFundsWithSettlementResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferFundsWithSettlementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferFundsWithSettlementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferFundsWithSettlementResponse proto.InternalMessageInfo

// MsgDestroyRequest represents a request to destroy a ledger.
type MsgDestroyRequest struct {
	// Ledger key of the ledger to destroy.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The signer that is destroying the ledger.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgDestroyRequest) Reset()         { *m = MsgDestroyRequest{} }
func (m *MsgDestroyRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDestroyRequest) ProtoMessage()    {}
func (*MsgDestroyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{16}
}
func (m *MsgDestroyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDestroyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDestroyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDestroyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDestroyRequest.Merge(m, src)
}
func (m *MsgDestroyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDestroyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDestroyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDestroyRequest proto.InternalMessageInfo

func (m *MsgDestroyRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MsgDestroyRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgDestroyResponse represents the response from destroying a ledger.
type MsgDestroyResponse struct {
}

func (m *MsgDestroyResponse) Reset()         { *m = MsgDestroyResponse{} }
func (m *MsgDestroyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDestroyResponse) ProtoMessage()    {}
func (*MsgDestroyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{17}
}
func (m *MsgDestroyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDestroyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDestroyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDestroyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDestroyResponse.Merge(m, src)
}
func (m *MsgDestroyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDestroyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDestroyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDestroyResponse proto.InternalMessageInfo

// MsgCreateLedgerClassRequest represents a request to create a new ledger class.
type MsgCreateLedgerClassRequest struct {
	// The ledger class to create.
	LedgerClass *LedgerClass `protobuf:"bytes,1,opt,name=ledger_class,json=ledgerClass,proto3" json:"ledger_class,omitempty"`
	// The signer that is creating the ledger class.
	Signer string `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgCreateLedgerClassRequest) Reset()         { *m = MsgCreateLedgerClassRequest{} }
func (m *MsgCreateLedgerClassRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLedgerClassRequest) ProtoMessage()    {}
func (*MsgCreateLedgerClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{18}
}
func (m *MsgCreateLedgerClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLedgerClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLedgerClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLedgerClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLedgerClassRequest.Merge(m, src)
}
func (m *MsgCreateLedgerClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLedgerClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLedgerClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLedgerClassRequest proto.InternalMessageInfo

func (m *MsgCreateLedgerClassRequest) GetLedgerClass() *LedgerClass {
	if m != nil {
		return m.LedgerClass
	}
	return nil
}

func (m *MsgCreateLedgerClassRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgCreateLedgerClassResponse represents the response from creating a ledger class.
type MsgCreateLedgerClassResponse struct {
}

func (m *MsgCreateLedgerClassResponse) Reset()         { *m = MsgCreateLedgerClassResponse{} }
func (m *MsgCreateLedgerClassResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateLedgerClassResponse) ProtoMessage()    {}
func (*MsgCreateLedgerClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{19}
}
func (m *MsgCreateLedgerClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateLedgerClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateLedgerClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateLedgerClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateLedgerClassResponse.Merge(m, src)
}
func (m *MsgCreateLedgerClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateLedgerClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateLedgerClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateLedgerClassResponse proto.InternalMessageInfo

// MsgCreateLedgerClassRequest represents a request to update a ledger class.
type MsgUpdateLedgerClassRequest struct {
	// Unique ID for the ledger class (eg. 1, 2, 3, etc.).
	// This is necessary since the nft class does not have an owner.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
	// maintainer_address is the address of the current maintainer of the ledger class.
	MaintainerAddress string `protobuf:"bytes,2,opt,name=maintainer_address,json=maintainerAddress,proto3" json:"maintainer_address,omitempty"`
	// new_asset_class_id is the new asset class id that the ledger class should have.
	// If this field is an empty string, the asset_class_id field will NOT be updated.
	NewAssetClassId string `protobuf:"bytes,3,opt,name=new_asset_class_id,json=newAssetClassId,proto3" json:"new_asset_class_id,omitempty"`
	// new_denom is the new denom that the ledger class should have.
	// If this field is an empty string, the denom field will NOT be updated.
	NewDenom string `protobuf:"bytes,4,opt,name=new_denom,json=newDenom,proto3" json:"new_denom,omitempty"`
	// new_maintainer_address is the new maintainer_address that the ledger class should have.
	// If this field is an empty string, the maintainer_address field will NOT be updated.
	NewMaintainerAddress string `protobuf:"bytes,5,opt,name=new_maintainer_address,json=newMaintainerAddress,proto3" json:"new_maintainer_address,omitempty"`
}

func (m *MsgUpdateLedgerClassRequest) Reset()         { *m = MsgUpdateLedgerClassRequest{} }
func (m *MsgUpdateLedgerClassRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLedgerClassRequest) ProtoMessage()    {}
func (*MsgUpdateLedgerClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{20}
}
func (m *MsgUpdateLedgerClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLedgerClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLedgerClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLedgerClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLedgerClassRequest.Merge(m, src)
}
func (m *MsgUpdateLedgerClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLedgerClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLedgerClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLedgerClassRequest proto.InternalMessageInfo

func (m *MsgUpdateLedgerClassRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

func (m *MsgUpdateLedgerClassRequest) GetMaintainerAddress() string {
	if m != nil {
		return m.MaintainerAddress
	}
	return ""
}

func (m *MsgUpdateLedgerClassRequest) GetNewAssetClassId() string {
	if m != nil {
		return m.NewAssetClassId
	}
	return ""
}

func (m *MsgUpdateLedgerClassRequest) GetNewDenom() string {
	if m != nil {
		return m.NewDenom
	}
	return ""
}

func (m *MsgUpdateLedgerClassRequest) GetNewMaintainerAddress() string {
	if m != nil {
		return m.NewMaintainerAddress
	}
	return ""
}

// MsgCreateLedgerClassResponse represents the response from updating a ledger class.
type MsgUpdateLedgerClassResponse struct {
}

func (m *MsgUpdateLedgerClassResponse) Reset()         { *m = MsgUpdateLedgerClassResponse{} }
func (m *MsgUpdateLedgerClassResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLedgerClassResponse) ProtoMessage()    {}
func (*MsgUpdateLedgerClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{21}
}
func (m *MsgUpdateLedgerClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLedgerClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLedgerClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLedgerClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLedgerClassResponse.Merge(m, src)
}
func (m *MsgUpdateLedgerClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLedgerClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLedgerClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLedgerClassResponse proto.InternalMessageInfo

// MsgAddLedgerClassStatusTypeRequest represents a request to add a status type to a ledger class.
type MsgAddLedgerClassStatusTypeRequest struct {
	// Ledger class id to add the status type to.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
	// The status type to add to the ledger class.
	StatusType *LedgerClassStatusType `protobuf:"bytes,2,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	// The signer that is adding the status type.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddLedgerClassStatusTypeRequest) Reset()         { *m = MsgAddLedgerClassStatusTypeRequest{} }
func (m *MsgAddLedgerClassStatusTypeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassStatusTypeRequest) ProtoMessage()    {}
func (*MsgAddLedgerClassStatusTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{22}
}
func (m *MsgAddLedgerClassStatusTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassStatusTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassStatusTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassStatusTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassStatusTypeRequest.Merge(m, src)
}
func (m *MsgAddLedgerClassStatusTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassStatusTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassStatusTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassStatusTypeRequest proto.InternalMessageInfo

func (m *MsgAddLedgerClassStatusTypeRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

func (m *MsgAddLedgerClassStatusTypeRequest) GetStatusType() *LedgerClassStatusType {
	if m != nil {
		return m.StatusType
	}
	return nil
}

func (m *MsgAddLedgerClassStatusTypeRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddLedgerClassStatusTypeResponse represents the response from adding a status type.
type MsgAddLedgerClassStatusTypeResponse struct {
}

func (m *MsgAddLedgerClassStatusTypeResponse) Reset()         { *m = MsgAddLedgerClassStatusTypeResponse{} }
func (m *MsgAddLedgerClassStatusTypeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassStatusTypeResponse) ProtoMessage()    {}
func (*MsgAddLedgerClassStatusTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{23}
}
func (m *MsgAddLedgerClassStatusTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassStatusTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassStatusTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassStatusTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassStatusTypeResponse.Merge(m, src)
}
func (m *MsgAddLedgerClassStatusTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassStatusTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassStatusTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassStatusTypeResponse proto.InternalMessageInfo

// MsgAddLedgerClassEntryTypeRequest represents a request to add an entry type to a ledger class.
type MsgAddLedgerClassEntryTypeRequest struct {
	// Ledger class id to add the entry type to.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
	// The entry type to add to the ledger class.
	EntryType *LedgerClassEntryType `protobuf:"bytes,2,opt,name=entry_type,json=entryType,proto3" json:"entry_type,omitempty"`
	// The signer that is adding the entry type.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddLedgerClassEntryTypeRequest) Reset()         { *m = MsgAddLedgerClassEntryTypeRequest{} }
func (m *MsgAddLedgerClassEntryTypeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassEntryTypeRequest) ProtoMessage()    {}
func (*MsgAddLedgerClassEntryTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{24}
}
func (m *MsgAddLedgerClassEntryTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassEntryTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassEntryTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassEntryTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassEntryTypeRequest.Merge(m, src)
}
func (m *MsgAddLedgerClassEntryTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassEntryTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassEntryTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassEntryTypeRequest proto.InternalMessageInfo

func (m *MsgAddLedgerClassEntryTypeRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

func (m *MsgAddLedgerClassEntryTypeRequest) GetEntryType() *LedgerClassEntryType {
	if m != nil {
		return m.EntryType
	}
	return nil
}

func (m *MsgAddLedgerClassEntryTypeRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddLedgerClassEntryTypeResponse represents the response from adding an entry type.
type MsgAddLedgerClassEntryTypeResponse struct {
}

func (m *MsgAddLedgerClassEntryTypeResponse) Reset()         { *m = MsgAddLedgerClassEntryTypeResponse{} }
func (m *MsgAddLedgerClassEntryTypeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassEntryTypeResponse) ProtoMessage()    {}
func (*MsgAddLedgerClassEntryTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{25}
}
func (m *MsgAddLedgerClassEntryTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassEntryTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassEntryTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassEntryTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassEntryTypeResponse.Merge(m, src)
}
func (m *MsgAddLedgerClassEntryTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassEntryTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassEntryTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassEntryTypeResponse proto.InternalMessageInfo

// MsgAddLedgerClassBucketTypeRequest represents a request to add a bucket type to a ledger class.
type MsgAddLedgerClassBucketTypeRequest struct {
	// Ledger class id to add the bucket type to.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
	// The bucket type to add to the ledger class.
	BucketType *LedgerClassBucketType `protobuf:"bytes,2,opt,name=bucket_type,json=bucketType,proto3" json:"bucket_type,omitempty"`
	// The signer that is adding the bucket type.
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddLedgerClassBucketTypeRequest) Reset()         { *m = MsgAddLedgerClassBucketTypeRequest{} }
func (m *MsgAddLedgerClassBucketTypeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassBucketTypeRequest) ProtoMessage()    {}
func (*MsgAddLedgerClassBucketTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{26}
}
func (m *MsgAddLedgerClassBucketTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassBucketTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassBucketTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassBucketTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassBucketTypeRequest.Merge(m, src)
}
func (m *MsgAddLedgerClassBucketTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassBucketTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassBucketTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassBucketTypeRequest proto.InternalMessageInfo

func (m *MsgAddLedgerClassBucketTypeRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

func (m *MsgAddLedgerClassBucketTypeRequest) GetBucketType() *LedgerClassBucketType {
	if m != nil {
		return m.BucketType
	}
	return nil
}

func (m *MsgAddLedgerClassBucketTypeRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

// MsgAddLedgerClassBucketTypeResponse represents the response from adding a bucket type.
type MsgAddLedgerClassBucketTypeResponse struct {
}

func (m *MsgAddLedgerClassBucketTypeResponse) Reset()         { *m = MsgAddLedgerClassBucketTypeResponse{} }
func (m *MsgAddLedgerClassBucketTypeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddLedgerClassBucketTypeResponse) ProtoMessage()    {}
func (*MsgAddLedgerClassBucketTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{27}
}
func (m *MsgAddLedgerClassBucketTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddLedgerClassBucketTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddLedgerClassBucketTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddLedgerClassBucketTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddLedgerClassBucketTypeResponse.Merge(m, src)
}
func (m *MsgAddLedgerClassBucketTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddLedgerClassBucketTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddLedgerClassBucketTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddLedgerClassBucketTypeResponse proto.InternalMessageInfo

// MsgBulkCreateRequest represents a request to bulk create ledgers and entries.
type MsgBulkCreateRequest struct {
	// The signer that is bulk importing the ledger data.
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// The genesis state to bulk import.
	LedgerAndEntries []*LedgerAndEntries `protobuf:"bytes,2,rep,name=ledger_and_entries,json=ledgerAndEntries,proto3" json:"ledger_and_entries,omitempty"`
}

func (m *MsgBulkCreateRequest) Reset()         { *m = MsgBulkCreateRequest{} }
func (m *MsgBulkCreateRequest) String() string { return proto.CompactTextString(m) }
func (*MsgBulkCreateRequest) ProtoMessage()    {}
func (*MsgBulkCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{28}
}
func (m *MsgBulkCreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBulkCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBulkCreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBulkCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBulkCreateRequest.Merge(m, src)
}
func (m *MsgBulkCreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgBulkCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBulkCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBulkCreateRequest proto.InternalMessageInfo

func (m *MsgBulkCreateRequest) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgBulkCreateRequest) GetLedgerAndEntries() []*LedgerAndEntries {
	if m != nil {
		return m.LedgerAndEntries
	}
	return nil
}

// MsgBulkCreateResponse represents the response from bulk creating ledgers and entries.
type MsgBulkCreateResponse struct {
}

func (m *MsgBulkCreateResponse) Reset()         { *m = MsgBulkCreateResponse{} }
func (m *MsgBulkCreateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBulkCreateResponse) ProtoMessage()    {}
func (*MsgBulkCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c124d2e9569f84d, []int{29}
}
func (m *MsgBulkCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBulkCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBulkCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBulkCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBulkCreateResponse.Merge(m, src)
}
func (m *MsgBulkCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBulkCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBulkCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBulkCreateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateLedgerRequest)(nil), "provenance.ledger.v1.MsgCreateLedgerRequest")
	proto.RegisterType((*MsgCreateLedgerResponse)(nil), "provenance.ledger.v1.MsgCreateLedgerResponse")
	proto.RegisterType((*MsgUpdateStatusRequest)(nil), "provenance.ledger.v1.MsgUpdateStatusRequest")
	proto.RegisterType((*MsgUpdateStatusResponse)(nil), "provenance.ledger.v1.MsgUpdateStatusResponse")
	proto.RegisterType((*MsgUpdateInterestRateRequest)(nil), "provenance.ledger.v1.MsgUpdateInterestRateRequest")
	proto.RegisterType((*MsgUpdateInterestRateResponse)(nil), "provenance.ledger.v1.MsgUpdateInterestRateResponse")
	proto.RegisterType((*MsgUpdatePaymentRequest)(nil), "provenance.ledger.v1.MsgUpdatePaymentRequest")
	proto.RegisterType((*MsgUpdatePaymentResponse)(nil), "provenance.ledger.v1.MsgUpdatePaymentResponse")
	proto.RegisterType((*MsgUpdateMaturityDateRequest)(nil), "provenance.ledger.v1.MsgUpdateMaturityDateRequest")
	proto.RegisterType((*MsgUpdateMaturityDateResponse)(nil), "provenance.ledger.v1.MsgUpdateMaturityDateResponse")
	proto.RegisterType((*MsgAppendRequest)(nil), "provenance.ledger.v1.MsgAppendRequest")
	proto.RegisterType((*MsgAppendResponse)(nil), "provenance.ledger.v1.MsgAppendResponse")
	proto.RegisterType((*MsgUpdateBalancesRequest)(nil), "provenance.ledger.v1.MsgUpdateBalancesRequest")
	proto.RegisterType((*MsgUpdateBalancesResponse)(nil), "provenance.ledger.v1.MsgUpdateBalancesResponse")
	proto.RegisterType((*MsgTransferFundsWithSettlementRequest)(nil), "provenance.ledger.v1.MsgTransferFundsWithSettlementRequest")
	proto.RegisterType((*MsgTransferFundsWithSettlementResponse)(nil), "provenance.ledger.v1.MsgTransferFundsWithSettlementResponse")
	proto.RegisterType((*MsgDestroyRequest)(nil), "provenance.ledger.v1.MsgDestroyRequest")
	proto.RegisterType((*MsgDestroyResponse)(nil), "provenance.ledger.v1.MsgDestroyResponse")
	proto.RegisterType((*MsgCreateLedgerClassRequest)(nil), "provenance.ledger.v1.MsgCreateLedgerClassRequest")
	proto.RegisterType((*MsgCreateLedgerClassResponse)(nil), "provenance.ledger.v1.MsgCreateLedgerClassResponse")
	proto.RegisterType((*MsgUpdateLedgerClassRequest)(nil), "provenance.ledger.v1.MsgUpdateLedgerClassRequest")
	proto.RegisterType((*MsgUpdateLedgerClassResponse)(nil), "provenance.ledger.v1.MsgUpdateLedgerClassResponse")
	proto.RegisterType((*MsgAddLedgerClassStatusTypeRequest)(nil), "provenance.ledger.v1.MsgAddLedgerClassStatusTypeRequest")
	proto.RegisterType((*MsgAddLedgerClassStatusTypeResponse)(nil), "provenance.ledger.v1.MsgAddLedgerClassStatusTypeResponse")
	proto.RegisterType((*MsgAddLedgerClassEntryTypeRequest)(nil), "provenance.ledger.v1.MsgAddLedgerClassEntryTypeRequest")
	proto.RegisterType((*MsgAddLedgerClassEntryTypeResponse)(nil), "provenance.ledger.v1.MsgAddLedgerClassEntryTypeResponse")
	proto.RegisterType((*MsgAddLedgerClassBucketTypeRequest)(nil), "provenance.ledger.v1.MsgAddLedgerClassBucketTypeRequest")
	proto.RegisterType((*MsgAddLedgerClassBucketTypeResponse)(nil), "provenance.ledger.v1.MsgAddLedgerClassBucketTypeResponse")
	proto.RegisterType((*MsgBulkCreateRequest)(nil), "provenance.ledger.v1.MsgBulkCreateRequest")
	proto.RegisterType((*MsgBulkCreateResponse)(nil), "provenance.ledger.v1.MsgBulkCreateResponse")
}

func init() { proto.RegisterFile("provenance/ledger/v1/tx.proto", fileDescriptor_3c124d2e9569f84d) }

var fileDescriptor_3c124d2e9569f84d = []byte{
	// 1523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0x26, 0x24, 0x90, 0xe7, 0xc4, 0x21, 0xf3, 0x35, 0xd8, 0x6c, 0xc0, 0x09, 0x01, 0xf2,
	0xb5, 0x02, 0xb1, 0x89, 0x41, 0xfa, 0xf2, 0x85, 0x5e, 0x9c, 0x04, 0xa4, 0xa8, 0xb8, 0xa2, 0x1b,
	0xaa, 0xaa, 0x55, 0xd5, 0xd5, 0xc6, 0x3b, 0x6c, 0x56, 0xf1, 0xce, 0x2e, 0x3b, 0xe3, 0x04, 0x57,
	0xaa, 0x54, 0x55, 0xaa, 0x7a, 0x29, 0x6a, 0x8f, 0x3d, 0xf7, 0x5a, 0x55, 0xe2, 0x40, 0x7b, 0xef,
	0x8d, 0x23, 0x42, 0xaa, 0xd4, 0xf6, 0x80, 0x2a, 0x38, 0x20, 0xb5, 0xff, 0x44, 0xb5, 0x3b, 0xb3,
	0xf6, 0xae, 0xbd, 0x5e, 0xdb, 0x89, 0x9a, 0xde, 0xbc, 0x33, 0xef, 0xbd, 0xcf, 0xe7, 0xf3, 0xde,
	0xfc, 0x78, 0x63, 0x38, 0xe7, 0xb8, 0xf6, 0x1e, 0x26, 0x1a, 0xa9, 0xe1, 0x52, 0x1d, 0xeb, 0x06,
	0x76, 0x4b, 0x7b, 0xab, 0x25, 0xf6, 0xa8, 0xe8, 0xb8, 0x36, 0xb3, 0x51, 0xa6, 0x3d, 0x5d, 0xe4,
	0xd3, 0xc5, 0xbd, 0x55, 0x39, 0x5b, 0xb3, 0xa9, 0x65, 0xd3, 0x92, 0x45, 0x0d, 0xcf, 0xda, 0xa2,
	0x06, 0x37, 0x97, 0xcf, 0xf0, 0x09, 0xd5, 0xff, 0x2a, 0xf1, 0x0f, 0x31, 0x95, 0x31, 0x6c, 0xc3,
	0xe6, 0xe3, 0xde, 0x2f, 0x31, 0x7a, 0x3e, 0x16, 0x5e, 0x20, 0x71, 0x93, 0x2b, 0x09, 0x26, 0x2a,
	0xc5, 0x8c, 0xd5, 0xb1, 0x85, 0x09, 0xe3, 0xd6, 0x8b, 0x8f, 0x25, 0x38, 0x5d, 0xa5, 0xc6, 0xba,
	0x8b, 0x35, 0x86, 0xef, 0xfa, 0x46, 0x0a, 0x7e, 0xd8, 0xc0, 0x94, 0xa1, 0xeb, 0x30, 0xc1, 0xbd,
	0x72, 0xd2, 0x82, 0x54, 0x48, 0x95, 0xcf, 0x16, 0xe3, 0xc4, 0x15, 0x85, 0x93, 0xb0, 0x45, 0x57,
	0x61, 0x82, 0x9a, 0x06, 0xc1, 0x6e, 0x6e, 0x74, 0x41, 0x2a, 0x4c, 0xae, 0xe5, 0x5e, 0x3c, 0x5d,
	0xc9, 0x08, 0x65, 0x15, 0x5d, 0x77, 0x31, 0xa5, 0x5b, 0xcc, 0x35, 0x89, 0xa1, 0x08, 0xbb, 0x9b,
	0xa9, 0xcf, 0xdf, 0x3c, 0x59, 0x16, 0x1f, 0x8b, 0x67, 0x20, 0xdb, 0x45, 0x87, 0x3a, 0x36, 0xa1,
	0x78, 0xf1, 0x09, 0xa7, 0xfa, 0x9e, 0xa3, 0x6b, 0x0c, 0x6f, 0x31, 0x8d, 0x35, 0x68, 0x40, 0x75,
	0x15, 0xc6, 0x76, 0x71, 0x53, 0xf0, 0x9c, 0x4f, 0xe2, 0xf9, 0x36, 0x6e, 0x2a, 0x9e, 0xed, 0xf0,
	0x3c, 0xd1, 0x45, 0x48, 0x53, 0x1f, 0x55, 0x65, 0x4d, 0x07, 0xab, 0xa6, 0x9e, 0x1b, 0x5b, 0x90,
	0x0a, 0xe3, 0xca, 0x14, 0x1f, 0xbd, 0xdf, 0x74, 0xf0, 0xa6, 0x1e, 0xa7, 0x26, 0xca, 0x58, 0xa8,
	0xf9, 0x72, 0x0c, 0xce, 0xb6, 0xe6, 0x36, 0x09, 0xc3, 0x2e, 0xa6, 0x4c, 0xd1, 0x18, 0x3e, 0x52,
	0x4d, 0x17, 0x60, 0xda, 0x14, 0xd8, 0xaa, 0xab, 0x31, 0x1c, 0x48, 0x32, 0x43, 0x84, 0xd0, 0x2e,
	0x9c, 0x6b, 0x19, 0xe9, 0x5a, 0x53, 0xad, 0xd9, 0x0d, 0xc2, 0xd4, 0x9a, 0x4d, 0xf6, 0x30, 0x61,
	0xa6, 0x4d, 0x72, 0xc7, 0x16, 0xa4, 0x42, 0xba, 0x5c, 0x88, 0xe7, 0xb8, 0xa1, 0x35, 0xd7, 0x3d,
	0x87, 0xf5, 0x96, 0xbd, 0x22, 0x07, 0xe1, 0xba, 0xe7, 0x50, 0x0d, 0xb2, 0x2d, 0x30, 0xad, 0x56,
	0x73, 0x1b, 0x5a, 0x5d, 0xb5, 0x30, 0xdb, 0xb1, 0xf5, 0xdc, 0xb8, 0x0f, 0x73, 0x39, 0x1e, 0x26,
	0x48, 0x61, 0x85, 0xfb, 0x54, 0x7d, 0x17, 0xe5, 0x94, 0x19, 0x37, 0x1c, 0x2d, 0xd2, 0x3c, 0x9c,
	0xeb, 0x51, 0x08, 0x51, 0xaa, 0xbf, 0x46, 0x43, 0x65, 0xbc, 0xa7, 0x35, 0xbd, 0xed, 0x73, 0xa4,
	0x55, 0xc2, 0x30, 0x45, 0xf0, 0x23, 0xa6, 0x3a, 0x16, 0x53, 0x35, 0x8b, 0xf9, 0x45, 0x9a, 0x5c,
	0x5b, 0x7f, 0xf6, 0x72, 0x7e, 0xe4, 0xf7, 0x97, 0xf3, 0xa7, 0xb8, 0x2f, 0xd5, 0x77, 0x8b, 0xa6,
	0x5d, 0xb2, 0x34, 0xb6, 0xe3, 0x25, 0xe3, 0xcf, 0x97, 0xf3, 0x19, 0xcf, 0xe9, 0x9e, 0xc5, 0x2a,
	0x16, 0xbb, 0x62, 0x5b, 0x26, 0xc3, 0x96, 0xc3, 0x9a, 0x2f, 0x9e, 0xae, 0x80, 0x00, 0xdb, 0x24,
	0x4c, 0x81, 0xb6, 0x0d, 0x5a, 0x84, 0xe9, 0x16, 0x8c, 0x27, 0xd5, 0xaf, 0xeb, 0xb8, 0x92, 0x12,
	0x26, 0x1b, 0xde, 0x5a, 0xd8, 0x82, 0x59, 0x87, 0x67, 0x40, 0x7d, 0xe0, 0x7a, 0x39, 0x20, 0xb5,
	0xa6, 0x28, 0xcc, 0x52, 0xbc, 0x7a, 0x91, 0xb0, 0x3b, 0x81, 0xb5, 0x72, 0xd2, 0xe9, 0x18, 0x89,
	0x96, 0x43, 0x86, 0x5c, 0x77, 0xb2, 0x45, 0x25, 0x7e, 0x94, 0x42, 0x9b, 0xa6, 0xaa, 0xb1, 0x86,
	0x6b, 0xb2, 0xe6, 0xc6, 0xbf, 0xb0, 0x69, 0x2c, 0x81, 0xcd, 0xf3, 0x24, 0x36, 0x8d, 0x15, 0x22,
	0xd4, 0x7b, 0x89, 0x45, 0x69, 0x0b, 0x61, 0x3f, 0x4b, 0x70, 0xb2, 0x4a, 0x8d, 0x8a, 0xe3, 0x60,
	0xa2, 0x1f, 0x42, 0xcc, 0x2d, 0x38, 0x8e, 0x09, 0x73, 0x4d, 0x4c, 0x73, 0xa3, 0x0b, 0x63, 0x85,
	0x54, 0xf9, 0x7c, 0x92, 0xdb, 0x6d, 0xc2, 0xdc, 0xa6, 0x12, 0x78, 0x84, 0x32, 0x31, 0x76, 0x90,
	0xa3, 0xfb, 0x3f, 0x30, 0x1b, 0x92, 0x20, 0x84, 0x3d, 0x1d, 0x0b, 0x95, 0x73, 0x4d, 0xab, 0x7b,
	0x3c, 0x8e, 0xf6, 0xd8, 0xbe, 0x04, 0xe9, 0x9a, 0xed, 0xba, 0xb8, 0xae, 0x79, 0xe7, 0x4b, 0x70,
	0x6c, 0x4f, 0x2a, 0xd3, 0xa1, 0xd1, 0x4d, 0x1d, 0x7d, 0x0c, 0x93, 0xcc, 0x66, 0x5a, 0xdd, 0xdf,
	0x60, 0xc7, 0xfc, 0xd8, 0x95, 0x7e, 0x1b, 0x0c, 0xf9, 0x1e, 0x49, 0xdb, 0xeb, 0x44, 0x60, 0x81,
	0xde, 0x85, 0x19, 0xcd, 0x71, 0xea, 0x26, 0xd6, 0x55, 0xcd, 0xf2, 0xce, 0x3c, 0x9a, 0x1b, 0xf7,
	0x2b, 0x54, 0x48, 0xd2, 0xbd, 0xd6, 0xa8, 0xed, 0x62, 0x56, 0xf1, 0x1d, 0x94, 0xb4, 0x08, 0xc0,
	0x3f, 0x29, 0xba, 0x0b, 0x33, 0xdb, 0x3c, 0xa3, 0xad, 0x90, 0x13, 0x7e, 0xc8, 0x0b, 0xf1, 0x21,
	0x79, 0x30, 0x51, 0x04, 0x25, 0x2d, 0x7c, 0x45, 0xb4, 0x68, 0x2d, 0xe7, 0xe0, 0x4c, 0x4c, 0xd5,
	0x44, 0x4d, 0x7f, 0x92, 0xe0, 0x52, 0x95, 0x1a, 0xf7, 0x5d, 0x8d, 0xd0, 0x07, 0xd8, 0xbd, 0xd3,
	0x20, 0x3a, 0x7d, 0xdf, 0x64, 0x3b, 0x5b, 0xad, 0xe6, 0x22, 0x28, 0x70, 0xbb, 0x5a, 0xd2, 0x80,
	0xd5, 0x7a, 0x07, 0x26, 0x99, 0x88, 0x1b, 0x2c, 0xe1, 0xab, 0xf1, 0x6a, 0x3c, 0xd8, 0x80, 0x42,
	0x07, 0x7a, 0x3b, 0x44, 0x54, 0x55, 0x01, 0x96, 0xfa, 0xf1, 0x16, 0x12, 0xbf, 0x90, 0xfc, 0xc5,
	0xbc, 0x81, 0x29, 0x73, 0xed, 0xe6, 0x51, 0xae, 0xd7, 0x28, 0xe3, 0x0c, 0xa0, 0x30, 0x0d, 0xc1,
	0xee, 0x3b, 0x09, 0xe6, 0x3a, 0xba, 0xa4, 0xf5, 0xba, 0x46, 0x5b, 0xfb, 0x6a, 0x03, 0xa6, 0x44,
	0xbf, 0x57, 0xf3, 0x86, 0x05, 0xe1, 0xc4, 0xa3, 0x80, 0xfb, 0xa7, 0xea, 0xed, 0x8f, 0xc3, 0x52,
	0xcf, 0xfb, 0x47, 0x75, 0x0c, 0x47, 0x21, 0xe2, 0xf1, 0xa8, 0x2f, 0x82, 0xaf, 0xb1, 0x18, 0x11,
	0x4b, 0x30, 0x13, 0x16, 0xe1, 0x6d, 0x5c, 0x89, 0x6f, 0xdc, 0x10, 0xc9, 0x4d, 0x1d, 0xad, 0x00,
	0xb2, 0x34, 0x93, 0x30, 0xcd, 0x24, 0xd8, 0x55, 0x35, 0x4e, 0x8c, 0x53, 0x56, 0x66, 0xdb, 0x33,
	0x82, 0x31, 0xba, 0x0c, 0x88, 0xe0, 0x7d, 0x55, 0xa3, 0x14, 0xb3, 0x76, 0x64, 0x7e, 0x24, 0xcc,
	0x10, 0xbc, 0x5f, 0xf1, 0x26, 0x82, 0xd8, 0x73, 0x30, 0xe9, 0x19, 0xeb, 0x98, 0xd8, 0x16, 0x3f,
	0x14, 0x94, 0x13, 0x04, 0xef, 0x6f, 0x78, 0xdf, 0xe8, 0x3a, 0x9c, 0xf6, 0x26, 0x63, 0xc0, 0xc7,
	0x7d, 0xcb, 0x0c, 0xc1, 0xfb, 0xd5, 0x4e, 0xfc, 0x9b, 0x59, 0x2f, 0x47, 0x31, 0x8c, 0x45, 0xbe,
	0x62, 0xd2, 0x21, 0xf2, 0xf5, 0x9b, 0x04, 0x8b, 0xde, 0xf9, 0xaa, 0xeb, 0xa1, 0xd9, 0xad, 0x56,
	0xeb, 0x39, 0x6c, 0xda, 0xee, 0x42, 0x2a, 0xd4, 0xcd, 0xfa, 0xf9, 0x4a, 0xf5, 0xea, 0xad, 0xe2,
	0x01, 0xa1, 0xdd, 0xf7, 0x1e, 0xf6, 0xea, 0xb8, 0x04, 0x17, 0x12, 0xa5, 0x89, 0x14, 0xfc, 0x22,
	0xc1, 0xf9, 0x2e, 0x3b, 0xff, 0x12, 0x3b, 0x48, 0x06, 0x36, 0x01, 0xbc, 0x9b, 0xaf, 0x19, 0x4e,
	0xc0, 0x72, 0xdf, 0x04, 0xb4, 0xe1, 0x26, 0x71, 0xf0, 0xf3, 0xb0, 0xf2, 0x2f, 0xc6, 0x54, 0x36,
	0x24, 0x2b, 0x69, 0x01, 0xf0, 0x33, 0xfd, 0x80, 0x0b, 0x60, 0xdb, 0x77, 0x1e, 0x6e, 0x01, 0x84,
	0x00, 0x61, 0xbb, 0xf5, 0xfb, 0x9f, 0x58, 0x00, 0x61, 0x69, 0x22, 0x05, 0xdf, 0x4b, 0x90, 0xa9,
	0x52, 0x63, 0xad, 0x51, 0xdf, 0xe5, 0x07, 0xcb, 0xc1, 0x2f, 0x9a, 0xfb, 0x80, 0x44, 0x9a, 0x34,
	0xa2, 0xab, 0xd1, 0xa6, 0x69, 0x29, 0x29, 0x0b, 0x15, 0xa2, 0xdf, 0xe6, 0xd6, 0xca, 0xc9, 0x7a,
	0xc7, 0x48, 0x54, 0x54, 0x16, 0x4e, 0x75, 0x90, 0xe5, 0x32, 0xca, 0x3f, 0xa4, 0x61, 0xac, 0x4a,
	0x0d, 0xb4, 0x0b, 0x53, 0xe1, 0xf3, 0x11, 0x5d, 0x89, 0xc7, 0x8d, 0x7f, 0x9f, 0xcb, 0x2b, 0x03,
	0x5a, 0x73, 0x50, 0x0f, 0x2c, 0xfc, 0x10, 0x4d, 0x00, 0x8b, 0x79, 0x61, 0x27, 0x80, 0xc5, 0xbd,
	0x6e, 0xd1, 0xa7, 0x80, 0xba, 0x1f, 0x54, 0xa8, 0xdc, 0x27, 0x48, 0xcc, 0x33, 0x58, 0xbe, 0x36,
	0x94, 0x8f, 0x80, 0x27, 0x30, 0x1d, 0x79, 0x40, 0xa0, 0x7e, 0xf4, 0xa3, 0xaf, 0x3a, 0xb9, 0x38,
	0xa8, 0x79, 0xa7, 0xdc, 0x70, 0x73, 0xdf, 0x57, 0x6e, 0xcc, 0x03, 0xa6, 0xaf, 0xdc, 0xb8, 0xd7,
	0x03, 0xfa, 0x00, 0x26, 0x78, 0xdb, 0x8d, 0x96, 0x7a, 0xba, 0x47, 0x9e, 0x16, 0xf2, 0x7f, 0xfb,
	0xda, 0x89, 0xd0, 0x0f, 0x21, 0x1d, 0xed, 0x02, 0x51, 0xbf, 0xdc, 0x74, 0x34, 0xf9, 0x72, 0x69,
	0x60, 0x7b, 0x01, 0xf9, 0xad, 0x04, 0x73, 0x09, 0x3d, 0x1a, 0xba, 0xd5, 0x33, 0x60, 0xff, 0x8e,
	0x54, 0x7e, 0xeb, 0x60, 0xce, 0x82, 0xda, 0x47, 0x70, 0x5c, 0xf4, 0x62, 0xa8, 0x77, 0x06, 0xa3,
	0x4d, 0xa3, 0x5c, 0xe8, 0x6f, 0x28, 0xa2, 0x7f, 0x02, 0xb3, 0x5d, 0xed, 0x12, 0x5a, 0x1d, 0x68,
	0x97, 0x87, 0x3b, 0x27, 0xb9, 0x3c, 0x8c, 0x4b, 0x1b, 0xbb, 0xab, 0xf5, 0x48, 0xc0, 0xee, 0xd5,
	0xb5, 0xc9, 0xe5, 0x61, 0x5c, 0x04, 0xf6, 0xd7, 0x12, 0xe4, 0x7a, 0xdd, 0xfd, 0xe8, 0x46, 0xef,
	0x95, 0x9a, 0xdc, 0x09, 0xc9, 0xff, 0x3f, 0x80, 0xa7, 0x60, 0xf4, 0x95, 0x04, 0xd9, 0x1e, 0xd7,
	0x31, 0xfa, 0xdf, 0x80, 0x61, 0x3b, 0xfb, 0x12, 0xf9, 0xc6, 0xf0, 0x8e, 0x3d, 0x13, 0xd4, 0xbe,
	0x1b, 0x07, 0x4e, 0x50, 0x57, 0xa7, 0x30, 0x70, 0x82, 0xba, 0x2f, 0x62, 0x84, 0x01, 0xda, 0xf7,
	0x1a, 0x5a, 0xee, 0x19, 0xa8, 0xeb, 0xa6, 0x96, 0x2f, 0x0f, 0x64, 0xcb, 0x61, 0xe4, 0xf1, 0xcf,
	0xde, 0x3c, 0x59, 0x96, 0xd6, 0x8c, 0x67, 0xaf, 0xf2, 0xd2, 0xf3, 0x57, 0x79, 0xe9, 0x8f, 0x57,
	0x79, 0xe9, 0x9b, 0xd7, 0xf9, 0x91, 0xe7, 0xaf, 0xf3, 0x23, 0xbf, 0xbe, 0xce, 0x8f, 0x40, 0xd6,
	0xb4, 0x63, 0xe3, 0xdd, 0x93, 0x3e, 0x2c, 0x1b, 0x26, 0xdb, 0x69, 0x6c, 0x17, 0x6b, 0xb6, 0x55,
	0x6a, 0x9b, 0xac, 0x98, 0x76, 0xe8, 0xab, 0xf4, 0x28, 0xf8, 0x8b, 0xdc, 0xeb, 0x81, 0xe8, 0xf6,
	0x84, 0xff, 0xa7, 0xf8, 0xb5, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x49, 0x01, 0x5a, 0xcb, 0xe6,
	0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateLedger creates a new NFT ledger.
	CreateLedger(ctx context.Context, in *MsgCreateLedgerRequest, opts ...grpc.CallOption) (*MsgCreateLedgerResponse, error)
	// UpdateStatus updates the Status of a ledger.
	UpdateStatus(ctx context.Context, in *MsgUpdateStatusRequest, opts ...grpc.CallOption) (*MsgUpdateStatusResponse, error)
	// UpdateInterestRate updates the interest rate of a ledger.
	UpdateInterestRate(ctx context.Context, in *MsgUpdateInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateInterestRateResponse, error)
	// UpdatePayment updates the payment amount, next payment date, and payment frequency of a ledger.
	UpdatePayment(ctx context.Context, in *MsgUpdatePaymentRequest, opts ...grpc.CallOption) (*MsgUpdatePaymentResponse, error)
	// UpdateMaturityDate updates the maturity date of a ledger.
	UpdateMaturityDate(ctx context.Context, in *MsgUpdateMaturityDateRequest, opts ...grpc.CallOption) (*MsgUpdateMaturityDateResponse, error)
	// Append adds an entry to a ledger.
	Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error)
	// UpdateBalances updates the balances for a ledger entry, allowing for retroactive adjustments to be applied.
	UpdateBalances(ctx context.Context, in *MsgUpdateBalancesRequest, opts ...grpc.CallOption) (*MsgUpdateBalancesResponse, error)
	// TransferFundsWithSettlement processes multiple fund transfers with manual settlement instructions.
	TransferFundsWithSettlement(ctx context.Context, in *MsgTransferFundsWithSettlementRequest, opts ...grpc.CallOption) (*MsgTransferFundsWithSettlementResponse, error)
	// Destroy deletes a ledger and its ledger entries.
	Destroy(ctx context.Context, in *MsgDestroyRequest, opts ...grpc.CallOption) (*MsgDestroyResponse, error)
	// CreateLedgerClass creates a new ledger class.
	CreateLedgerClass(ctx context.Context, in *MsgCreateLedgerClassRequest, opts ...grpc.CallOption) (*MsgCreateLedgerClassResponse, error)
	// UpdateLedgerClass updates a ledger class.
	UpdateLedgerClass(ctx context.Context, in *MsgUpdateLedgerClassRequest, opts ...grpc.CallOption) (*MsgUpdateLedgerClassResponse, error)
	// AddLedgerClassStatusType adds a status type to a ledger class.
	AddLedgerClassStatusType(ctx context.Context, in *MsgAddLedgerClassStatusTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassStatusTypeResponse, error)
	// AddLedgerClassEntryType adds an entry type to a ledger class.
	AddLedgerClassEntryType(ctx context.Context, in *MsgAddLedgerClassEntryTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassEntryTypeResponse, error)
	// AddLedgerClassBucketType adds a bucket type to a ledger class.
	AddLedgerClassBucketType(ctx context.Context, in *MsgAddLedgerClassBucketTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassBucketTypeResponse, error)
	// BulkCreate creates ledgers and entries in bulk.
	// Each ledger in this will cost one MsgCreateLedgerRequest.
	BulkCreate(ctx context.Context, in *MsgBulkCreateRequest, opts ...grpc.CallOption) (*MsgBulkCreateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateLedger(ctx context.Context, in *MsgCreateLedgerRequest, opts ...grpc.CallOption) (*MsgCreateLedgerResponse, error) {
	out := new(MsgCreateLedgerResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/CreateLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStatus(ctx context.Context, in *MsgUpdateStatusRequest, opts ...grpc.CallOption) (*MsgUpdateStatusResponse, error) {
	out := new(MsgUpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateInterestRate(ctx context.Context, in *MsgUpdateInterestRateRequest, opts ...grpc.CallOption) (*MsgUpdateInterestRateResponse, error) {
	out := new(MsgUpdateInterestRateResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdateInterestRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePayment(ctx context.Context, in *MsgUpdatePaymentRequest, opts ...grpc.CallOption) (*MsgUpdatePaymentResponse, error) {
	out := new(MsgUpdatePaymentResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaturityDate(ctx context.Context, in *MsgUpdateMaturityDateRequest, opts ...grpc.CallOption) (*MsgUpdateMaturityDateResponse, error) {
	out := new(MsgUpdateMaturityDateResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdateMaturityDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Append(ctx context.Context, in *MsgAppendRequest, opts ...grpc.CallOption) (*MsgAppendResponse, error) {
	out := new(MsgAppendResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBalances(ctx context.Context, in *MsgUpdateBalancesRequest, opts ...grpc.CallOption) (*MsgUpdateBalancesResponse, error) {
	out := new(MsgUpdateBalancesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdateBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferFundsWithSettlement(ctx context.Context, in *MsgTransferFundsWithSettlementRequest, opts ...grpc.CallOption) (*MsgTransferFundsWithSettlementResponse, error) {
	out := new(MsgTransferFundsWithSettlementResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/TransferFundsWithSettlement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Destroy(ctx context.Context, in *MsgDestroyRequest, opts ...grpc.CallOption) (*MsgDestroyResponse, error) {
	out := new(MsgDestroyResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateLedgerClass(ctx context.Context, in *MsgCreateLedgerClassRequest, opts ...grpc.CallOption) (*MsgCreateLedgerClassResponse, error) {
	out := new(MsgCreateLedgerClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/CreateLedgerClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLedgerClass(ctx context.Context, in *MsgUpdateLedgerClassRequest, opts ...grpc.CallOption) (*MsgUpdateLedgerClassResponse, error) {
	out := new(MsgUpdateLedgerClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/UpdateLedgerClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLedgerClassStatusType(ctx context.Context, in *MsgAddLedgerClassStatusTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassStatusTypeResponse, error) {
	out := new(MsgAddLedgerClassStatusTypeResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/AddLedgerClassStatusType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLedgerClassEntryType(ctx context.Context, in *MsgAddLedgerClassEntryTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassEntryTypeResponse, error) {
	out := new(MsgAddLedgerClassEntryTypeResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/AddLedgerClassEntryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddLedgerClassBucketType(ctx context.Context, in *MsgAddLedgerClassBucketTypeRequest, opts ...grpc.CallOption) (*MsgAddLedgerClassBucketTypeResponse, error) {
	out := new(MsgAddLedgerClassBucketTypeResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/AddLedgerClassBucketType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BulkCreate(ctx context.Context, in *MsgBulkCreateRequest, opts ...grpc.CallOption) (*MsgBulkCreateResponse, error) {
	out := new(MsgBulkCreateResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Msg/BulkCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateLedger creates a new NFT ledger.
	CreateLedger(context.Context, *MsgCreateLedgerRequest) (*MsgCreateLedgerResponse, error)
	// UpdateStatus updates the Status of a ledger.
	UpdateStatus(context.Context, *MsgUpdateStatusRequest) (*MsgUpdateStatusResponse, error)
	// UpdateInterestRate updates the interest rate of a ledger.
	UpdateInterestRate(context.Context, *MsgUpdateInterestRateRequest) (*MsgUpdateInterestRateResponse, error)
	// UpdatePayment updates the payment amount, next payment date, and payment frequency of a ledger.
	UpdatePayment(context.Context, *MsgUpdatePaymentRequest) (*MsgUpdatePaymentResponse, error)
	// UpdateMaturityDate updates the maturity date of a ledger.
	UpdateMaturityDate(context.Context, *MsgUpdateMaturityDateRequest) (*MsgUpdateMaturityDateResponse, error)
	// Append adds an entry to a ledger.
	Append(context.Context, *MsgAppendRequest) (*MsgAppendResponse, error)
	// UpdateBalances updates the balances for a ledger entry, allowing for retroactive adjustments to be applied.
	UpdateBalances(context.Context, *MsgUpdateBalancesRequest) (*MsgUpdateBalancesResponse, error)
	// TransferFundsWithSettlement processes multiple fund transfers with manual settlement instructions.
	TransferFundsWithSettlement(context.Context, *MsgTransferFundsWithSettlementRequest) (*MsgTransferFundsWithSettlementResponse, error)
	// Destroy deletes a ledger and its ledger entries.
	Destroy(context.Context, *MsgDestroyRequest) (*MsgDestroyResponse, error)
	// CreateLedgerClass creates a new ledger class.
	CreateLedgerClass(context.Context, *MsgCreateLedgerClassRequest) (*MsgCreateLedgerClassResponse, error)
	// UpdateLedgerClass updates a ledger class.
	UpdateLedgerClass(context.Context, *MsgUpdateLedgerClassRequest) (*MsgUpdateLedgerClassResponse, error)
	// AddLedgerClassStatusType adds a status type to a ledger class.
	AddLedgerClassStatusType(context.Context, *MsgAddLedgerClassStatusTypeRequest) (*MsgAddLedgerClassStatusTypeResponse, error)
	// AddLedgerClassEntryType adds an entry type to a ledger class.
	AddLedgerClassEntryType(context.Context, *MsgAddLedgerClassEntryTypeRequest) (*MsgAddLedgerClassEntryTypeResponse, error)
	// AddLedgerClassBucketType adds a bucket type to a ledger class.
	AddLedgerClassBucketType(context.Context, *MsgAddLedgerClassBucketTypeRequest) (*MsgAddLedgerClassBucketTypeResponse, error)
	// BulkCreate creates ledgers and entries in bulk.
	// Each ledger in this will cost one MsgCreateLedgerRequest.
	BulkCreate(context.Context, *MsgBulkCreateRequest) (*MsgBulkCreateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateLedger(ctx context.Context, req *MsgCreateLedgerRequest) (*MsgCreateLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedger not implemented")
}
func (*UnimplementedMsgServer) UpdateStatus(ctx context.Context, req *MsgUpdateStatusRequest) (*MsgUpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedMsgServer) UpdateInterestRate(ctx context.Context, req *MsgUpdateInterestRateRequest) (*MsgUpdateInterestRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInterestRate not implemented")
}
func (*UnimplementedMsgServer) UpdatePayment(ctx context.Context, req *MsgUpdatePaymentRequest) (*MsgUpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (*UnimplementedMsgServer) UpdateMaturityDate(ctx context.Context, req *MsgUpdateMaturityDateRequest) (*MsgUpdateMaturityDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaturityDate not implemented")
}
func (*UnimplementedMsgServer) Append(ctx context.Context, req *MsgAppendRequest) (*MsgAppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (*UnimplementedMsgServer) UpdateBalances(ctx context.Context, req *MsgUpdateBalancesRequest) (*MsgUpdateBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalances not implemented")
}
func (*UnimplementedMsgServer) TransferFundsWithSettlement(ctx context.Context, req *MsgTransferFundsWithSettlementRequest) (*MsgTransferFundsWithSettlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFundsWithSettlement not implemented")
}
func (*UnimplementedMsgServer) Destroy(ctx context.Context, req *MsgDestroyRequest) (*MsgDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedMsgServer) CreateLedgerClass(ctx context.Context, req *MsgCreateLedgerClassRequest) (*MsgCreateLedgerClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedgerClass not implemented")
}
func (*UnimplementedMsgServer) UpdateLedgerClass(ctx context.Context, req *MsgUpdateLedgerClassRequest) (*MsgUpdateLedgerClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedgerClass not implemented")
}
func (*UnimplementedMsgServer) AddLedgerClassStatusType(ctx context.Context, req *MsgAddLedgerClassStatusTypeRequest) (*MsgAddLedgerClassStatusTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLedgerClassStatusType not implemented")
}
func (*UnimplementedMsgServer) AddLedgerClassEntryType(ctx context.Context, req *MsgAddLedgerClassEntryTypeRequest) (*MsgAddLedgerClassEntryTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLedgerClassEntryType not implemented")
}
func (*UnimplementedMsgServer) AddLedgerClassBucketType(ctx context.Context, req *MsgAddLedgerClassBucketTypeRequest) (*MsgAddLedgerClassBucketTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLedgerClassBucketType not implemented")
}
func (*UnimplementedMsgServer) BulkCreate(ctx context.Context, req *MsgBulkCreateRequest) (*MsgBulkCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCreate not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/CreateLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLedger(ctx, req.(*MsgCreateLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStatus(ctx, req.(*MsgUpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateInterestRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateInterestRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateInterestRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdateInterestRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateInterestRate(ctx, req.(*MsgUpdateInterestRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePayment(ctx, req.(*MsgUpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaturityDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaturityDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaturityDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdateMaturityDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaturityDate(ctx, req.(*MsgUpdateMaturityDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Append(ctx, req.(*MsgAppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdateBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBalances(ctx, req.(*MsgUpdateBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferFundsWithSettlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferFundsWithSettlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferFundsWithSettlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/TransferFundsWithSettlement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferFundsWithSettlement(ctx, req.(*MsgTransferFundsWithSettlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Destroy(ctx, req.(*MsgDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateLedgerClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLedgerClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateLedgerClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/CreateLedgerClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateLedgerClass(ctx, req.(*MsgCreateLedgerClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLedgerClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLedgerClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLedgerClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/UpdateLedgerClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLedgerClass(ctx, req.(*MsgUpdateLedgerClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLedgerClassStatusType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLedgerClassStatusTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLedgerClassStatusType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/AddLedgerClassStatusType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLedgerClassStatusType(ctx, req.(*MsgAddLedgerClassStatusTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLedgerClassEntryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLedgerClassEntryTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLedgerClassEntryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/AddLedgerClassEntryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLedgerClassEntryType(ctx, req.(*MsgAddLedgerClassEntryTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddLedgerClassBucketType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddLedgerClassBucketTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddLedgerClassBucketType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/AddLedgerClassBucketType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddLedgerClassBucketType(ctx, req.(*MsgAddLedgerClassBucketTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BulkCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBulkCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BulkCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Msg/BulkCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BulkCreate(ctx, req.(*MsgBulkCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedger",
			Handler:    _Msg_CreateLedger_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Msg_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateInterestRate",
			Handler:    _Msg_UpdateInterestRate_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _Msg_UpdatePayment_Handler,
		},
		{
			MethodName: "UpdateMaturityDate",
			Handler:    _Msg_UpdateMaturityDate_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _Msg_Append_Handler,
		},
		{
			MethodName: "UpdateBalances",
			Handler:    _Msg_UpdateBalances_Handler,
		},
		{
			MethodName: "TransferFundsWithSettlement",
			Handler:    _Msg_TransferFundsWithSettlement_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Msg_Destroy_Handler,
		},
		{
			MethodName: "CreateLedgerClass",
			Handler:    _Msg_CreateLedgerClass_Handler,
		},
		{
			MethodName: "UpdateLedgerClass",
			Handler:    _Msg_UpdateLedgerClass_Handler,
		},
		{
			MethodName: "AddLedgerClassStatusType",
			Handler:    _Msg_AddLedgerClassStatusType_Handler,
		},
		{
			MethodName: "AddLedgerClassEntryType",
			Handler:    _Msg_AddLedgerClassEntryType_Handler,
		},
		{
			MethodName: "AddLedgerClassBucketType",
			Handler:    _Msg_AddLedgerClassBucketType_Handler,
		},
		{
			MethodName: "BulkCreate",
			Handler:    _Msg_BulkCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/tx.proto",
}

func (m *MsgCreateLedgerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLedgerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLedgerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLedgerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLedgerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLedgerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusTypeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StatusTypeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInterestRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInterestRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInterestRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InterestAccrualMethod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InterestAccrualMethod))
		i--
		dAtA[i] = 0x28
	}
	if m.InterestDayCountConvention != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InterestDayCountConvention))
		i--
		dAtA[i] = 0x20
	}
	if m.InterestRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InterestRate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateInterestRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateInterestRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateInterestRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PaymentFrequency != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PaymentFrequency))
		i--
		dAtA[i] = 0x28
	}
	if m.NextPmtDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NextPmtDate))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.NextPmtAmt.Size()
		i -= size
		if _, err := m.NextPmtAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaturityDateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaturityDateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaturityDateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaturityDate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaturityDate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaturityDateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaturityDateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaturityDateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAppendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAppendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAppendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAppendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceAmounts) > 0 {
		for iNdEx := len(m.BalanceAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AppliedAmounts) > 0 {
		for iNdEx := len(m.AppliedAmounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AppliedAmounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.TotalAmt.Size()
		i -= size
		if _, err := m.TotalAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferFundsWithSettlementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFundsWithSettlementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFundsWithSettlementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transfers) > 0 {
		for iNdEx := len(m.Transfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferFundsWithSettlementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferFundsWithSettlementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferFundsWithSettlementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDestroyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDestroyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDestroyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDestroyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDestroyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDestroyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateLedgerClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLedgerClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLedgerClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.LedgerClass != nil {
		{
			size, err := m.LedgerClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateLedgerClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateLedgerClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateLedgerClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLedgerClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLedgerClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLedgerClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMaintainerAddress) > 0 {
		i -= len(m.NewMaintainerAddress)
		copy(dAtA[i:], m.NewMaintainerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMaintainerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewDenom) > 0 {
		i -= len(m.NewDenom)
		copy(dAtA[i:], m.NewDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewAssetClassId) > 0 {
		i -= len(m.NewAssetClassId)
		copy(dAtA[i:], m.NewAssetClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAssetClassId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MaintainerAddress) > 0 {
		i -= len(m.MaintainerAddress)
		copy(dAtA[i:], m.MaintainerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaintainerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLedgerClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLedgerClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLedgerClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassStatusTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassStatusTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassStatusTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StatusType != nil {
		{
			size, err := m.StatusType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassStatusTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassStatusTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassStatusTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassEntryTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassEntryTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassEntryTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EntryType != nil {
		{
			size, err := m.EntryType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassEntryTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassEntryTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassEntryTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassBucketTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassBucketTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassBucketTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BucketType != nil {
		{
			size, err := m.BucketType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddLedgerClassBucketTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddLedgerClassBucketTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddLedgerClassBucketTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBulkCreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBulkCreateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBulkCreateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerAndEntries) > 0 {
		for iNdEx := len(m.LedgerAndEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LedgerAndEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBulkCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBulkCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBulkCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateLedgerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLedgerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StatusTypeId != 0 {
		n += 1 + sovTx(uint64(m.StatusTypeId))
	}
	return n
}

func (m *MsgUpdateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateInterestRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InterestRate != 0 {
		n += 1 + sovTx(uint64(m.InterestRate))
	}
	if m.InterestDayCountConvention != 0 {
		n += 1 + sovTx(uint64(m.InterestDayCountConvention))
	}
	if m.InterestAccrualMethod != 0 {
		n += 1 + sovTx(uint64(m.InterestAccrualMethod))
	}
	return n
}

func (m *MsgUpdateInterestRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NextPmtAmt.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.NextPmtDate != 0 {
		n += 1 + sovTx(uint64(m.NextPmtDate))
	}
	if m.PaymentFrequency != 0 {
		n += 1 + sovTx(uint64(m.PaymentFrequency))
	}
	return n
}

func (m *MsgUpdatePaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMaturityDateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaturityDate != 0 {
		n += 1 + sovTx(uint64(m.MaturityDate))
	}
	return n
}

func (m *MsgUpdateMaturityDateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAppendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAppendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalAmt.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.AppliedAmounts) > 0 {
		for _, e := range m.AppliedAmounts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BalanceAmounts) > 0 {
		for _, e := range m.BalanceAmounts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferFundsWithSettlementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Transfers) > 0 {
		for _, e := range m.Transfers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransferFundsWithSettlementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDestroyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDestroyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateLedgerClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerClass != nil {
		l = m.LedgerClass.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateLedgerClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLedgerClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MaintainerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAssetClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMaintainerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateLedgerClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddLedgerClassStatusTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StatusType != nil {
		l = m.StatusType.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddLedgerClassStatusTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddLedgerClassEntryTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EntryType != nil {
		l = m.EntryType.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddLedgerClassEntryTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddLedgerClassBucketTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BucketType != nil {
		l = m.BucketType.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddLedgerClassBucketTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBulkCreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.LedgerAndEntries) > 0 {
		for _, e := range m.LedgerAndEntries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBulkCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateLedgerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLedgerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLedgerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ledger == nil {
				m.Ledger = &Ledger{}
			}
			if err := m.Ledger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLedgerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLedgerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLedgerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTypeId", wireType)
			}
			m.StatusTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusTypeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInterestRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInterestRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInterestRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			m.InterestRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterestRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestDayCountConvention", wireType)
			}
			m.InterestDayCountConvention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterestDayCountConvention |= DayCountConvention(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestAccrualMethod", wireType)
			}
			m.InterestAccrualMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterestAccrualMethod |= InterestAccrualMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateInterestRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateInterestRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateInterestRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NextPmtAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtDate", wireType)
			}
			m.NextPmtDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPmtDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentFrequency", wireType)
			}
			m.PaymentFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentFrequency |= PaymentFrequency(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaturityDateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaturityDateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaturityDateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
			}
			m.MaturityDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaturityDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaturityDateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaturityDateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaturityDateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LedgerEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAppendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAppendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAppendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppliedAmounts = append(m.AppliedAmounts, &LedgerBucketAmount{})
			if err := m.AppliedAmounts[len(m.AppliedAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceAmounts = append(m.BalanceAmounts, &BucketBalance{})
			if err := m.BalanceAmounts[len(m.BalanceAmounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFundsWithSettlementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFundsWithSettlementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFundsWithSettlementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transfers = append(m.Transfers, &FundTransferWithSettlement{})
			if err := m.Transfers[len(m.Transfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferFundsWithSettlementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferFundsWithSettlementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferFundsWithSettlementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDestroyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDestroyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDestroyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDestroyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDestroyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDestroyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLedgerClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLedgerClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLedgerClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LedgerClass == nil {
				m.LedgerClass = &LedgerClass{}
			}
			if err := m.LedgerClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateLedgerClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateLedgerClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateLedgerClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLedgerClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLedgerClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLedgerClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintainerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaintainerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAssetClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAssetClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMaintainerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMaintainerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLedgerClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLedgerClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLedgerClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassStatusTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassStatusTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassStatusTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusType == nil {
				m.StatusType = &LedgerClassStatusType{}
			}
			if err := m.StatusType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassStatusTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassStatusTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassStatusTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassEntryTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassEntryTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassEntryTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryType == nil {
				m.EntryType = &LedgerClassEntryType{}
			}
			if err := m.EntryType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassEntryTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassEntryTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassEntryTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassBucketTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassBucketTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassBucketTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketType == nil {
				m.BucketType = &LedgerClassBucketType{}
			}
			if err := m.BucketType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddLedgerClassBucketTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddLedgerClassBucketTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddLedgerClassBucketTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBulkCreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBulkCreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBulkCreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerAndEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerAndEntries = append(m.LedgerAndEntries, &LedgerAndEntries{})
			if err := m.LedgerAndEntries[len(m.LedgerAndEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBulkCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBulkCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBulkCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
