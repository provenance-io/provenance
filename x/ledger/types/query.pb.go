// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryLedgerRequest represents a request to query a ledger.
type QueryLedgerRequest struct {
	// The ledger key identifying the ledger to query.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLedgerRequest) Reset()         { *m = QueryLedgerRequest{} }
func (m *QueryLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerRequest) ProtoMessage()    {}
func (*QueryLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{0}
}
func (m *QueryLedgerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerRequest.Merge(m, src)
}
func (m *QueryLedgerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerRequest proto.InternalMessageInfo

func (m *QueryLedgerRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QueryLedgerResponse represents the response from querying a ledger.
type QueryLedgerResponse struct {
	// The ledger data.
	Ledger *Ledger `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
}

func (m *QueryLedgerResponse) Reset()         { *m = QueryLedgerResponse{} }
func (m *QueryLedgerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerResponse) ProtoMessage()    {}
func (*QueryLedgerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{1}
}
func (m *QueryLedgerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerResponse.Merge(m, src)
}
func (m *QueryLedgerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerResponse proto.InternalMessageInfo

func (m *QueryLedgerResponse) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

// QueryLedgerEntriesRequest represents a request to query ledger entries.
type QueryLedgerEntriesRequest struct {
	// The ledger key identifying the ledger to query entries for.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLedgerEntriesRequest) Reset()         { *m = QueryLedgerEntriesRequest{} }
func (m *QueryLedgerEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntriesRequest) ProtoMessage()    {}
func (*QueryLedgerEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{2}
}
func (m *QueryLedgerEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntriesRequest.Merge(m, src)
}
func (m *QueryLedgerEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntriesRequest proto.InternalMessageInfo

func (m *QueryLedgerEntriesRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QueryLedgerEntriesResponse represents the response from querying ledger entries.
type QueryLedgerEntriesResponse struct {
	// The ledger entries.
	Entries []*LedgerEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueryLedgerEntriesResponse) Reset()         { *m = QueryLedgerEntriesResponse{} }
func (m *QueryLedgerEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntriesResponse) ProtoMessage()    {}
func (*QueryLedgerEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{3}
}
func (m *QueryLedgerEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntriesResponse.Merge(m, src)
}
func (m *QueryLedgerEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntriesResponse proto.InternalMessageInfo

func (m *QueryLedgerEntriesResponse) GetEntries() []*LedgerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// QueryLedgerEntryRequest represents a request to query a specific ledger entry.
type QueryLedgerEntryRequest struct {
	// The ledger key identifying the ledger.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The correlation ID of the entry to query (free-form string up to 50 characters).
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *QueryLedgerEntryRequest) Reset()         { *m = QueryLedgerEntryRequest{} }
func (m *QueryLedgerEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryRequest) ProtoMessage()    {}
func (*QueryLedgerEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{4}
}
func (m *QueryLedgerEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryRequest.Merge(m, src)
}
func (m *QueryLedgerEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryRequest proto.InternalMessageInfo

func (m *QueryLedgerEntryRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryLedgerEntryRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// QueryLedgerEntryResponse represents the response from querying a specific ledger entry.
type QueryLedgerEntryResponse struct {
	// The ledger entry.
	Entry *LedgerEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *QueryLedgerEntryResponse) Reset()         { *m = QueryLedgerEntryResponse{} }
func (m *QueryLedgerEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryResponse) ProtoMessage()    {}
func (*QueryLedgerEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{5}
}
func (m *QueryLedgerEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryResponse.Merge(m, src)
}
func (m *QueryLedgerEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryResponse proto.InternalMessageInfo

func (m *QueryLedgerEntryResponse) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// QueryBalancesAsOfRequest represents a request to query balances as of a specific date.
type QueryBalancesAsOfRequest struct {
	// The ledger key identifying the ledger.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The date to query balances as of (format: YYYY-MM-DD).
	AsOfDate string `protobuf:"bytes,2,opt,name=as_of_date,json=asOfDate,proto3" json:"as_of_date,omitempty"`
}

func (m *QueryBalancesAsOfRequest) Reset()         { *m = QueryBalancesAsOfRequest{} }
func (m *QueryBalancesAsOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalancesAsOfRequest) ProtoMessage()    {}
func (*QueryBalancesAsOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{6}
}
func (m *QueryBalancesAsOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalancesAsOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalancesAsOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalancesAsOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalancesAsOfRequest.Merge(m, src)
}
func (m *QueryBalancesAsOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalancesAsOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalancesAsOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalancesAsOfRequest proto.InternalMessageInfo

func (m *QueryBalancesAsOfRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryBalancesAsOfRequest) GetAsOfDate() string {
	if m != nil {
		return m.AsOfDate
	}
	return ""
}

// QueryBalancesAsOfResponse represents the response from querying balances as of a specific date.
type QueryBalancesAsOfResponse struct {
	// The balances as of the specified date.
	Balances *Balances `protobuf:"bytes,1,opt,name=balances,proto3" json:"balances,omitempty"`
}

func (m *QueryBalancesAsOfResponse) Reset()         { *m = QueryBalancesAsOfResponse{} }
func (m *QueryBalancesAsOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalancesAsOfResponse) ProtoMessage()    {}
func (*QueryBalancesAsOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{7}
}
func (m *QueryBalancesAsOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalancesAsOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalancesAsOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalancesAsOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalancesAsOfResponse.Merge(m, src)
}
func (m *QueryBalancesAsOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalancesAsOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalancesAsOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalancesAsOfResponse proto.InternalMessageInfo

func (m *QueryBalancesAsOfResponse) GetBalances() *Balances {
	if m != nil {
		return m.Balances
	}
	return nil
}

// QueryLedgerClassEntryTypesRequest represents a request to query entry types for a ledger class.
type QueryLedgerClassEntryTypesRequest struct {
	// The ledger class ID to query entry types for.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassEntryTypesRequest) Reset()         { *m = QueryLedgerClassEntryTypesRequest{} }
func (m *QueryLedgerClassEntryTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{8}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassEntryTypesResponse represents the response from querying entry types for a ledger class.
type QueryLedgerClassEntryTypesResponse struct {
	// The entry types for the ledger class.
	EntryTypes []*LedgerClassEntryType `protobuf:"bytes,1,rep,name=entry_types,json=entryTypes,proto3" json:"entry_types,omitempty"`
}

func (m *QueryLedgerClassEntryTypesResponse) Reset()         { *m = QueryLedgerClassEntryTypesResponse{} }
func (m *QueryLedgerClassEntryTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{9}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesResponse) GetEntryTypes() []*LedgerClassEntryType {
	if m != nil {
		return m.EntryTypes
	}
	return nil
}

// QueryLedgerClassStatusTypesRequest represents a request to query status types for a ledger class.
type QueryLedgerClassStatusTypesRequest struct {
	// The ledger class ID to query status types for.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassStatusTypesRequest) Reset()         { *m = QueryLedgerClassStatusTypesRequest{} }
func (m *QueryLedgerClassStatusTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{10}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassStatusTypesResponse represents the response from querying status types for a ledger class.
type QueryLedgerClassStatusTypesResponse struct {
	// The status types for the ledger class.
	StatusTypes []*LedgerClassStatusType `protobuf:"bytes,1,rep,name=status_types,json=statusTypes,proto3" json:"status_types,omitempty"`
}

func (m *QueryLedgerClassStatusTypesResponse) Reset()         { *m = QueryLedgerClassStatusTypesResponse{} }
func (m *QueryLedgerClassStatusTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{11}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesResponse) GetStatusTypes() []*LedgerClassStatusType {
	if m != nil {
		return m.StatusTypes
	}
	return nil
}

// QueryLedgerClassBucketTypesRequest represents a request to query bucket types for a ledger class.
type QueryLedgerClassBucketTypesRequest struct {
	// The ledger class ID to query bucket types for.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassBucketTypesRequest) Reset()         { *m = QueryLedgerClassBucketTypesRequest{} }
func (m *QueryLedgerClassBucketTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{12}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassBucketTypesResponse represents the response from querying bucket types for a ledger class.
type QueryLedgerClassBucketTypesResponse struct {
	// The bucket types for the ledger class.
	BucketTypes []*LedgerClassBucketType `protobuf:"bytes,1,rep,name=bucket_types,json=bucketTypes,proto3" json:"bucket_types,omitempty"`
}

func (m *QueryLedgerClassBucketTypesResponse) Reset()         { *m = QueryLedgerClassBucketTypesResponse{} }
func (m *QueryLedgerClassBucketTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{13}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesResponse) GetBucketTypes() []*LedgerClassBucketType {
	if m != nil {
		return m.BucketTypes
	}
	return nil
}

// QueryLedgerClassRequest represents a request to query a ledger class.
type QueryLedgerClassRequest struct {
	// The ledger class ID to query.
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassRequest) Reset()         { *m = QueryLedgerClassRequest{} }
func (m *QueryLedgerClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassRequest) ProtoMessage()    {}
func (*QueryLedgerClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{14}
}
func (m *QueryLedgerClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassRequest.Merge(m, src)
}
func (m *QueryLedgerClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassRequest proto.InternalMessageInfo

func (m *QueryLedgerClassRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassResponse represents the response from querying a ledger class.
type QueryLedgerClassResponse struct {
	// The ledger class data.
	LedgerClass *LedgerClass `protobuf:"bytes,1,opt,name=ledger_class,json=ledgerClass,proto3" json:"ledger_class,omitempty"`
}

func (m *QueryLedgerClassResponse) Reset()         { *m = QueryLedgerClassResponse{} }
func (m *QueryLedgerClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassResponse) ProtoMessage()    {}
func (*QueryLedgerClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{15}
}
func (m *QueryLedgerClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassResponse.Merge(m, src)
}
func (m *QueryLedgerClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassResponse proto.InternalMessageInfo

func (m *QueryLedgerClassResponse) GetLedgerClass() *LedgerClass {
	if m != nil {
		return m.LedgerClass
	}
	return nil
}

// QuerySettlementsRequest represents a request to query settlements for a ledger.
type QuerySettlementsRequest struct {
	// The ledger key identifying the ledger to query settlements for.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QuerySettlementsRequest) Reset()         { *m = QuerySettlementsRequest{} }
func (m *QuerySettlementsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementsRequest) ProtoMessage()    {}
func (*QuerySettlementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{16}
}
func (m *QuerySettlementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementsRequest.Merge(m, src)
}
func (m *QuerySettlementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementsRequest proto.InternalMessageInfo

func (m *QuerySettlementsRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QuerySettlementsResponse represents the response from querying settlements for a ledger.
type QuerySettlementsResponse struct {
	// The settlements for the ledger.
	Settlements []*StoredSettlementInstructions `protobuf:"bytes,1,rep,name=settlements,proto3" json:"settlements,omitempty"`
}

func (m *QuerySettlementsResponse) Reset()         { *m = QuerySettlementsResponse{} }
func (m *QuerySettlementsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementsResponse) ProtoMessage()    {}
func (*QuerySettlementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{17}
}
func (m *QuerySettlementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementsResponse.Merge(m, src)
}
func (m *QuerySettlementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementsResponse proto.InternalMessageInfo

func (m *QuerySettlementsResponse) GetSettlements() []*StoredSettlementInstructions {
	if m != nil {
		return m.Settlements
	}
	return nil
}

// QuerySettlementsByCorrelationIdRequest represents a request to query settlements by correlation ID.
type QuerySettlementsByCorrelationIdRequest struct {
	// The ledger key identifying the ledger.
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The correlation ID to query settlements for.
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *QuerySettlementsByCorrelationIdRequest) Reset() {
	*m = QuerySettlementsByCorrelationIdRequest{}
}
func (m *QuerySettlementsByCorrelationIdRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementsByCorrelationIdRequest) ProtoMessage()    {}
func (*QuerySettlementsByCorrelationIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{18}
}
func (m *QuerySettlementsByCorrelationIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementsByCorrelationIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementsByCorrelationIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementsByCorrelationIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementsByCorrelationIdRequest.Merge(m, src)
}
func (m *QuerySettlementsByCorrelationIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementsByCorrelationIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementsByCorrelationIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementsByCorrelationIdRequest proto.InternalMessageInfo

func (m *QuerySettlementsByCorrelationIdRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QuerySettlementsByCorrelationIdRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// QuerySettlementsByCorrelationIdResponse represents the response from querying settlements by correlation ID.
type QuerySettlementsByCorrelationIdResponse struct {
	// The settlement instructions for the correlation ID.
	Settlement *StoredSettlementInstructions `protobuf:"bytes,1,opt,name=settlement,proto3" json:"settlement,omitempty"`
}

func (m *QuerySettlementsByCorrelationIdResponse) Reset() {
	*m = QuerySettlementsByCorrelationIdResponse{}
}
func (m *QuerySettlementsByCorrelationIdResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySettlementsByCorrelationIdResponse) ProtoMessage()    {}
func (*QuerySettlementsByCorrelationIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{19}
}
func (m *QuerySettlementsByCorrelationIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySettlementsByCorrelationIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySettlementsByCorrelationIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySettlementsByCorrelationIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySettlementsByCorrelationIdResponse.Merge(m, src)
}
func (m *QuerySettlementsByCorrelationIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySettlementsByCorrelationIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySettlementsByCorrelationIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySettlementsByCorrelationIdResponse proto.InternalMessageInfo

func (m *QuerySettlementsByCorrelationIdResponse) GetSettlement() *StoredSettlementInstructions {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLedgerRequest)(nil), "provenance.ledger.v1.QueryLedgerRequest")
	proto.RegisterType((*QueryLedgerResponse)(nil), "provenance.ledger.v1.QueryLedgerResponse")
	proto.RegisterType((*QueryLedgerEntriesRequest)(nil), "provenance.ledger.v1.QueryLedgerEntriesRequest")
	proto.RegisterType((*QueryLedgerEntriesResponse)(nil), "provenance.ledger.v1.QueryLedgerEntriesResponse")
	proto.RegisterType((*QueryLedgerEntryRequest)(nil), "provenance.ledger.v1.QueryLedgerEntryRequest")
	proto.RegisterType((*QueryLedgerEntryResponse)(nil), "provenance.ledger.v1.QueryLedgerEntryResponse")
	proto.RegisterType((*QueryBalancesAsOfRequest)(nil), "provenance.ledger.v1.QueryBalancesAsOfRequest")
	proto.RegisterType((*QueryBalancesAsOfResponse)(nil), "provenance.ledger.v1.QueryBalancesAsOfResponse")
	proto.RegisterType((*QueryLedgerClassEntryTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesRequest")
	proto.RegisterType((*QueryLedgerClassEntryTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesResponse")
	proto.RegisterType((*QueryLedgerClassStatusTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesRequest")
	proto.RegisterType((*QueryLedgerClassStatusTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesResponse")
	proto.RegisterType((*QueryLedgerClassBucketTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesRequest")
	proto.RegisterType((*QueryLedgerClassBucketTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesResponse")
	proto.RegisterType((*QueryLedgerClassRequest)(nil), "provenance.ledger.v1.QueryLedgerClassRequest")
	proto.RegisterType((*QueryLedgerClassResponse)(nil), "provenance.ledger.v1.QueryLedgerClassResponse")
	proto.RegisterType((*QuerySettlementsRequest)(nil), "provenance.ledger.v1.QuerySettlementsRequest")
	proto.RegisterType((*QuerySettlementsResponse)(nil), "provenance.ledger.v1.QuerySettlementsResponse")
	proto.RegisterType((*QuerySettlementsByCorrelationIdRequest)(nil), "provenance.ledger.v1.QuerySettlementsByCorrelationIdRequest")
	proto.RegisterType((*QuerySettlementsByCorrelationIdResponse)(nil), "provenance.ledger.v1.QuerySettlementsByCorrelationIdResponse")
}

func init() { proto.RegisterFile("provenance/ledger/v1/query.proto", fileDescriptor_7955b82df44e45aa) }

var fileDescriptor_7955b82df44e45aa = []byte{
	// 997 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0xad, 0x1a, 0xca, 0xd9, 0x94, 0x4a, 0xc3, 0xa5, 0x61, 0x15, 0x99, 0x64, 0x10,
	0x25, 0x5c, 0xb2, 0x4b, 0x0c, 0xa8, 0xf4, 0xc2, 0x25, 0x6e, 0xa1, 0x0a, 0x89, 0x5a, 0xd8, 0x04,
	0x2a, 0x2e, 0x95, 0x59, 0xdb, 0x63, 0xb3, 0x8a, 0xbb, 0xeb, 0xec, 0x8c, 0x23, 0x56, 0x56, 0x5e,
	0xfa, 0x09, 0x90, 0xf8, 0x08, 0x88, 0x4f, 0xc1, 0x0b, 0x8f, 0x48, 0x08, 0xa9, 0x88, 0x17, 0x1e,
	0x51, 0xc2, 0x2b, 0x5f, 0x01, 0xa1, 0x9d, 0x1d, 0x7b, 0x67, 0xed, 0xc9, 0x7a, 0x6d, 0xa7, 0xaf,
	0xe3, 0x73, 0xfe, 0xe7, 0xf7, 0x9f, 0x9d, 0x39, 0x73, 0x0c, 0xcb, 0x9d, 0x30, 0x38, 0xa0, 0xbe,
	0xeb, 0xd7, 0xa9, 0xdd, 0xa6, 0x8d, 0x16, 0x0d, 0xed, 0x83, 0x75, 0x7b, 0xbf, 0x4b, 0xc3, 0xc8,
	0xea, 0x84, 0x01, 0x0f, 0xf0, 0x33, 0x69, 0x84, 0x95, 0x44, 0x58, 0x07, 0xeb, 0xe6, 0x52, 0x2b,
	0x08, 0x5a, 0x6d, 0x6a, 0xbb, 0x1d, 0xcf, 0x76, 0x7d, 0x3f, 0xe0, 0x2e, 0xf7, 0x02, 0x9f, 0x25,
	0x39, 0xe6, 0x8a, 0x56, 0x55, 0x66, 0x27, 0x21, 0xaf, 0xe7, 0x84, 0x54, 0x19, 0xe5, 0xbc, 0x4d,
	0x1f, 0x50, 0x9f, 0x27, 0xd1, 0xe4, 0x36, 0xe0, 0x4f, 0x63, 0xa6, 0x6d, 0xf1, 0xbb, 0x43, 0xf7,
	0xbb, 0x94, 0x71, 0xbc, 0x0e, 0x67, 0xf7, 0x68, 0xb4, 0x88, 0x96, 0xd1, 0xaa, 0x51, 0x7e, 0xc1,
	0xd2, 0x81, 0x5a, 0x49, 0xc6, 0x16, 0x8d, 0x9c, 0x38, 0x96, 0x6c, 0xc1, 0xd3, 0x19, 0x21, 0xd6,
	0x09, 0x7c, 0x46, 0xf1, 0x5b, 0x30, 0x9f, 0xa4, 0x48, 0xb1, 0xa5, 0x3c, 0x31, 0x47, 0xc6, 0x92,
	0x3b, 0xf0, 0xbc, 0x22, 0xf6, 0xa1, 0xcf, 0x43, 0x8f, 0xb2, 0x19, 0xe0, 0xbe, 0x00, 0x53, 0xa7,
	0x27, 0x19, 0xaf, 0xc3, 0x13, 0x34, 0x59, 0x5a, 0x44, 0xcb, 0x67, 0x57, 0x8d, 0xf2, 0x4a, 0x9e,
	0x68, 0x9c, 0x1d, 0x39, 0xfd, 0x0c, 0xc2, 0xe0, 0xd2, 0x90, 0x74, 0x34, 0x3d, 0x28, 0x7e, 0x09,
	0x9e, 0xaa, 0x07, 0x61, 0x48, 0xdb, 0xe2, 0xab, 0x57, 0xbd, 0xc6, 0xe2, 0x99, 0x65, 0xb4, 0xfa,
	0xa4, 0x73, 0x41, 0x59, 0xdd, 0x6c, 0x90, 0x1d, 0x58, 0x1c, 0x2d, 0x2a, 0xdd, 0x5c, 0x81, 0x73,
	0x31, 0x5b, 0xbf, 0x6e, 0x01, 0x2f, 0x49, 0x3c, 0xd9, 0x93, 0xa2, 0x15, 0xb7, 0x1d, 0x07, 0xb3,
	0x0d, 0x76, 0xb7, 0x39, 0x83, 0x95, 0x25, 0x00, 0x97, 0x55, 0x83, 0x66, 0xb5, 0xe1, 0x72, 0x2a,
	0x6d, 0x9c, 0x77, 0xd9, 0xdd, 0xe6, 0x2d, 0x97, 0x53, 0x72, 0x4f, 0x7e, 0xe1, 0x6c, 0x31, 0x69,
	0xe1, 0x1a, 0x9c, 0xaf, 0xc9, 0x75, 0x59, 0xb2, 0xa4, 0x2f, 0xd9, 0xcf, 0x76, 0x06, 0xf1, 0x64,
	0x0b, 0x56, 0x94, 0xad, 0xb9, 0xd9, 0x76, 0x19, 0x13, 0x2e, 0x77, 0xa3, 0x4e, 0x7a, 0x84, 0x2e,
	0xc3, 0x45, 0x79, 0x21, 0xea, 0x71, 0x40, 0xbc, 0xcf, 0x28, 0xd9, 0xe7, 0x76, 0x9a, 0xb6, 0xd9,
	0x20, 0xfb, 0x40, 0xf2, 0xc4, 0x24, 0xee, 0x16, 0x18, 0x62, 0x07, 0xab, 0x3c, 0x5e, 0x96, 0x67,
	0xe8, 0xd5, 0xbc, 0x4d, 0xca, 0x2a, 0x39, 0x40, 0x07, 0xa2, 0x64, 0x7b, 0xb4, 0xe4, 0x0e, 0x77,
	0x79, 0x97, 0x4d, 0x65, 0xa0, 0x0b, 0x2f, 0xe6, 0xaa, 0x49, 0x07, 0x77, 0x60, 0x81, 0x89, 0xe5,
	0x8c, 0x85, 0xd7, 0xc6, 0x5a, 0x48, 0xb5, 0x1c, 0x83, 0xa5, 0xba, 0x3a, 0x13, 0x95, 0x6e, 0x7d,
	0x8f, 0xf2, 0xd3, 0x32, 0x91, 0x51, 0x4b, 0x4d, 0xd4, 0xc4, 0xf2, 0x84, 0x26, 0x52, 0x2d, 0xc7,
	0xa8, 0xa5, 0xba, 0x64, 0x23, 0x73, 0xb3, 0x45, 0xe8, 0xa4, 0xe4, 0xdf, 0x64, 0xee, 0xa9, 0x94,
	0x90, 0xb8, 0xb7, 0x60, 0x41, 0xd5, 0x28, 0x72, 0x5d, 0x13, 0x01, 0x43, 0xa9, 0x41, 0xb6, 0x25,
	0xe4, 0xce, 0xa0, 0xb1, 0xcf, 0xd2, 0x27, 0x3b, 0x92, 0x37, 0xa3, 0x26, 0x79, 0x77, 0xc1, 0x48,
	0x5f, 0x8f, 0xfe, 0xee, 0x96, 0xf5, 0xb2, 0x3b, 0x3c, 0x08, 0x69, 0x23, 0x55, 0xd9, 0xf4, 0x19,
	0x0f, 0xbb, 0x75, 0xf1, 0x92, 0x39, 0xaa, 0x0c, 0x79, 0x88, 0xe0, 0xf2, 0x70, 0xc9, 0x4a, 0x74,
	0x53, 0xed, 0x76, 0x8f, 0xbf, 0x9d, 0x1e, 0xc2, 0xcb, 0x63, 0x19, 0xe4, 0x2e, 0x38, 0x00, 0x29,
	0xbe, 0x64, 0x99, 0x66, 0x13, 0x14, 0x95, 0xf2, 0xbf, 0x17, 0xe1, 0x9c, 0xa8, 0x8f, 0x7f, 0x44,
	0x60, 0x28, 0x9f, 0x1a, 0xaf, 0xe9, 0x95, 0x4f, 0x38, 0x96, 0xa6, 0x55, 0x34, 0x3c, 0x31, 0x43,
	0xde, 0x7e, 0xf8, 0xe7, 0x3f, 0x3f, 0x9c, 0xb1, 0xf1, 0x9a, 0xad, 0x9d, 0x19, 0xc4, 0xb9, 0xb4,
	0x7b, 0x43, 0x27, 0xfd, 0x10, 0xff, 0x8e, 0xe0, 0x59, 0x6d, 0x47, 0xc4, 0x57, 0x8a, 0x01, 0x8c,
	0x34, 0x64, 0xf3, 0x9d, 0xc9, 0x13, 0xa5, 0x87, 0x0d, 0xe1, 0xe1, 0x3a, 0xbe, 0x3a, 0x91, 0x07,
	0x5b, 0x69, 0xd8, 0xf8, 0x0f, 0x04, 0xcf, 0xe9, 0x1b, 0x24, 0x2e, 0xc8, 0x35, 0xda, 0xa1, 0xcd,
	0xab, 0x53, 0x64, 0x4a, 0x4b, 0x15, 0x61, 0xe9, 0x06, 0xbe, 0x36, 0x99, 0x25, 0xb5, 0x83, 0x0f,
	0x7b, 0x52, 0xfa, 0x65, 0x51, 0x4f, 0xa3, 0x0d, 0xbb, 0xa8, 0x27, 0x4d, 0x73, 0x9e, 0xd6, 0x93,
	0xda, 0xd0, 0xf1, 0x4f, 0x08, 0xe6, 0x93, 0x32, 0x78, 0x75, 0x2c, 0x49, 0x9f, 0xf9, 0x95, 0x02,
	0x91, 0x92, 0xf1, 0x23, 0xc1, 0xf8, 0x01, 0x7e, 0xef, 0x04, 0xc6, 0xc0, 0x6f, 0x7a, 0x2d, 0xbb,
	0xb7, 0x47, 0x23, 0xcb, 0x65, 0x8c, 0x72, 0x85, 0x53, 0x2c, 0xfa, 0x4d, 0x2e, 0xee, 0xc7, 0xcf,
	0x08, 0x2e, 0x64, 0x26, 0x4d, 0x6c, 0x8f, 0x85, 0xc8, 0xce, 0xb8, 0xe6, 0x1b, 0xc5, 0x13, 0x24,
	0xfc, 0x6d, 0x01, 0xbf, 0x81, 0xdf, 0xd7, 0xc3, 0xcb, 0x71, 0xb5, 0x00, 0xfd, 0x6f, 0x83, 0x1e,
	0x24, 0x6e, 0x5b, 0x81, 0x1e, 0xa4, 0x0e, 0xbd, 0x05, 0x7a, 0x50, 0x66, 0x5c, 0x25, 0xf7, 0x05,
	0xf7, 0x3d, 0xfc, 0x99, 0x9d, 0xf3, 0xbf, 0x65, 0x3c, 0x76, 0x72, 0xa1, 0xed, 0x5e, 0xb6, 0xdd,
	0x8b, 0x5e, 0xb5, 0xa0, 0xce, 0x98, 0x38, 0x8f, 0x4f, 0x33, 0xf9, 0x9a, 0x76, 0xe1, 0x78, 0x69,
	0xe8, 0x6b, 0x61, 0xe8, 0x73, 0xbc, 0x3b, 0xa3, 0xa1, 0xfe, 0x44, 0x6b, 0xf7, 0xd2, 0x31, 0xfa,
	0x10, 0xff, 0x82, 0xc0, 0x50, 0x9e, 0xa9, 0xdc, 0xaf, 0x33, 0x3a, 0x13, 0xe4, 0x7e, 0x1d, 0xcd,
	0xa3, 0x4f, 0x1c, 0x61, 0x66, 0x1b, 0x7f, 0x3c, 0xa3, 0x19, 0xe5, 0xc9, 0xc7, 0xff, 0x21, 0x30,
	0x4f, 0x7e, 0x69, 0xf1, 0x8d, 0x62, 0x88, 0xfa, 0x21, 0xc1, 0x7c, 0x77, 0xca, 0x6c, 0xe9, 0xb7,
	0x2e, 0xfc, 0xde, 0xc7, 0x5f, 0x9d, 0x9e, 0xdf, 0x91, 0x33, 0x59, 0x69, 0xfd, 0x7a, 0x54, 0x42,
	0x8f, 0x8e, 0x4a, 0xe8, 0xef, 0xa3, 0x12, 0xfa, 0xfe, 0xb8, 0x34, 0xf7, 0xe8, 0xb8, 0x34, 0xf7,
	0xd7, 0x71, 0x69, 0x0e, 0x2e, 0x79, 0x81, 0x96, 0xff, 0x13, 0xf4, 0x65, 0xb9, 0xe5, 0xf1, 0x6f,
	0xbb, 0x35, 0xab, 0x1e, 0x3c, 0x50, 0xd8, 0xd6, 0xbc, 0x40, 0x25, 0xfd, 0xae, 0x4f, 0x28, 0x1a,
	0x66, 0x6d, 0x5e, 0xfc, 0xc7, 0x7f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xa3, 0xb1,
	0xf0, 0x8c, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// LedgerClass retrieves a ledger class by its ID.
	LedgerClass(ctx context.Context, in *QueryLedgerClassRequest, opts ...grpc.CallOption) (*QueryLedgerClassResponse, error)
	// LedgerClassEntryTypes retrieves all entry types for a ledger class.
	LedgerClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error)
	// LedgerClassStatusTypes retrieves all status types for a ledger class.
	LedgerClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error)
	// LedgerClassBucketTypes retrieves all bucket types for a ledger class.
	LedgerClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error)
	// Ledger retrieves a ledger by its key.
	Ledger(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error)
	// LedgerEntries retrieves all entries for a ledger.
	LedgerEntries(ctx context.Context, in *QueryLedgerEntriesRequest, opts ...grpc.CallOption) (*QueryLedgerEntriesResponse, error)
	// LedgerEntry returns a specific ledger entry for an NFT.
	LedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error)
	// BalancesAsOf returns the balances for a specific NFT as of a given date.
	BalancesAsOf(ctx context.Context, in *QueryBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryBalancesAsOfResponse, error)
	// Settlements retrieves all settlements for a ledger.
	Settlements(ctx context.Context, in *QuerySettlementsRequest, opts ...grpc.CallOption) (*QuerySettlementsResponse, error)
	// SettlementsByCorrelationId retrieves settlements by correlation ID.
	SettlementsByCorrelationId(ctx context.Context, in *QuerySettlementsByCorrelationIdRequest, opts ...grpc.CallOption) (*QuerySettlementsByCorrelationIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) LedgerClass(ctx context.Context, in *QueryLedgerClassRequest, opts ...grpc.CallOption) (*QueryLedgerClassResponse, error) {
	out := new(QueryLedgerClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error) {
	out := new(QueryLedgerClassEntryTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassEntryTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error) {
	out := new(QueryLedgerClassStatusTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassStatusTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error) {
	out := new(QueryLedgerClassBucketTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassBucketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ledger(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error) {
	out := new(QueryLedgerResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/Ledger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerEntries(ctx context.Context, in *QueryLedgerEntriesRequest, opts ...grpc.CallOption) (*QueryLedgerEntriesResponse, error) {
	out := new(QueryLedgerEntriesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error) {
	out := new(QueryLedgerEntryResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalancesAsOf(ctx context.Context, in *QueryBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryBalancesAsOfResponse, error) {
	out := new(QueryBalancesAsOfResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/BalancesAsOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Settlements(ctx context.Context, in *QuerySettlementsRequest, opts ...grpc.CallOption) (*QuerySettlementsResponse, error) {
	out := new(QuerySettlementsResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/Settlements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SettlementsByCorrelationId(ctx context.Context, in *QuerySettlementsByCorrelationIdRequest, opts ...grpc.CallOption) (*QuerySettlementsByCorrelationIdResponse, error) {
	out := new(QuerySettlementsByCorrelationIdResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/SettlementsByCorrelationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// LedgerClass retrieves a ledger class by its ID.
	LedgerClass(context.Context, *QueryLedgerClassRequest) (*QueryLedgerClassResponse, error)
	// LedgerClassEntryTypes retrieves all entry types for a ledger class.
	LedgerClassEntryTypes(context.Context, *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error)
	// LedgerClassStatusTypes retrieves all status types for a ledger class.
	LedgerClassStatusTypes(context.Context, *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error)
	// LedgerClassBucketTypes retrieves all bucket types for a ledger class.
	LedgerClassBucketTypes(context.Context, *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error)
	// Ledger retrieves a ledger by its key.
	Ledger(context.Context, *QueryLedgerRequest) (*QueryLedgerResponse, error)
	// LedgerEntries retrieves all entries for a ledger.
	LedgerEntries(context.Context, *QueryLedgerEntriesRequest) (*QueryLedgerEntriesResponse, error)
	// LedgerEntry returns a specific ledger entry for an NFT.
	LedgerEntry(context.Context, *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error)
	// BalancesAsOf returns the balances for a specific NFT as of a given date.
	BalancesAsOf(context.Context, *QueryBalancesAsOfRequest) (*QueryBalancesAsOfResponse, error)
	// Settlements retrieves all settlements for a ledger.
	Settlements(context.Context, *QuerySettlementsRequest) (*QuerySettlementsResponse, error)
	// SettlementsByCorrelationId retrieves settlements by correlation ID.
	SettlementsByCorrelationId(context.Context, *QuerySettlementsByCorrelationIdRequest) (*QuerySettlementsByCorrelationIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) LedgerClass(ctx context.Context, req *QueryLedgerClassRequest) (*QueryLedgerClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClass not implemented")
}
func (*UnimplementedQueryServer) LedgerClassEntryTypes(ctx context.Context, req *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassEntryTypes not implemented")
}
func (*UnimplementedQueryServer) LedgerClassStatusTypes(ctx context.Context, req *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassStatusTypes not implemented")
}
func (*UnimplementedQueryServer) LedgerClassBucketTypes(ctx context.Context, req *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassBucketTypes not implemented")
}
func (*UnimplementedQueryServer) Ledger(ctx context.Context, req *QueryLedgerRequest) (*QueryLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ledger not implemented")
}
func (*UnimplementedQueryServer) LedgerEntries(ctx context.Context, req *QueryLedgerEntriesRequest) (*QueryLedgerEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerEntries not implemented")
}
func (*UnimplementedQueryServer) LedgerEntry(ctx context.Context, req *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerEntry not implemented")
}
func (*UnimplementedQueryServer) BalancesAsOf(ctx context.Context, req *QueryBalancesAsOfRequest) (*QueryBalancesAsOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalancesAsOf not implemented")
}
func (*UnimplementedQueryServer) Settlements(ctx context.Context, req *QuerySettlementsRequest) (*QuerySettlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settlements not implemented")
}
func (*UnimplementedQueryServer) SettlementsByCorrelationId(ctx context.Context, req *QuerySettlementsByCorrelationIdRequest) (*QuerySettlementsByCorrelationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettlementsByCorrelationId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_LedgerClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClass(ctx, req.(*QueryLedgerClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassEntryTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassEntryTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassEntryTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassEntryTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassEntryTypes(ctx, req.(*QueryLedgerClassEntryTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassStatusTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassStatusTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassStatusTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassStatusTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassStatusTypes(ctx, req.(*QueryLedgerClassStatusTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassBucketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassBucketTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassBucketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassBucketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassBucketTypes(ctx, req.(*QueryLedgerClassBucketTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ledger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ledger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/Ledger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ledger(ctx, req.(*QueryLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerEntries(ctx, req.(*QueryLedgerEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerEntry(ctx, req.(*QueryLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalancesAsOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalancesAsOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalancesAsOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/BalancesAsOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalancesAsOf(ctx, req.(*QueryBalancesAsOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Settlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySettlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Settlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/Settlements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Settlements(ctx, req.(*QuerySettlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SettlementsByCorrelationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySettlementsByCorrelationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SettlementsByCorrelationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/SettlementsByCorrelationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SettlementsByCorrelationId(ctx, req.(*QuerySettlementsByCorrelationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LedgerClass",
			Handler:    _Query_LedgerClass_Handler,
		},
		{
			MethodName: "LedgerClassEntryTypes",
			Handler:    _Query_LedgerClassEntryTypes_Handler,
		},
		{
			MethodName: "LedgerClassStatusTypes",
			Handler:    _Query_LedgerClassStatusTypes_Handler,
		},
		{
			MethodName: "LedgerClassBucketTypes",
			Handler:    _Query_LedgerClassBucketTypes_Handler,
		},
		{
			MethodName: "Ledger",
			Handler:    _Query_Ledger_Handler,
		},
		{
			MethodName: "LedgerEntries",
			Handler:    _Query_LedgerEntries_Handler,
		},
		{
			MethodName: "LedgerEntry",
			Handler:    _Query_LedgerEntry_Handler,
		},
		{
			MethodName: "BalancesAsOf",
			Handler:    _Query_BalancesAsOf_Handler,
		},
		{
			MethodName: "Settlements",
			Handler:    _Query_Settlements_Handler,
		},
		{
			MethodName: "SettlementsByCorrelationId",
			Handler:    _Query_SettlementsByCorrelationId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/query.proto",
}

func (m *QueryLedgerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalancesAsOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalancesAsOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalancesAsOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsOfDate) > 0 {
		i -= len(m.AsOfDate)
		copy(dAtA[i:], m.AsOfDate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AsOfDate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalancesAsOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalancesAsOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalancesAsOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balances != nil {
		{
			size, err := m.Balances.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for iNdEx := len(m.EntryTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntryTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for iNdEx := len(m.StatusTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for iNdEx := len(m.BucketTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BucketTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LedgerClass != nil {
		{
			size, err := m.LedgerClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySettlementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySettlementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settlements) > 0 {
		for iNdEx := len(m.Settlements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settlements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySettlementsByCorrelationIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementsByCorrelationIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementsByCorrelationIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySettlementsByCorrelationIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySettlementsByCorrelationIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySettlementsByCorrelationIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settlement != nil {
		{
			size, err := m.Settlement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLedgerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalancesAsOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AsOfDate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalancesAsOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balances != nil {
		l = m.Balances.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for _, e := range m.EntryTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassStatusTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassStatusTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for _, e := range m.StatusTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassBucketTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassBucketTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for _, e := range m.BucketTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerClass != nil {
		l = m.LedgerClass.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySettlementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySettlementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settlements) > 0 {
		for _, e := range m.Settlements {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySettlementsByCorrelationIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySettlementsByCorrelationIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settlement != nil {
		l = m.Settlement.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLedgerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ledger == nil {
				m.Ledger = &Ledger{}
			}
			if err := m.Ledger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LedgerEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalancesAsOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalancesAsOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalancesAsOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsOfDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalancesAsOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalancesAsOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalancesAsOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balances == nil {
				m.Balances = &Balances{}
			}
			if err := m.Balances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryTypes = append(m.EntryTypes, &LedgerClassEntryType{})
			if err := m.EntryTypes[len(m.EntryTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusTypes = append(m.StatusTypes, &LedgerClassStatusType{})
			if err := m.StatusTypes[len(m.StatusTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketTypes = append(m.BucketTypes, &LedgerClassBucketType{})
			if err := m.BucketTypes[len(m.BucketTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LedgerClass == nil {
				m.LedgerClass = &LedgerClass{}
			}
			if err := m.LedgerClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settlements = append(m.Settlements, &StoredSettlementInstructions{})
			if err := m.Settlements[len(m.Settlements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementsByCorrelationIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementsByCorrelationIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementsByCorrelationIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySettlementsByCorrelationIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySettlementsByCorrelationIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySettlementsByCorrelationIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settlement == nil {
				m.Settlement = &StoredSettlementInstructions{}
			}
			if err := m.Settlement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
