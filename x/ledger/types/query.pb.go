// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryLedgerClassRequest
type QueryLedgerClassRequest struct {
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassRequest) Reset()         { *m = QueryLedgerClassRequest{} }
func (m *QueryLedgerClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassRequest) ProtoMessage()    {}
func (*QueryLedgerClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{0}
}
func (m *QueryLedgerClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassRequest.Merge(m, src)
}
func (m *QueryLedgerClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassRequest proto.InternalMessageInfo

func (m *QueryLedgerClassRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassResponse
type QueryLedgerClassResponse struct {
	LedgerClass *LedgerClass `protobuf:"bytes,1,opt,name=ledger_class,json=ledgerClass,proto3" json:"ledger_class,omitempty"`
}

func (m *QueryLedgerClassResponse) Reset()         { *m = QueryLedgerClassResponse{} }
func (m *QueryLedgerClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassResponse) ProtoMessage()    {}
func (*QueryLedgerClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{1}
}
func (m *QueryLedgerClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassResponse.Merge(m, src)
}
func (m *QueryLedgerClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassResponse proto.InternalMessageInfo

func (m *QueryLedgerClassResponse) GetLedgerClass() *LedgerClass {
	if m != nil {
		return m.LedgerClass
	}
	return nil
}

// QueryLedgerClassEntryTypesRequest
type QueryLedgerClassEntryTypesRequest struct {
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassEntryTypesRequest) Reset()         { *m = QueryLedgerClassEntryTypesRequest{} }
func (m *QueryLedgerClassEntryTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{2}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassEntryTypesResponse
type QueryLedgerClassEntryTypesResponse struct {
	EntryTypes []*LedgerClassEntryType `protobuf:"bytes,1,rep,name=entry_types,json=entryTypes,proto3" json:"entry_types,omitempty"`
}

func (m *QueryLedgerClassEntryTypesResponse) Reset()         { *m = QueryLedgerClassEntryTypesResponse{} }
func (m *QueryLedgerClassEntryTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{3}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesResponse) GetEntryTypes() []*LedgerClassEntryType {
	if m != nil {
		return m.EntryTypes
	}
	return nil
}

// QueryLedgerClassStatusTypesRequest
type QueryLedgerClassStatusTypesRequest struct {
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassStatusTypesRequest) Reset()         { *m = QueryLedgerClassStatusTypesRequest{} }
func (m *QueryLedgerClassStatusTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{4}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassStatusTypesResponse
type QueryLedgerClassStatusTypesResponse struct {
	StatusTypes []*LedgerClassStatusType `protobuf:"bytes,1,rep,name=status_types,json=statusTypes,proto3" json:"status_types,omitempty"`
}

func (m *QueryLedgerClassStatusTypesResponse) Reset()         { *m = QueryLedgerClassStatusTypesResponse{} }
func (m *QueryLedgerClassStatusTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{5}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesResponse) GetStatusTypes() []*LedgerClassStatusType {
	if m != nil {
		return m.StatusTypes
	}
	return nil
}

// QueryLedgerClassBucketTypesRequest
type QueryLedgerClassBucketTypesRequest struct {
	LedgerClassId string `protobuf:"bytes,1,opt,name=ledger_class_id,json=ledgerClassId,proto3" json:"ledger_class_id,omitempty"`
}

func (m *QueryLedgerClassBucketTypesRequest) Reset()         { *m = QueryLedgerClassBucketTypesRequest{} }
func (m *QueryLedgerClassBucketTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{6}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesRequest) GetLedgerClassId() string {
	if m != nil {
		return m.LedgerClassId
	}
	return ""
}

// QueryLedgerClassBucketTypesResponse
type QueryLedgerClassBucketTypesResponse struct {
	BucketTypes []*LedgerClassBucketType `protobuf:"bytes,1,rep,name=bucket_types,json=bucketTypes,proto3" json:"bucket_types,omitempty"`
}

func (m *QueryLedgerClassBucketTypesResponse) Reset()         { *m = QueryLedgerClassBucketTypesResponse{} }
func (m *QueryLedgerClassBucketTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{7}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesResponse) GetBucketTypes() []*LedgerClassBucketType {
	if m != nil {
		return m.BucketTypes
	}
	return nil
}

// QueryLedgerRequest
type QueryLedgerRequest struct {
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLedgerRequest) Reset()         { *m = QueryLedgerRequest{} }
func (m *QueryLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerRequest) ProtoMessage()    {}
func (*QueryLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{8}
}
func (m *QueryLedgerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerRequest.Merge(m, src)
}
func (m *QueryLedgerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerRequest proto.InternalMessageInfo

func (m *QueryLedgerRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QueryLedgerResponse
type QueryLedgerResponse struct {
	Ledger *Ledger `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
}

func (m *QueryLedgerResponse) Reset()         { *m = QueryLedgerResponse{} }
func (m *QueryLedgerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerResponse) ProtoMessage()    {}
func (*QueryLedgerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{9}
}
func (m *QueryLedgerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerResponse.Merge(m, src)
}
func (m *QueryLedgerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerResponse proto.InternalMessageInfo

func (m *QueryLedgerResponse) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

// QueryLedgerEntriesRequest
type QueryLedgerEntriesRequest struct {
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLedgerEntriesRequest) Reset()         { *m = QueryLedgerEntriesRequest{} }
func (m *QueryLedgerEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntriesRequest) ProtoMessage()    {}
func (*QueryLedgerEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{10}
}
func (m *QueryLedgerEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntriesRequest.Merge(m, src)
}
func (m *QueryLedgerEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntriesRequest proto.InternalMessageInfo

func (m *QueryLedgerEntriesRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QueryLedgerEntriesResponse
type QueryLedgerEntriesResponse struct {
	Entries []*LedgerEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueryLedgerEntriesResponse) Reset()         { *m = QueryLedgerEntriesResponse{} }
func (m *QueryLedgerEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntriesResponse) ProtoMessage()    {}
func (*QueryLedgerEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{11}
}
func (m *QueryLedgerEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntriesResponse.Merge(m, src)
}
func (m *QueryLedgerEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntriesResponse proto.InternalMessageInfo

func (m *QueryLedgerEntriesResponse) GetEntries() []*LedgerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// QueryLedgerEntryRequest
type QueryLedgerEntryRequest struct {
	Key           *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CorrelationId string     `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *QueryLedgerEntryRequest) Reset()         { *m = QueryLedgerEntryRequest{} }
func (m *QueryLedgerEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryRequest) ProtoMessage()    {}
func (*QueryLedgerEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{12}
}
func (m *QueryLedgerEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryRequest.Merge(m, src)
}
func (m *QueryLedgerEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryRequest proto.InternalMessageInfo

func (m *QueryLedgerEntryRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryLedgerEntryRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// QueryLedgerEntryResponse
type QueryLedgerEntryResponse struct {
	Entry *LedgerEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *QueryLedgerEntryResponse) Reset()         { *m = QueryLedgerEntryResponse{} }
func (m *QueryLedgerEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryResponse) ProtoMessage()    {}
func (*QueryLedgerEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{13}
}
func (m *QueryLedgerEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryResponse.Merge(m, src)
}
func (m *QueryLedgerEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryResponse proto.InternalMessageInfo

func (m *QueryLedgerEntryResponse) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// QueryLedgerBalancesAsOfRequest
type QueryLedgerBalancesAsOfRequest struct {
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Format: YYYY-MM-DD
	AsOfDate string `protobuf:"bytes,2,opt,name=as_of_date,json=asOfDate,proto3" json:"as_of_date,omitempty"`
}

func (m *QueryLedgerBalancesAsOfRequest) Reset()         { *m = QueryLedgerBalancesAsOfRequest{} }
func (m *QueryLedgerBalancesAsOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerBalancesAsOfRequest) ProtoMessage()    {}
func (*QueryLedgerBalancesAsOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{14}
}
func (m *QueryLedgerBalancesAsOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerBalancesAsOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerBalancesAsOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerBalancesAsOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerBalancesAsOfRequest.Merge(m, src)
}
func (m *QueryLedgerBalancesAsOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerBalancesAsOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerBalancesAsOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerBalancesAsOfRequest proto.InternalMessageInfo

func (m *QueryLedgerBalancesAsOfRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryLedgerBalancesAsOfRequest) GetAsOfDate() string {
	if m != nil {
		return m.AsOfDate
	}
	return ""
}

// QueryLedgerBalancesAsOfResponse
type QueryLedgerBalancesAsOfResponse struct {
	BucketBalances *BucketBalances `protobuf:"bytes,1,opt,name=bucket_balances,json=bucketBalances,proto3" json:"bucket_balances,omitempty"`
}

func (m *QueryLedgerBalancesAsOfResponse) Reset()         { *m = QueryLedgerBalancesAsOfResponse{} }
func (m *QueryLedgerBalancesAsOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerBalancesAsOfResponse) ProtoMessage()    {}
func (*QueryLedgerBalancesAsOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{15}
}
func (m *QueryLedgerBalancesAsOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerBalancesAsOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerBalancesAsOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerBalancesAsOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerBalancesAsOfResponse.Merge(m, src)
}
func (m *QueryLedgerBalancesAsOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerBalancesAsOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerBalancesAsOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerBalancesAsOfResponse proto.InternalMessageInfo

func (m *QueryLedgerBalancesAsOfResponse) GetBucketBalances() *BucketBalances {
	if m != nil {
		return m.BucketBalances
	}
	return nil
}

// QueryLedgerSettlementsRequest
type QueryLedgerSettlementsRequest struct {
	Key *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryLedgerSettlementsRequest) Reset()         { *m = QueryLedgerSettlementsRequest{} }
func (m *QueryLedgerSettlementsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerSettlementsRequest) ProtoMessage()    {}
func (*QueryLedgerSettlementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{16}
}
func (m *QueryLedgerSettlementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerSettlementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerSettlementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerSettlementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerSettlementsRequest.Merge(m, src)
}
func (m *QueryLedgerSettlementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerSettlementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerSettlementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerSettlementsRequest proto.InternalMessageInfo

func (m *QueryLedgerSettlementsRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

// QueryLedgerSettlementsResponse
type QueryLedgerSettlementsResponse struct {
	Settlements []*StoredSettlementInstructions `protobuf:"bytes,1,rep,name=settlements,proto3" json:"settlements,omitempty"`
}

func (m *QueryLedgerSettlementsResponse) Reset()         { *m = QueryLedgerSettlementsResponse{} }
func (m *QueryLedgerSettlementsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerSettlementsResponse) ProtoMessage()    {}
func (*QueryLedgerSettlementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{17}
}
func (m *QueryLedgerSettlementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerSettlementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerSettlementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerSettlementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerSettlementsResponse.Merge(m, src)
}
func (m *QueryLedgerSettlementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerSettlementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerSettlementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerSettlementsResponse proto.InternalMessageInfo

func (m *QueryLedgerSettlementsResponse) GetSettlements() []*StoredSettlementInstructions {
	if m != nil {
		return m.Settlements
	}
	return nil
}

// QueryLedgerSettlementsByCorrelationIdRequest
type QueryLedgerSettlementsByCorrelationIdRequest struct {
	Key           *LedgerKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	CorrelationId string     `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) Reset() {
	*m = QueryLedgerSettlementsByCorrelationIdRequest{}
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLedgerSettlementsByCorrelationIdRequest) ProtoMessage() {}
func (*QueryLedgerSettlementsByCorrelationIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{18}
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdRequest.Merge(m, src)
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdRequest proto.InternalMessageInfo

func (m *QueryLedgerSettlementsByCorrelationIdRequest) GetKey() *LedgerKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// QueryLedgerSettlementsByCorrelationIdResponse
type QueryLedgerSettlementsByCorrelationIdResponse struct {
	Settlement *StoredSettlementInstructions `protobuf:"bytes,1,opt,name=settlement,proto3" json:"settlement,omitempty"`
}

func (m *QueryLedgerSettlementsByCorrelationIdResponse) Reset() {
	*m = QueryLedgerSettlementsByCorrelationIdResponse{}
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLedgerSettlementsByCorrelationIdResponse) ProtoMessage() {}
func (*QueryLedgerSettlementsByCorrelationIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{19}
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdResponse.Merge(m, src)
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerSettlementsByCorrelationIdResponse proto.InternalMessageInfo

func (m *QueryLedgerSettlementsByCorrelationIdResponse) GetSettlement() *StoredSettlementInstructions {
	if m != nil {
		return m.Settlement
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLedgerClassRequest)(nil), "provenance.ledger.v1.QueryLedgerClassRequest")
	proto.RegisterType((*QueryLedgerClassResponse)(nil), "provenance.ledger.v1.QueryLedgerClassResponse")
	proto.RegisterType((*QueryLedgerClassEntryTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesRequest")
	proto.RegisterType((*QueryLedgerClassEntryTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesResponse")
	proto.RegisterType((*QueryLedgerClassStatusTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesRequest")
	proto.RegisterType((*QueryLedgerClassStatusTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesResponse")
	proto.RegisterType((*QueryLedgerClassBucketTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesRequest")
	proto.RegisterType((*QueryLedgerClassBucketTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesResponse")
	proto.RegisterType((*QueryLedgerRequest)(nil), "provenance.ledger.v1.QueryLedgerRequest")
	proto.RegisterType((*QueryLedgerResponse)(nil), "provenance.ledger.v1.QueryLedgerResponse")
	proto.RegisterType((*QueryLedgerEntriesRequest)(nil), "provenance.ledger.v1.QueryLedgerEntriesRequest")
	proto.RegisterType((*QueryLedgerEntriesResponse)(nil), "provenance.ledger.v1.QueryLedgerEntriesResponse")
	proto.RegisterType((*QueryLedgerEntryRequest)(nil), "provenance.ledger.v1.QueryLedgerEntryRequest")
	proto.RegisterType((*QueryLedgerEntryResponse)(nil), "provenance.ledger.v1.QueryLedgerEntryResponse")
	proto.RegisterType((*QueryLedgerBalancesAsOfRequest)(nil), "provenance.ledger.v1.QueryLedgerBalancesAsOfRequest")
	proto.RegisterType((*QueryLedgerBalancesAsOfResponse)(nil), "provenance.ledger.v1.QueryLedgerBalancesAsOfResponse")
	proto.RegisterType((*QueryLedgerSettlementsRequest)(nil), "provenance.ledger.v1.QueryLedgerSettlementsRequest")
	proto.RegisterType((*QueryLedgerSettlementsResponse)(nil), "provenance.ledger.v1.QueryLedgerSettlementsResponse")
	proto.RegisterType((*QueryLedgerSettlementsByCorrelationIdRequest)(nil), "provenance.ledger.v1.QueryLedgerSettlementsByCorrelationIdRequest")
	proto.RegisterType((*QueryLedgerSettlementsByCorrelationIdResponse)(nil), "provenance.ledger.v1.QueryLedgerSettlementsByCorrelationIdResponse")
}

func init() { proto.RegisterFile("provenance/ledger/v1/query.proto", fileDescriptor_7955b82df44e45aa) }

var fileDescriptor_7955b82df44e45aa = []byte{
	// 1014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0xce, 0xa6, 0x6a, 0x80, 0x71, 0x5f, 0x60, 0x79, 0x69, 0x38, 0x05, 0x37, 0x59, 0x5e, 0x14,
	0xa0, 0xb9, 0x23, 0x6e, 0xaa, 0x52, 0x8a, 0x80, 0x38, 0x85, 0x2a, 0x24, 0xb4, 0x70, 0x09, 0x20,
	0x5e, 0x2a, 0x73, 0xb6, 0xd7, 0xe6, 0x14, 0xf7, 0xce, 0xb9, 0x5d, 0x47, 0x58, 0x51, 0xbe, 0xc0,
	0x17, 0x3e, 0x56, 0xe2, 0x27, 0x54, 0xfc, 0x0a, 0xfe, 0x00, 0x12, 0x42, 0x2a, 0xf0, 0x85, 0x6f,
	0xa0, 0x84, 0x1f, 0x82, 0x6e, 0x6f, 0xed, 0xdb, 0xcb, 0x6d, 0x7c, 0x77, 0x76, 0xfb, 0x31, 0x73,
	0x33, 0xcf, 0x3c, 0xcf, 0x68, 0x76, 0x66, 0x62, 0x98, 0xef, 0x06, 0xfe, 0x1e, 0xf5, 0x1c, 0xaf,
	0x41, 0xad, 0x0e, 0x6d, 0xb6, 0x69, 0x60, 0xed, 0x2d, 0x5b, 0xbb, 0x3d, 0x1a, 0xf4, 0xcd, 0x6e,
	0xe0, 0x73, 0x1f, 0x3f, 0x13, 0x7b, 0x98, 0x91, 0x87, 0xb9, 0xb7, 0x6c, 0xcc, 0xb5, 0x7d, 0xbf,
	0xdd, 0xa1, 0x96, 0xd3, 0x75, 0x2d, 0xc7, 0xf3, 0x7c, 0xee, 0x70, 0xd7, 0xf7, 0x58, 0x14, 0x63,
	0x2c, 0x68, 0x51, 0x65, 0x74, 0xe4, 0x72, 0x69, 0x84, 0x4b, 0x8d, 0x51, 0xce, 0x3b, 0xf4, 0x2e,
	0xf5, 0x78, 0xe4, 0x4d, 0x56, 0xe1, 0xc2, 0x27, 0x21, 0xa7, 0x4d, 0xf1, 0x7d, 0xad, 0xe3, 0x30,
	0x66, 0xd3, 0xdd, 0x1e, 0x65, 0x1c, 0xbf, 0x02, 0xe7, 0x65, 0x54, 0x23, 0x34, 0xd7, 0xdc, 0xe6,
	0x2c, 0x9a, 0x47, 0x8b, 0x4f, 0xd8, 0x67, 0x3b, 0xb1, 0xf3, 0x7a, 0x93, 0x7c, 0x03, 0xb3, 0x69,
	0x08, 0xd6, 0xf5, 0x3d, 0x46, 0xf1, 0x0d, 0x38, 0xa3, 0x62, 0x08, 0x80, 0x52, 0x65, 0xc1, 0xd4,
	0x49, 0x37, 0x55, 0x80, 0x92, 0x92, 0x83, 0x6c, 0xc0, 0xc2, 0xf1, 0x0c, 0xef, 0x7b, 0x3c, 0xe8,
	0x6f, 0xf7, 0xbb, 0xb4, 0x30, 0xdd, 0x5d, 0x20, 0xa3, 0xc0, 0x24, 0xf1, 0x0d, 0x28, 0xd1, 0xd0,
	0x5a, 0xe3, 0xa1, 0x79, 0x16, 0xcd, 0x9f, 0x5a, 0x2c, 0x55, 0x5e, 0xcb, 0xe4, 0x3d, 0x44, 0xb2,
	0x81, 0x0e, 0x41, 0xc9, 0x66, 0x3a, 0xe5, 0x16, 0x77, 0x78, 0x8f, 0x8d, 0x25, 0xa0, 0x07, 0x2f,
	0x8e, 0x44, 0x93, 0x0a, 0x6e, 0xc1, 0x19, 0x26, 0xcc, 0x09, 0x09, 0xaf, 0x67, 0x4a, 0x88, 0xb1,
	0xec, 0x12, 0x8b, 0x71, 0x75, 0x22, 0xaa, 0xbd, 0xc6, 0x0e, 0xe5, 0x0f, 0x4b, 0x44, 0x02, 0x2d,
	0x16, 0x51, 0x17, 0xe6, 0x82, 0x22, 0x62, 0x2c, 0xbb, 0x54, 0x8f, 0x71, 0xc9, 0x4d, 0xc0, 0x4a,
	0xda, 0x01, 0xe9, 0x65, 0x38, 0xb5, 0x43, 0xfb, 0xb2, 0x39, 0x2f, 0x8e, 0x02, 0xdf, 0xa0, 0x7d,
	0x3b, 0xf4, 0x25, 0x1b, 0xf0, 0x74, 0x02, 0x48, 0xf2, 0x5d, 0x81, 0x99, 0x28, 0x44, 0x82, 0xcd,
	0x8d, 0x02, 0xb3, 0xa5, 0x2f, 0xb9, 0x05, 0xcf, 0x2b, 0x60, 0x61, 0x0f, 0xb9, 0x71, 0x45, 0xc7,
	0x20, 0xf7, 0x05, 0x18, 0x3a, 0x3c, 0xc9, 0xf1, 0x3a, 0x3c, 0x46, 0x23, 0x93, 0x2c, 0xe7, 0xc8,
	0xe7, 0x28, 0x3a, 0xda, 0x1e, 0x44, 0x10, 0x96, 0x98, 0x17, 0xd1, 0xc7, 0xb1, 0x89, 0xe2, 0x97,
	0xe1, 0x5c, 0xc3, 0x0f, 0x02, 0xda, 0x11, 0x43, 0x2e, 0x6c, 0x96, 0xe9, 0xa8, 0x59, 0x14, 0xeb,
	0x7a, 0x93, 0x6c, 0x25, 0x26, 0x8c, 0x4c, 0x2a, 0xd5, 0x5c, 0x85, 0xd3, 0xe2, 0xa5, 0xe5, 0x19,
	0x2d, 0x51, 0x64, 0xe4, 0x4f, 0x76, 0xa1, 0xac, 0x80, 0x56, 0x9d, 0x4e, 0x18, 0xc2, 0x56, 0xd9,
	0xed, 0xd6, 0x04, 0x82, 0xe6, 0x00, 0x1c, 0x56, 0xf3, 0x5b, 0xb5, 0xa6, 0xc3, 0xa9, 0x14, 0xf3,
	0xb8, 0xc3, 0x6e, 0xb7, 0x6e, 0x38, 0x9c, 0x92, 0x2e, 0x5c, 0x3c, 0x31, 0xa5, 0x94, 0xf3, 0x11,
	0x9c, 0x97, 0x0d, 0x5f, 0x97, 0x9f, 0x65, 0xfe, 0x97, 0xf4, 0xf9, 0xa3, 0x46, 0x1f, 0x40, 0xd9,
	0xe7, 0xea, 0x89, 0xbf, 0x89, 0x0d, 0x2f, 0x28, 0x19, 0xb7, 0x86, 0xd3, 0x7f, 0x92, 0xee, 0xda,
	0x4b, 0x14, 0x2e, 0x81, 0x29, 0x45, 0x6c, 0x43, 0x29, 0x5e, 0x34, 0x83, 0x2e, 0xab, 0xe8, 0xc1,
	0xb7, 0xb8, 0x1f, 0xd0, 0x66, 0x8c, 0xb2, 0xee, 0x31, 0x1e, 0xf4, 0x1a, 0x62, 0xe9, 0xd9, 0x2a,
	0x0c, 0xf9, 0x11, 0xc1, 0x25, 0x7d, 0xe2, 0x6a, 0x7f, 0x4d, 0xed, 0x97, 0x47, 0xdf, 0x90, 0x3f,
	0x20, 0x58, 0xca, 0x49, 0x45, 0x96, 0xc4, 0x06, 0x88, 0xb5, 0x48, 0x4a, 0xe3, 0x54, 0x44, 0x41,
	0xa9, 0xdc, 0x7f, 0x12, 0x4e, 0x0b, 0x16, 0xf8, 0x3e, 0x82, 0x92, 0x32, 0xfd, 0xf0, 0x92, 0x1e,
	0xf9, 0x84, 0x4d, 0x6f, 0x98, 0x79, 0xdd, 0x23, 0x31, 0xe4, 0xca, 0xf7, 0x7f, 0xfd, 0xf7, 0xd3,
	0xb4, 0x85, 0x97, 0x2c, 0xed, 0xad, 0x21, 0x26, 0xbf, 0xb5, 0x7f, 0x6c, 0x0f, 0x1c, 0xe0, 0xdf,
	0x11, 0x3c, 0xab, 0xdd, 0xba, 0xf8, 0x6a, 0x3e, 0x02, 0xa9, 0xa5, 0x6f, 0xbc, 0x59, 0x3c, 0x50,
	0x6a, 0x58, 0x15, 0x1a, 0xae, 0xe3, 0x6b, 0x85, 0x34, 0x58, 0xca, 0x51, 0x80, 0xff, 0x40, 0xf0,
	0x9c, 0x7e, 0x09, 0xe3, 0x9c, 0xbc, 0xd2, 0x57, 0x80, 0x71, 0x6d, 0x8c, 0x48, 0x29, 0xa9, 0x2a,
	0x24, 0xbd, 0x8d, 0xdf, 0x2a, 0x26, 0x49, 0xbd, 0x12, 0x8e, 0x6b, 0x52, 0x76, 0x72, 0x5e, 0x4d,
	0xe9, 0xa3, 0x20, 0xaf, 0x26, 0xcd, 0x01, 0x30, 0xae, 0x26, 0xf5, 0x68, 0xc0, 0x3f, 0x23, 0x98,
	0x89, 0xd2, 0xe0, 0xc5, 0x4c, 0x26, 0x03, 0xce, 0xaf, 0xe6, 0xf0, 0x94, 0x1c, 0x3f, 0x10, 0x1c,
	0xdf, 0xc3, 0xef, 0x9c, 0xc0, 0xd1, 0xf7, 0x5a, 0x6e, 0xdb, 0xda, 0xdf, 0xa1, 0x7d, 0xd3, 0x61,
	0x8c, 0x72, 0x85, 0xa7, 0x30, 0x7a, 0x2d, 0x2e, 0xde, 0xc7, 0x2f, 0x08, 0xce, 0x26, 0x56, 0x36,
	0xb6, 0x32, 0x49, 0x24, 0x8f, 0x05, 0xe3, 0x8d, 0xfc, 0x01, 0x92, 0xfc, 0x4d, 0x41, 0x7e, 0x15,
	0xbf, 0xab, 0x27, 0x2f, 0xf7, 0x7e, 0x0e, 0xf6, 0xbf, 0x0d, 0x67, 0x90, 0x78, 0x6d, 0x39, 0x66,
	0x90, 0x7a, 0x3d, 0xe4, 0x98, 0x41, 0x89, 0xbd, 0x4f, 0xee, 0x08, 0xde, 0x9f, 0xe3, 0x4f, 0xad,
	0x11, 0xff, 0xef, 0x64, 0xd3, 0x8e, 0x1e, 0xb4, 0xb5, 0x9f, 0x9c, 0xfa, 0x07, 0xf8, 0x1f, 0x04,
	0x38, 0xbd, 0xa6, 0xf1, 0x4a, 0x26, 0x4b, 0xcd, 0x21, 0x61, 0x5c, 0x29, 0x18, 0x25, 0x25, 0x7e,
	0x2d, 0x24, 0x7e, 0x86, 0xb7, 0x27, 0x94, 0x38, 0xb8, 0x24, 0xac, 0xfd, 0xf8, 0x36, 0x39, 0xc0,
	0x7f, 0x22, 0x78, 0x2a, 0xb5, 0xbe, 0xf0, 0xe5, 0x4c, 0xaa, 0xe9, 0x23, 0xc2, 0x58, 0x29, 0x16,
	0x24, 0xe5, 0xd9, 0x42, 0xde, 0x26, 0xfe, 0x70, 0x42, 0x79, 0xca, 0x8d, 0x80, 0xef, 0x4d, 0xc3,
	0x7c, 0xd6, 0x4e, 0xc6, 0xd5, 0x22, 0x74, 0xf5, 0xb7, 0x85, 0xb1, 0x36, 0x11, 0x86, 0xac, 0x40,
	0x43, 0x54, 0xe0, 0x0e, 0xfe, 0xea, 0xe1, 0x55, 0x20, 0xd5, 0xc9, 0xd5, 0xf6, 0xaf, 0x87, 0x65,
	0xf4, 0xe0, 0xb0, 0x8c, 0xfe, 0x3d, 0x2c, 0xa3, 0x7b, 0x47, 0xe5, 0xa9, 0x07, 0x47, 0xe5, 0xa9,
	0xbf, 0x8f, 0xca, 0x53, 0x70, 0xc1, 0xf5, 0xb5, 0x2a, 0x3e, 0x46, 0x5f, 0x56, 0xda, 0x2e, 0xff,
	0xb6, 0x57, 0x37, 0x1b, 0xfe, 0x5d, 0x85, 0xdb, 0x92, 0xeb, 0xab, 0x4c, 0xbf, 0x1b, 0x30, 0x14,
	0x63, 0xb6, 0x3e, 0x23, 0x7e, 0x51, 0xb8, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x22,
	0x17, 0x5e, 0xfa, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// LedgerClass returns the ledger class for a given ledger class id
	LedgerClass(ctx context.Context, in *QueryLedgerClassRequest, opts ...grpc.CallOption) (*QueryLedgerClassResponse, error)
	// LedgerClassEntryTypes returns the entry types for a given ledger class id
	LedgerClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error)
	// LedgerClassStatusTypes returns the status types for a given ledger class id
	LedgerClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error)
	// LedgerClassBucketTypes returns the bucket types for a given ledger class id
	LedgerClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error)
	// Ledger returns the ledger for a given ledger key
	Ledger(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error)
	// LedgerEntries returns the entries for a given ledger key
	LedgerEntries(ctx context.Context, in *QueryLedgerEntriesRequest, opts ...grpc.CallOption) (*QueryLedgerEntriesResponse, error)
	// LedgerEntry returns a specific ledger entry for an NFT
	LedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error)
	// LedgerBalancesAsOf returns the balances for a specific NFT as of a given date
	LedgerBalancesAsOf(ctx context.Context, in *QueryLedgerBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryLedgerBalancesAsOfResponse, error)
	// LedgerSettlements returns all settlements for a ledger
	LedgerSettlements(ctx context.Context, in *QueryLedgerSettlementsRequest, opts ...grpc.CallOption) (*QueryLedgerSettlementsResponse, error)
	// LedgerSettlementsByCorrelationId returns settlements by correlation id
	LedgerSettlementsByCorrelationId(ctx context.Context, in *QueryLedgerSettlementsByCorrelationIdRequest, opts ...grpc.CallOption) (*QueryLedgerSettlementsByCorrelationIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) LedgerClass(ctx context.Context, in *QueryLedgerClassRequest, opts ...grpc.CallOption) (*QueryLedgerClassResponse, error) {
	out := new(QueryLedgerClassResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error) {
	out := new(QueryLedgerClassEntryTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassEntryTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error) {
	out := new(QueryLedgerClassStatusTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassStatusTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error) {
	out := new(QueryLedgerClassBucketTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerClassBucketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ledger(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error) {
	out := new(QueryLedgerResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/Ledger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerEntries(ctx context.Context, in *QueryLedgerEntriesRequest, opts ...grpc.CallOption) (*QueryLedgerEntriesResponse, error) {
	out := new(QueryLedgerEntriesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error) {
	out := new(QueryLedgerEntryResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerBalancesAsOf(ctx context.Context, in *QueryLedgerBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryLedgerBalancesAsOfResponse, error) {
	out := new(QueryLedgerBalancesAsOfResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerBalancesAsOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerSettlements(ctx context.Context, in *QueryLedgerSettlementsRequest, opts ...grpc.CallOption) (*QueryLedgerSettlementsResponse, error) {
	out := new(QueryLedgerSettlementsResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerSettlements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LedgerSettlementsByCorrelationId(ctx context.Context, in *QueryLedgerSettlementsByCorrelationIdRequest, opts ...grpc.CallOption) (*QueryLedgerSettlementsByCorrelationIdResponse, error) {
	out := new(QueryLedgerSettlementsByCorrelationIdResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/LedgerSettlementsByCorrelationId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// LedgerClass returns the ledger class for a given ledger class id
	LedgerClass(context.Context, *QueryLedgerClassRequest) (*QueryLedgerClassResponse, error)
	// LedgerClassEntryTypes returns the entry types for a given ledger class id
	LedgerClassEntryTypes(context.Context, *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error)
	// LedgerClassStatusTypes returns the status types for a given ledger class id
	LedgerClassStatusTypes(context.Context, *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error)
	// LedgerClassBucketTypes returns the bucket types for a given ledger class id
	LedgerClassBucketTypes(context.Context, *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error)
	// Ledger returns the ledger for a given ledger key
	Ledger(context.Context, *QueryLedgerRequest) (*QueryLedgerResponse, error)
	// LedgerEntries returns the entries for a given ledger key
	LedgerEntries(context.Context, *QueryLedgerEntriesRequest) (*QueryLedgerEntriesResponse, error)
	// LedgerEntry returns a specific ledger entry for an NFT
	LedgerEntry(context.Context, *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error)
	// LedgerBalancesAsOf returns the balances for a specific NFT as of a given date
	LedgerBalancesAsOf(context.Context, *QueryLedgerBalancesAsOfRequest) (*QueryLedgerBalancesAsOfResponse, error)
	// LedgerSettlements returns all settlements for a ledger
	LedgerSettlements(context.Context, *QueryLedgerSettlementsRequest) (*QueryLedgerSettlementsResponse, error)
	// LedgerSettlementsByCorrelationId returns settlements by correlation id
	LedgerSettlementsByCorrelationId(context.Context, *QueryLedgerSettlementsByCorrelationIdRequest) (*QueryLedgerSettlementsByCorrelationIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) LedgerClass(ctx context.Context, req *QueryLedgerClassRequest) (*QueryLedgerClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClass not implemented")
}
func (*UnimplementedQueryServer) LedgerClassEntryTypes(ctx context.Context, req *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassEntryTypes not implemented")
}
func (*UnimplementedQueryServer) LedgerClassStatusTypes(ctx context.Context, req *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassStatusTypes not implemented")
}
func (*UnimplementedQueryServer) LedgerClassBucketTypes(ctx context.Context, req *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerClassBucketTypes not implemented")
}
func (*UnimplementedQueryServer) Ledger(ctx context.Context, req *QueryLedgerRequest) (*QueryLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ledger not implemented")
}
func (*UnimplementedQueryServer) LedgerEntries(ctx context.Context, req *QueryLedgerEntriesRequest) (*QueryLedgerEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerEntries not implemented")
}
func (*UnimplementedQueryServer) LedgerEntry(ctx context.Context, req *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerEntry not implemented")
}
func (*UnimplementedQueryServer) LedgerBalancesAsOf(ctx context.Context, req *QueryLedgerBalancesAsOfRequest) (*QueryLedgerBalancesAsOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerBalancesAsOf not implemented")
}
func (*UnimplementedQueryServer) LedgerSettlements(ctx context.Context, req *QueryLedgerSettlementsRequest) (*QueryLedgerSettlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerSettlements not implemented")
}
func (*UnimplementedQueryServer) LedgerSettlementsByCorrelationId(ctx context.Context, req *QueryLedgerSettlementsByCorrelationIdRequest) (*QueryLedgerSettlementsByCorrelationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LedgerSettlementsByCorrelationId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_LedgerClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClass(ctx, req.(*QueryLedgerClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassEntryTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassEntryTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassEntryTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassEntryTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassEntryTypes(ctx, req.(*QueryLedgerClassEntryTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassStatusTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassStatusTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassStatusTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassStatusTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassStatusTypes(ctx, req.(*QueryLedgerClassStatusTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerClassBucketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassBucketTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerClassBucketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerClassBucketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerClassBucketTypes(ctx, req.(*QueryLedgerClassBucketTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ledger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ledger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/Ledger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ledger(ctx, req.(*QueryLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerEntries(ctx, req.(*QueryLedgerEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerEntry(ctx, req.(*QueryLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerBalancesAsOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerBalancesAsOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerBalancesAsOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerBalancesAsOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerBalancesAsOf(ctx, req.(*QueryLedgerBalancesAsOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerSettlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerSettlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerSettlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerSettlements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerSettlements(ctx, req.(*QueryLedgerSettlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LedgerSettlementsByCorrelationId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerSettlementsByCorrelationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LedgerSettlementsByCorrelationId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/LedgerSettlementsByCorrelationId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LedgerSettlementsByCorrelationId(ctx, req.(*QueryLedgerSettlementsByCorrelationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LedgerClass",
			Handler:    _Query_LedgerClass_Handler,
		},
		{
			MethodName: "LedgerClassEntryTypes",
			Handler:    _Query_LedgerClassEntryTypes_Handler,
		},
		{
			MethodName: "LedgerClassStatusTypes",
			Handler:    _Query_LedgerClassStatusTypes_Handler,
		},
		{
			MethodName: "LedgerClassBucketTypes",
			Handler:    _Query_LedgerClassBucketTypes_Handler,
		},
		{
			MethodName: "Ledger",
			Handler:    _Query_Ledger_Handler,
		},
		{
			MethodName: "LedgerEntries",
			Handler:    _Query_LedgerEntries_Handler,
		},
		{
			MethodName: "LedgerEntry",
			Handler:    _Query_LedgerEntry_Handler,
		},
		{
			MethodName: "LedgerBalancesAsOf",
			Handler:    _Query_LedgerBalancesAsOf_Handler,
		},
		{
			MethodName: "LedgerSettlements",
			Handler:    _Query_LedgerSettlements_Handler,
		},
		{
			MethodName: "LedgerSettlementsByCorrelationId",
			Handler:    _Query_LedgerSettlementsByCorrelationId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/query.proto",
}

func (m *QueryLedgerClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LedgerClass != nil {
		{
			size, err := m.LedgerClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for iNdEx := len(m.EntryTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntryTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for iNdEx := len(m.StatusTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LedgerClassId) > 0 {
		i -= len(m.LedgerClassId)
		copy(dAtA[i:], m.LedgerClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LedgerClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for iNdEx := len(m.BucketTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BucketTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerBalancesAsOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerBalancesAsOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerBalancesAsOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsOfDate) > 0 {
		i -= len(m.AsOfDate)
		copy(dAtA[i:], m.AsOfDate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AsOfDate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerBalancesAsOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerBalancesAsOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerBalancesAsOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BucketBalances != nil {
		{
			size, err := m.BucketBalances.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerSettlementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerSettlementsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerSettlementsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerSettlementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerSettlementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerSettlementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settlements) > 0 {
		for iNdEx := len(m.Settlements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Settlements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerSettlementsByCorrelationIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerSettlementsByCorrelationIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerSettlementsByCorrelationIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settlement != nil {
		{
			size, err := m.Settlement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLedgerClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LedgerClass != nil {
		l = m.LedgerClass.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for _, e := range m.EntryTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassStatusTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassStatusTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for _, e := range m.StatusTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassBucketTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LedgerClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassBucketTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for _, e := range m.BucketTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerBalancesAsOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AsOfDate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerBalancesAsOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BucketBalances != nil {
		l = m.BucketBalances.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerSettlementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerSettlementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Settlements) > 0 {
		for _, e := range m.Settlements {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerSettlementsByCorrelationIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerSettlementsByCorrelationIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settlement != nil {
		l = m.Settlement.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLedgerClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LedgerClass == nil {
				m.LedgerClass = &LedgerClass{}
			}
			if err := m.LedgerClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryTypes = append(m.EntryTypes, &LedgerClassEntryType{})
			if err := m.EntryTypes[len(m.EntryTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusTypes = append(m.StatusTypes, &LedgerClassStatusType{})
			if err := m.StatusTypes[len(m.StatusTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketTypes = append(m.BucketTypes, &LedgerClassBucketType{})
			if err := m.BucketTypes[len(m.BucketTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ledger == nil {
				m.Ledger = &Ledger{}
			}
			if err := m.Ledger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LedgerEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerBalancesAsOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerBalancesAsOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerBalancesAsOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsOfDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerBalancesAsOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerBalancesAsOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerBalancesAsOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BucketBalances == nil {
				m.BucketBalances = &BucketBalances{}
			}
			if err := m.BucketBalances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerSettlementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerSettlementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerSettlementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerSettlementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerSettlementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerSettlementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settlements = append(m.Settlements, &StoredSettlementInstructions{})
			if err := m.Settlements[len(m.Settlements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerSettlementsByCorrelationIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerSettlementsByCorrelationIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerSettlementsByCorrelationIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &LedgerKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerSettlementsByCorrelationIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerSettlementsByCorrelationIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerSettlementsByCorrelationIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settlement == nil {
				m.Settlement = &StoredSettlementInstructions{}
			}
			if err := m.Settlement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
