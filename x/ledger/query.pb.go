// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/query.proto

package ledger

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLedgerConfigRequest struct {
	NftId string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryLedgerConfigRequest) Reset()         { *m = QueryLedgerConfigRequest{} }
func (m *QueryLedgerConfigRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerConfigRequest) ProtoMessage()    {}
func (*QueryLedgerConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{0}
}
func (m *QueryLedgerConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerConfigRequest.Merge(m, src)
}
func (m *QueryLedgerConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerConfigRequest proto.InternalMessageInfo

func (m *QueryLedgerConfigRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type QueryLedgerConfigResponse struct {
	Ledger *Ledger `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
}

func (m *QueryLedgerConfigResponse) Reset()         { *m = QueryLedgerConfigResponse{} }
func (m *QueryLedgerConfigResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerConfigResponse) ProtoMessage()    {}
func (*QueryLedgerConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{1}
}
func (m *QueryLedgerConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerConfigResponse.Merge(m, src)
}
func (m *QueryLedgerConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerConfigResponse proto.InternalMessageInfo

func (m *QueryLedgerConfigResponse) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

type QueryLedgerRequest struct {
	NftId string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryLedgerRequest) Reset()         { *m = QueryLedgerRequest{} }
func (m *QueryLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerRequest) ProtoMessage()    {}
func (*QueryLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{2}
}
func (m *QueryLedgerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerRequest.Merge(m, src)
}
func (m *QueryLedgerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerRequest proto.InternalMessageInfo

func (m *QueryLedgerRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type QueryLedgerResponse struct {
	Entries []*LedgerEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *QueryLedgerResponse) Reset()         { *m = QueryLedgerResponse{} }
func (m *QueryLedgerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerResponse) ProtoMessage()    {}
func (*QueryLedgerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{3}
}
func (m *QueryLedgerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerResponse.Merge(m, src)
}
func (m *QueryLedgerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerResponse proto.InternalMessageInfo

func (m *QueryLedgerResponse) GetEntries() []*LedgerEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type QueryLedgerEntryRequest struct {
	NftId         string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	CorrelationId string `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *QueryLedgerEntryRequest) Reset()         { *m = QueryLedgerEntryRequest{} }
func (m *QueryLedgerEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryRequest) ProtoMessage()    {}
func (*QueryLedgerEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{4}
}
func (m *QueryLedgerEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryRequest.Merge(m, src)
}
func (m *QueryLedgerEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryRequest proto.InternalMessageInfo

func (m *QueryLedgerEntryRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryLedgerEntryRequest) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type QueryLedgerEntryResponse struct {
	Entry *LedgerEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (m *QueryLedgerEntryResponse) Reset()         { *m = QueryLedgerEntryResponse{} }
func (m *QueryLedgerEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerEntryResponse) ProtoMessage()    {}
func (*QueryLedgerEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{5}
}
func (m *QueryLedgerEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerEntryResponse.Merge(m, src)
}
func (m *QueryLedgerEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerEntryResponse proto.InternalMessageInfo

func (m *QueryLedgerEntryResponse) GetEntry() *LedgerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// QueryBalancesAsOfRequest is the request type for the Query/GetBalancesAsOf RPC method
type QueryBalancesAsOfRequest struct {
	NftId    string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	AsOfDate string `protobuf:"bytes,2,opt,name=as_of_date,json=asOfDate,proto3" json:"as_of_date,omitempty"`
}

func (m *QueryBalancesAsOfRequest) Reset()         { *m = QueryBalancesAsOfRequest{} }
func (m *QueryBalancesAsOfRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalancesAsOfRequest) ProtoMessage()    {}
func (*QueryBalancesAsOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{6}
}
func (m *QueryBalancesAsOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalancesAsOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalancesAsOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalancesAsOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalancesAsOfRequest.Merge(m, src)
}
func (m *QueryBalancesAsOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalancesAsOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalancesAsOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalancesAsOfRequest proto.InternalMessageInfo

func (m *QueryBalancesAsOfRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryBalancesAsOfRequest) GetAsOfDate() string {
	if m != nil {
		return m.AsOfDate
	}
	return ""
}

// QueryBalancesAsOfResponse is the response type for the Query/GetBalancesAsOf RPC method
type QueryBalancesAsOfResponse struct {
	Balances *Balances `protobuf:"bytes,1,opt,name=balances,proto3" json:"balances,omitempty"`
}

func (m *QueryBalancesAsOfResponse) Reset()         { *m = QueryBalancesAsOfResponse{} }
func (m *QueryBalancesAsOfResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalancesAsOfResponse) ProtoMessage()    {}
func (*QueryBalancesAsOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{7}
}
func (m *QueryBalancesAsOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalancesAsOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalancesAsOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalancesAsOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalancesAsOfResponse.Merge(m, src)
}
func (m *QueryBalancesAsOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalancesAsOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalancesAsOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalancesAsOfResponse proto.InternalMessageInfo

func (m *QueryBalancesAsOfResponse) GetBalances() *Balances {
	if m != nil {
		return m.Balances
	}
	return nil
}

type QueryLedgerClassEntryTypesRequest struct {
	AssetClassId string `protobuf:"bytes,1,opt,name=asset_class_id,json=assetClassId,proto3" json:"asset_class_id,omitempty"`
}

func (m *QueryLedgerClassEntryTypesRequest) Reset()         { *m = QueryLedgerClassEntryTypesRequest{} }
func (m *QueryLedgerClassEntryTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{8}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesRequest) GetAssetClassId() string {
	if m != nil {
		return m.AssetClassId
	}
	return ""
}

type QueryLedgerClassEntryTypesResponse struct {
	EntryTypes []*LedgerClassEntryType `protobuf:"bytes,1,rep,name=entry_types,json=entryTypes,proto3" json:"entry_types,omitempty"`
}

func (m *QueryLedgerClassEntryTypesResponse) Reset()         { *m = QueryLedgerClassEntryTypesResponse{} }
func (m *QueryLedgerClassEntryTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassEntryTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassEntryTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{9}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassEntryTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassEntryTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassEntryTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassEntryTypesResponse) GetEntryTypes() []*LedgerClassEntryType {
	if m != nil {
		return m.EntryTypes
	}
	return nil
}

type QueryLedgerClassStatusTypesRequest struct {
	AssetClassId string `protobuf:"bytes,1,opt,name=asset_class_id,json=assetClassId,proto3" json:"asset_class_id,omitempty"`
}

func (m *QueryLedgerClassStatusTypesRequest) Reset()         { *m = QueryLedgerClassStatusTypesRequest{} }
func (m *QueryLedgerClassStatusTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{10}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesRequest) GetAssetClassId() string {
	if m != nil {
		return m.AssetClassId
	}
	return ""
}

type QueryLedgerClassStatusTypesResponse struct {
	StatusTypes []*LedgerClassStatusType `protobuf:"bytes,1,rep,name=status_types,json=statusTypes,proto3" json:"status_types,omitempty"`
}

func (m *QueryLedgerClassStatusTypesResponse) Reset()         { *m = QueryLedgerClassStatusTypesResponse{} }
func (m *QueryLedgerClassStatusTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassStatusTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassStatusTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{11}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassStatusTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassStatusTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassStatusTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassStatusTypesResponse) GetStatusTypes() []*LedgerClassStatusType {
	if m != nil {
		return m.StatusTypes
	}
	return nil
}

type QueryLedgerClassBucketTypesRequest struct {
	AssetClassId string `protobuf:"bytes,1,opt,name=asset_class_id,json=assetClassId,proto3" json:"asset_class_id,omitempty"`
}

func (m *QueryLedgerClassBucketTypesRequest) Reset()         { *m = QueryLedgerClassBucketTypesRequest{} }
func (m *QueryLedgerClassBucketTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesRequest) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{12}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesRequest proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesRequest) GetAssetClassId() string {
	if m != nil {
		return m.AssetClassId
	}
	return ""
}

type QueryLedgerClassBucketTypesResponse struct {
	BucketTypes []*LedgerClassBucketType `protobuf:"bytes,1,rep,name=bucket_types,json=bucketTypes,proto3" json:"bucket_types,omitempty"`
}

func (m *QueryLedgerClassBucketTypesResponse) Reset()         { *m = QueryLedgerClassBucketTypesResponse{} }
func (m *QueryLedgerClassBucketTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLedgerClassBucketTypesResponse) ProtoMessage()    {}
func (*QueryLedgerClassBucketTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7955b82df44e45aa, []int{13}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.Merge(m, src)
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLedgerClassBucketTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLedgerClassBucketTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLedgerClassBucketTypesResponse proto.InternalMessageInfo

func (m *QueryLedgerClassBucketTypesResponse) GetBucketTypes() []*LedgerClassBucketType {
	if m != nil {
		return m.BucketTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLedgerConfigRequest)(nil), "provenance.ledger.v1.QueryLedgerConfigRequest")
	proto.RegisterType((*QueryLedgerConfigResponse)(nil), "provenance.ledger.v1.QueryLedgerConfigResponse")
	proto.RegisterType((*QueryLedgerRequest)(nil), "provenance.ledger.v1.QueryLedgerRequest")
	proto.RegisterType((*QueryLedgerResponse)(nil), "provenance.ledger.v1.QueryLedgerResponse")
	proto.RegisterType((*QueryLedgerEntryRequest)(nil), "provenance.ledger.v1.QueryLedgerEntryRequest")
	proto.RegisterType((*QueryLedgerEntryResponse)(nil), "provenance.ledger.v1.QueryLedgerEntryResponse")
	proto.RegisterType((*QueryBalancesAsOfRequest)(nil), "provenance.ledger.v1.QueryBalancesAsOfRequest")
	proto.RegisterType((*QueryBalancesAsOfResponse)(nil), "provenance.ledger.v1.QueryBalancesAsOfResponse")
	proto.RegisterType((*QueryLedgerClassEntryTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesRequest")
	proto.RegisterType((*QueryLedgerClassEntryTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassEntryTypesResponse")
	proto.RegisterType((*QueryLedgerClassStatusTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesRequest")
	proto.RegisterType((*QueryLedgerClassStatusTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassStatusTypesResponse")
	proto.RegisterType((*QueryLedgerClassBucketTypesRequest)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesRequest")
	proto.RegisterType((*QueryLedgerClassBucketTypesResponse)(nil), "provenance.ledger.v1.QueryLedgerClassBucketTypesResponse")
}

func init() { proto.RegisterFile("provenance/ledger/v1/query.proto", fileDescriptor_7955b82df44e45aa) }

var fileDescriptor_7955b82df44e45aa = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x59, 0x0c, 0x05, 0x5e, 0x11, 0xcc, 0xa8, 0x01, 0x9b, 0xba, 0xc2, 0x0a, 0x09, 0x8a,
	0xec, 0x86, 0x82, 0x41, 0x41, 0x4d, 0xe4, 0x47, 0x48, 0xd5, 0x88, 0x2c, 0x26, 0x24, 0x5e, 0x9a,
	0x6d, 0x3b, 0xad, 0x1b, 0xeb, 0x4e, 0xd9, 0x99, 0x12, 0x1b, 0xd2, 0x8b, 0x89, 0x67, 0x4d, 0xfc,
	0x5b, 0x8c, 0x57, 0x0f, 0x1e, 0x3c, 0x92, 0x78, 0xf1, 0x68, 0x80, 0x3f, 0xc4, 0x74, 0x76, 0xca,
	0xee, 0xd2, 0x61, 0x77, 0x21, 0x5e, 0x67, 0xdf, 0xfb, 0xbe, 0xcf, 0x77, 0x3a, 0xef, 0xbd, 0xc2,
	0x78, 0xdd, 0x25, 0x7b, 0xd8, 0xb1, 0x9c, 0x12, 0x36, 0x6a, 0xb8, 0x5c, 0xc5, 0xae, 0xb1, 0x37,
	0x67, 0xec, 0x36, 0xb0, 0xdb, 0xd4, 0xeb, 0x2e, 0x61, 0x04, 0x5d, 0xf3, 0x23, 0x74, 0x2f, 0x42,
	0xdf, 0x9b, 0xcb, 0x64, 0xab, 0x84, 0x54, 0x6b, 0xd8, 0xb0, 0xea, 0xb6, 0x61, 0x39, 0x0e, 0x61,
	0x16, 0xb3, 0x89, 0x43, 0xbd, 0x9c, 0xcc, 0x84, 0x54, 0x55, 0x64, 0xf3, 0x10, 0x6d, 0x0e, 0xc6,
	0xb6, 0xda, 0x55, 0x5e, 0xf0, 0xc3, 0x55, 0xe2, 0x54, 0xec, 0xaa, 0x89, 0x77, 0x1b, 0x98, 0x32,
	0x74, 0x1d, 0x52, 0x4e, 0x85, 0x15, 0xec, 0xf2, 0x98, 0x32, 0xae, 0x4c, 0x0f, 0x9a, 0x7d, 0x4e,
	0x85, 0xe5, 0xcb, 0xda, 0x16, 0xdc, 0x90, 0xa4, 0xd0, 0x3a, 0x71, 0x28, 0x46, 0x0b, 0x90, 0xf2,
	0xf4, 0x79, 0x4e, 0x3a, 0x97, 0xd5, 0x65, 0xdc, 0xba, 0x97, 0x6b, 0x8a, 0x58, 0x6d, 0x06, 0x50,
	0x40, 0x32, 0xa6, 0xbe, 0x09, 0x57, 0x43, 0xc1, 0xa2, 0xf2, 0x32, 0xf4, 0x63, 0x87, 0xb9, 0x36,
	0xa6, 0x63, 0xca, 0xf8, 0xa5, 0xe9, 0x74, 0x6e, 0x22, 0xaa, 0xf4, 0xba, 0xc3, 0xdc, 0xa6, 0xd9,
	0xc9, 0xd0, 0x76, 0x60, 0x34, 0xa0, 0xe9, 0x7d, 0x8c, 0xa4, 0x40, 0x53, 0x30, 0x5c, 0x22, 0xae,
	0x8b, 0x6b, 0xfc, 0xc6, 0xdb, 0x9f, 0x7b, 0xf9, 0xe7, 0xcb, 0x81, 0xd3, 0x7c, 0x59, 0xdb, 0x0e,
	0xdd, 0xaf, 0x10, 0x16, 0xc4, 0x8b, 0xd0, 0xd7, 0xae, 0xdf, 0x14, 0x57, 0x95, 0x80, 0xd7, 0x8b,
	0xd7, 0x36, 0x85, 0xe8, 0x8a, 0x55, 0x6b, 0x07, 0xd3, 0xa7, 0x74, 0xb3, 0x12, 0x83, 0x9b, 0x05,
	0xb0, 0x68, 0x81, 0x54, 0x0a, 0x65, 0x8b, 0x61, 0x81, 0x3a, 0x60, 0xd1, 0xcd, 0xca, 0x9a, 0xc5,
	0xb0, 0xb6, 0x23, 0x7e, 0xd2, 0xb0, 0xa0, 0xc0, 0x5c, 0x82, 0x81, 0xa2, 0x38, 0x17, 0xa4, 0xaa,
	0x9c, 0xb4, 0x93, 0x6d, 0x9e, 0xc4, 0x6b, 0x79, 0x98, 0x08, 0xbe, 0x95, 0x9a, 0x45, 0x29, 0x77,
	0xf2, 0xba, 0x59, 0xc7, 0xb4, 0x83, 0x3c, 0x09, 0xc3, 0x16, 0xa5, 0x98, 0x15, 0x4a, 0xed, 0xef,
	0x3e, 0xfa, 0x10, 0x3f, 0xe5, 0x49, 0xf9, 0xb2, 0xb6, 0x0b, 0x5a, 0x94, 0x94, 0x80, 0x7d, 0x0e,
	0x69, 0x7e, 0x47, 0x05, 0xd6, 0x3e, 0x16, 0x2f, 0xe1, 0x6e, 0xd4, 0xcd, 0x86, 0x95, 0x4c, 0xc0,
	0x27, 0xa2, 0xda, 0xb3, 0xee, 0x92, 0xdb, 0xcc, 0x62, 0x0d, 0x7a, 0x01, 0xfc, 0x06, 0xdc, 0x8e,
	0xd4, 0x12, 0xfc, 0x2f, 0x61, 0x88, 0xf2, 0xe3, 0x90, 0x81, 0x99, 0x58, 0x03, 0xbe, 0x96, 0x99,
	0xa6, 0xbe, 0xae, 0xcc, 0xc2, 0x4a, 0xa3, 0xf4, 0x0e, 0xb3, 0xff, 0x63, 0x21, 0xa4, 0xe5, 0x5b,
	0x28, 0xf2, 0xe3, 0x73, 0x5a, 0xf0, 0xb5, 0xcc, 0x74, 0xd1, 0xd7, 0xcd, 0x1d, 0x0f, 0x42, 0x1f,
	0xaf, 0x8b, 0x3e, 0x2b, 0x90, 0xf2, 0xe6, 0x0d, 0xd2, 0xe5, 0x72, 0x67, 0xcd, 0xb2, 0x8c, 0x91,
	0x38, 0xde, 0x73, 0xa1, 0x4d, 0x7e, 0xfc, 0x7d, 0xfc, 0xb5, 0x57, 0x45, 0x59, 0x43, 0x3a, 0x44,
	0x4b, 0x1e, 0xc6, 0x27, 0x05, 0xfa, 0xd7, 0xbd, 0x19, 0x82, 0xa6, 0x63, 0x4b, 0x74, 0x60, 0xee,
	0x24, 0x88, 0x14, 0x18, 0x53, 0x1c, 0xe3, 0x16, 0xba, 0x29, 0xc7, 0x10, 0xf3, 0x0b, 0xfd, 0x50,
	0x60, 0xe4, 0x54, 0x4b, 0xa0, 0xc5, 0x78, 0xcb, 0xd2, 0x7e, 0xcc, 0x3c, 0x38, 0x7f, 0xa2, 0xa0,
	0x5d, 0xe2, 0xb4, 0x0b, 0x28, 0x77, 0x36, 0xad, 0xe8, 0x4c, 0x63, 0x3f, 0xfc, 0xe0, 0x5a, 0xe8,
	0xa7, 0x02, 0x57, 0x4e, 0xb7, 0x05, 0x4a, 0x88, 0xd2, 0xdd, 0x95, 0x99, 0x87, 0x17, 0xc8, 0x14,
	0x2e, 0x96, 0xb9, 0x8b, 0xfb, 0x68, 0x5e, 0xee, 0x22, 0xd8, 0x9f, 0x11, 0x36, 0x02, 0xad, 0x91,
	0xd4, 0x46, 0x77, 0x67, 0x26, 0xb5, 0x21, 0xe9, 0xc3, 0x38, 0x1b, 0xc1, 0x1e, 0xed, 0xb6, 0xf1,
	0x4d, 0x81, 0xe1, 0x0d, 0xcc, 0x02, 0xcb, 0x07, 0xcd, 0xc6, 0xa2, 0x04, 0xf7, 0x66, 0x46, 0x4f,
	0x1a, 0x2e, 0x70, 0xd7, 0x38, 0xee, 0x13, 0xf4, 0xc8, 0x88, 0xf8, 0xd7, 0x62, 0xec, 0x7b, 0xcb,
	0xad, 0xe5, 0xbd, 0x25, 0x63, 0x3f, 0xbc, 0x83, 0x5b, 0xe8, 0xbb, 0x02, 0x23, 0x1b, 0x98, 0x05,
	0x17, 0x59, 0xe4, 0xac, 0x90, 0xac, 0xd0, 0xc8, 0x59, 0x21, 0xdb, 0x90, 0xda, 0x2a, 0x47, 0x7f,
	0x8c, 0x96, 0x93, 0xa1, 0x77, 0xb6, 0x63, 0xfb, 0xd6, 0x3b, 0x2b, 0xb9, 0xb5, 0x62, 0xfd, 0x3a,
	0x54, 0x95, 0x83, 0x43, 0x55, 0xf9, 0x7b, 0xa8, 0x2a, 0x5f, 0x8e, 0xd4, 0x9e, 0x83, 0x23, 0xb5,
	0xe7, 0xcf, 0x91, 0xda, 0x03, 0xa3, 0x36, 0x91, 0x12, 0xbd, 0x52, 0xde, 0xdc, 0xab, 0xda, 0xec,
	0x6d, 0xa3, 0xa8, 0x97, 0xc8, 0xfb, 0x40, 0xed, 0x59, 0x9b, 0x04, 0x49, 0x3e, 0x08, 0x82, 0x62,
	0x8a, 0xff, 0xe7, 0x9b, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x78, 0xad, 0x72, 0x6e, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries params of the ledger module.
	Config(ctx context.Context, in *QueryLedgerConfigRequest, opts ...grpc.CallOption) (*QueryLedgerConfigResponse, error)
	Entries(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error)
	ClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error)
	ClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error)
	ClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error)
	// GetLedgerEntry returns a specific ledger entry for an NFT
	GetLedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error)
	// GetBalancesAsOf returns the balances for a specific NFT as of a given date
	GetBalancesAsOf(ctx context.Context, in *QueryBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryBalancesAsOfResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Config(ctx context.Context, in *QueryLedgerConfigRequest, opts ...grpc.CallOption) (*QueryLedgerConfigResponse, error) {
	out := new(QueryLedgerConfigResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/Config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Entries(ctx context.Context, in *QueryLedgerRequest, opts ...grpc.CallOption) (*QueryLedgerResponse, error) {
	out := new(QueryLedgerResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/Entries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassEntryTypes(ctx context.Context, in *QueryLedgerClassEntryTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassEntryTypesResponse, error) {
	out := new(QueryLedgerClassEntryTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/ClassEntryTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassStatusTypes(ctx context.Context, in *QueryLedgerClassStatusTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassStatusTypesResponse, error) {
	out := new(QueryLedgerClassStatusTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/ClassStatusTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClassBucketTypes(ctx context.Context, in *QueryLedgerClassBucketTypesRequest, opts ...grpc.CallOption) (*QueryLedgerClassBucketTypesResponse, error) {
	out := new(QueryLedgerClassBucketTypesResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/ClassBucketTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLedgerEntry(ctx context.Context, in *QueryLedgerEntryRequest, opts ...grpc.CallOption) (*QueryLedgerEntryResponse, error) {
	out := new(QueryLedgerEntryResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/GetLedgerEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBalancesAsOf(ctx context.Context, in *QueryBalancesAsOfRequest, opts ...grpc.CallOption) (*QueryBalancesAsOfResponse, error) {
	out := new(QueryBalancesAsOfResponse)
	err := c.cc.Invoke(ctx, "/provenance.ledger.v1.Query/GetBalancesAsOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries params of the ledger module.
	Config(context.Context, *QueryLedgerConfigRequest) (*QueryLedgerConfigResponse, error)
	Entries(context.Context, *QueryLedgerRequest) (*QueryLedgerResponse, error)
	ClassEntryTypes(context.Context, *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error)
	ClassStatusTypes(context.Context, *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error)
	ClassBucketTypes(context.Context, *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error)
	// GetLedgerEntry returns a specific ledger entry for an NFT
	GetLedgerEntry(context.Context, *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error)
	// GetBalancesAsOf returns the balances for a specific NFT as of a given date
	GetBalancesAsOf(context.Context, *QueryBalancesAsOfRequest) (*QueryBalancesAsOfResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Config(ctx context.Context, req *QueryLedgerConfigRequest) (*QueryLedgerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (*UnimplementedQueryServer) Entries(ctx context.Context, req *QueryLedgerRequest) (*QueryLedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Entries not implemented")
}
func (*UnimplementedQueryServer) ClassEntryTypes(ctx context.Context, req *QueryLedgerClassEntryTypesRequest) (*QueryLedgerClassEntryTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassEntryTypes not implemented")
}
func (*UnimplementedQueryServer) ClassStatusTypes(ctx context.Context, req *QueryLedgerClassStatusTypesRequest) (*QueryLedgerClassStatusTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassStatusTypes not implemented")
}
func (*UnimplementedQueryServer) ClassBucketTypes(ctx context.Context, req *QueryLedgerClassBucketTypesRequest) (*QueryLedgerClassBucketTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassBucketTypes not implemented")
}
func (*UnimplementedQueryServer) GetLedgerEntry(ctx context.Context, req *QueryLedgerEntryRequest) (*QueryLedgerEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerEntry not implemented")
}
func (*UnimplementedQueryServer) GetBalancesAsOf(ctx context.Context, req *QueryBalancesAsOfRequest) (*QueryBalancesAsOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalancesAsOf not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/Config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Config(ctx, req.(*QueryLedgerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Entries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Entries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/Entries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Entries(ctx, req.(*QueryLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassEntryTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassEntryTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassEntryTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/ClassEntryTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassEntryTypes(ctx, req.(*QueryLedgerClassEntryTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassStatusTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassStatusTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassStatusTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/ClassStatusTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassStatusTypes(ctx, req.(*QueryLedgerClassStatusTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClassBucketTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerClassBucketTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClassBucketTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/ClassBucketTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClassBucketTypes(ctx, req.(*QueryLedgerClassBucketTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/GetLedgerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLedgerEntry(ctx, req.(*QueryLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBalancesAsOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalancesAsOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBalancesAsOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.ledger.v1.Query/GetBalancesAsOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBalancesAsOf(ctx, req.(*QueryBalancesAsOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.ledger.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Query_Config_Handler,
		},
		{
			MethodName: "Entries",
			Handler:    _Query_Entries_Handler,
		},
		{
			MethodName: "ClassEntryTypes",
			Handler:    _Query_ClassEntryTypes_Handler,
		},
		{
			MethodName: "ClassStatusTypes",
			Handler:    _Query_ClassStatusTypes_Handler,
		},
		{
			MethodName: "ClassBucketTypes",
			Handler:    _Query_ClassBucketTypes_Handler,
		},
		{
			MethodName: "GetLedgerEntry",
			Handler:    _Query_GetLedgerEntry_Handler,
		},
		{
			MethodName: "GetBalancesAsOf",
			Handler:    _Query_GetBalancesAsOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/ledger/v1/query.proto",
}

func (m *QueryLedgerConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		{
			size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalancesAsOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalancesAsOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalancesAsOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AsOfDate) > 0 {
		i -= len(m.AsOfDate)
		copy(dAtA[i:], m.AsOfDate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AsOfDate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalancesAsOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalancesAsOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalancesAsOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balances != nil {
		{
			size, err := m.Balances.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetClassId) > 0 {
		i -= len(m.AssetClassId)
		copy(dAtA[i:], m.AssetClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassEntryTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassEntryTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for iNdEx := len(m.EntryTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EntryTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetClassId) > 0 {
		i -= len(m.AssetClassId)
		copy(dAtA[i:], m.AssetClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassStatusTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassStatusTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for iNdEx := len(m.StatusTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StatusTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetClassId) > 0 {
		i -= len(m.AssetClassId)
		copy(dAtA[i:], m.AssetClassId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLedgerClassBucketTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLedgerClassBucketTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for iNdEx := len(m.BucketTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BucketTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLedgerConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalancesAsOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AsOfDate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalancesAsOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balances != nil {
		l = m.Balances.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassEntryTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EntryTypes) > 0 {
		for _, e := range m.EntryTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassStatusTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassStatusTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatusTypes) > 0 {
		for _, e := range m.StatusTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLedgerClassBucketTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetClassId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLedgerClassBucketTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BucketTypes) > 0 {
		for _, e := range m.BucketTypes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLedgerConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ledger == nil {
				m.Ledger = &Ledger{}
			}
			if err := m.Ledger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LedgerEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &LedgerEntry{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalancesAsOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalancesAsOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalancesAsOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsOfDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsOfDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalancesAsOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalancesAsOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalancesAsOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Balances == nil {
				m.Balances = &Balances{}
			}
			if err := m.Balances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassEntryTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassEntryTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntryTypes = append(m.EntryTypes, &LedgerClassEntryType{})
			if err := m.EntryTypes[len(m.EntryTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassStatusTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassStatusTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusTypes = append(m.StatusTypes, &LedgerClassStatusType{})
			if err := m.StatusTypes[len(m.StatusTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLedgerClassBucketTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLedgerClassBucketTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketTypes = append(m.BucketTypes, &LedgerClassBucketType{})
			if err := m.BucketTypes[len(m.BucketTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
