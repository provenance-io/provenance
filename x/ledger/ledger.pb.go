// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/ledger/v1/ledger.proto

package ledger

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LedgerEntryType
type LedgerEntryType int32

const (
	LedgerEntryType_Unspecified         LedgerEntryType = 0
	LedgerEntryType_Disbursement        LedgerEntryType = 1
	LedgerEntryType_Scheduled_Payment   LedgerEntryType = 2
	LedgerEntryType_Unscheduled_Payment LedgerEntryType = 3
	LedgerEntryType_Foreclosure_Payment LedgerEntryType = 4
	LedgerEntryType_Payment             LedgerEntryType = 5
	LedgerEntryType_Fee                 LedgerEntryType = 6
	LedgerEntryType_Other               LedgerEntryType = 7
)

var LedgerEntryType_name = map[int32]string{
	0: "LEDGER_ENTRY_TYPE_UNSPECIFIED",
	1: "LEDGER_ENTRY_TYPE_DISBURSEMENT",
	2: "LEDGER_ENTRY_TYPE_SCHEDULED_PAYMENT",
	3: "LEDGER_ENTRY_TYPE_UNSCHEDULED_PAYMENT",
	4: "LEDGER_ENTRY_TYPE_FORECLOSURE_PAYMENT",
	5: "LEDGER_ENTRY_TYPE_PAYMENT",
	6: "LEDGER_ENTRY_TYPE_FEE",
	7: "LEDGER_ENTRY_TYPE_OTHER",
}

var LedgerEntryType_value = map[string]int32{
	"LEDGER_ENTRY_TYPE_UNSPECIFIED":         0,
	"LEDGER_ENTRY_TYPE_DISBURSEMENT":        1,
	"LEDGER_ENTRY_TYPE_SCHEDULED_PAYMENT":   2,
	"LEDGER_ENTRY_TYPE_UNSCHEDULED_PAYMENT": 3,
	"LEDGER_ENTRY_TYPE_FORECLOSURE_PAYMENT": 4,
	"LEDGER_ENTRY_TYPE_PAYMENT":             5,
	"LEDGER_ENTRY_TYPE_FEE":                 6,
	"LEDGER_ENTRY_TYPE_OTHER":               7,
}

func (x LedgerEntryType) String() string {
	return proto.EnumName(LedgerEntryType_name, int32(x))
}

func (LedgerEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{0}
}

// FlowStatus represents the current status of a flow
type FundingTransferStatus int32

const (
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_UNSPECIFIED FundingTransferStatus = 0
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_PENDING     FundingTransferStatus = 1
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_PROCESSING  FundingTransferStatus = 2
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_COMPLETED   FundingTransferStatus = 3
	FundingTransferStatus_FUNDING_TRANSFER_STATUS_FAILED      FundingTransferStatus = 4
)

var FundingTransferStatus_name = map[int32]string{
	0: "FUNDING_TRANSFER_STATUS_UNSPECIFIED",
	1: "FUNDING_TRANSFER_STATUS_PENDING",
	2: "FUNDING_TRANSFER_STATUS_PROCESSING",
	3: "FUNDING_TRANSFER_STATUS_COMPLETED",
	4: "FUNDING_TRANSFER_STATUS_FAILED",
}

var FundingTransferStatus_value = map[string]int32{
	"FUNDING_TRANSFER_STATUS_UNSPECIFIED": 0,
	"FUNDING_TRANSFER_STATUS_PENDING":     1,
	"FUNDING_TRANSFER_STATUS_PROCESSING":  2,
	"FUNDING_TRANSFER_STATUS_COMPLETED":   3,
	"FUNDING_TRANSFER_STATUS_FAILED":      4,
}

func (x FundingTransferStatus) String() string {
	return proto.EnumName(FundingTransferStatus_name, int32(x))
}

func (FundingTransferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{1}
}

// Ledger
type Ledger struct {
	// Address of the NFT to which this ledger is linked.
	NftAddress string `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	// This denom will represent the entry values within the ledger.
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// Next payment date in ISO 8601 format: YYYY-MM-DD
	NextPmtDate string `protobuf:"bytes,3,opt,name=next_pmt_date,json=nextPmtDate,proto3" json:"next_pmt_date,omitempty"`
	// Next payment amount
	NextPmtAmt string `protobuf:"bytes,4,opt,name=next_pmt_amt,json=nextPmtAmt,proto3" json:"next_pmt_amt,omitempty"`
	// Status of the ledger
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Interest rate
	InterestRate string `protobuf:"bytes,6,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// Maturity date in ISO 8601 format: YYYY-MM-DD
	MaturityDate string `protobuf:"bytes,7,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
}

func (m *Ledger) Reset()         { *m = Ledger{} }
func (m *Ledger) String() string { return proto.CompactTextString(m) }
func (*Ledger) ProtoMessage()    {}
func (*Ledger) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{0}
}
func (m *Ledger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ledger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ledger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ledger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ledger.Merge(m, src)
}
func (m *Ledger) XXX_Size() int {
	return m.Size()
}
func (m *Ledger) XXX_DiscardUnknown() {
	xxx_messageInfo_Ledger.DiscardUnknown(m)
}

var xxx_messageInfo_Ledger proto.InternalMessageInfo

func (m *Ledger) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *Ledger) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Ledger) GetNextPmtDate() string {
	if m != nil {
		return m.NextPmtDate
	}
	return ""
}

func (m *Ledger) GetNextPmtAmt() string {
	if m != nil {
		return m.NextPmtAmt
	}
	return ""
}

func (m *Ledger) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Ledger) GetInterestRate() string {
	if m != nil {
		return m.InterestRate
	}
	return ""
}

func (m *Ledger) GetMaturityDate() string {
	if m != nil {
		return m.MaturityDate
	}
	return ""
}

// LedgerEntry
type LedgerEntry struct {
	// Correlation ID for tracking ledger entries with external systems (max 50 characters)
	CorrelationId string `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Sequence number of the ledger entry (less than 100)
	// This field is used to maintain the correct order of entries when multiple entries
	// share the same effective date. Entries are sorted first by effective date, then by sequence.
	Sequence uint32          `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type     LedgerEntryType `protobuf:"varint,3,opt,name=type,proto3,enum=provenance.ledger.v1.LedgerEntryType" json:"type,omitempty"`
	// Posted date in ISO 8601 format: YYYY-MM-DD
	PostedDate string `protobuf:"bytes,4,opt,name=posted_date,json=postedDate,proto3" json:"posted_date,omitempty"`
	// Effective date in ISO 8601 format: YYYY-MM-DD
	EffectiveDate   string                `protobuf:"bytes,5,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	Amt             cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=amt,proto3,customtype=cosmossdk.io/math.Int" json:"amt"`
	PrinAppliedAmt  cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=prin_applied_amt,json=prinAppliedAmt,proto3,customtype=cosmossdk.io/math.Int" json:"prin_applied_amt"`
	PrinBalAmt      cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=prin_bal_amt,json=prinBalAmt,proto3,customtype=cosmossdk.io/math.Int" json:"prin_bal_amt"`
	IntAppliedAmt   cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=int_applied_amt,json=intAppliedAmt,proto3,customtype=cosmossdk.io/math.Int" json:"int_applied_amt"`
	IntBalAmt       cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=int_bal_amt,json=intBalAmt,proto3,customtype=cosmossdk.io/math.Int" json:"int_bal_amt"`
	OtherAppliedAmt cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=other_applied_amt,json=otherAppliedAmt,proto3,customtype=cosmossdk.io/math.Int" json:"other_applied_amt"`
	OtherBalAmt     cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=other_bal_amt,json=otherBalAmt,proto3,customtype=cosmossdk.io/math.Int" json:"other_bal_amt"`
}

func (m *LedgerEntry) Reset()         { *m = LedgerEntry{} }
func (m *LedgerEntry) String() string { return proto.CompactTextString(m) }
func (*LedgerEntry) ProtoMessage()    {}
func (*LedgerEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{1}
}
func (m *LedgerEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerEntry.Merge(m, src)
}
func (m *LedgerEntry) XXX_Size() int {
	return m.Size()
}
func (m *LedgerEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerEntry proto.InternalMessageInfo

func (m *LedgerEntry) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

func (m *LedgerEntry) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *LedgerEntry) GetType() LedgerEntryType {
	if m != nil {
		return m.Type
	}
	return LedgerEntryType_Unspecified
}

func (m *LedgerEntry) GetPostedDate() string {
	if m != nil {
		return m.PostedDate
	}
	return ""
}

func (m *LedgerEntry) GetEffectiveDate() string {
	if m != nil {
		return m.EffectiveDate
	}
	return ""
}

// FundTransfer represents a single fund transfer to process
type FundTransfer struct {
	NftAddress               string                `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	LedgerEntryCorrelationId string                `protobuf:"bytes,2,opt,name=ledger_entry_correlation_id,json=ledgerEntryCorrelationId,proto3" json:"ledger_entry_correlation_id,omitempty"`
	Amount                   string                `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status                   FundingTransferStatus `protobuf:"varint,4,opt,name=status,proto3,enum=provenance.ledger.v1.FundingTransferStatus" json:"status,omitempty"`
	Memo                     string                `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	// The minimum block height or timestamp for settlement
	SettlementBlock int64 `protobuf:"varint,6,opt,name=settlement_block,json=settlementBlock,proto3" json:"settlement_block,omitempty"`
}

func (m *FundTransfer) Reset()         { *m = FundTransfer{} }
func (m *FundTransfer) String() string { return proto.CompactTextString(m) }
func (*FundTransfer) ProtoMessage()    {}
func (*FundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{2}
}
func (m *FundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTransfer.Merge(m, src)
}
func (m *FundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *FundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_FundTransfer proto.InternalMessageInfo

func (m *FundTransfer) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *FundTransfer) GetLedgerEntryCorrelationId() string {
	if m != nil {
		return m.LedgerEntryCorrelationId
	}
	return ""
}

func (m *FundTransfer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *FundTransfer) GetStatus() FundingTransferStatus {
	if m != nil {
		return m.Status
	}
	return FundingTransferStatus_FUNDING_TRANSFER_STATUS_UNSPECIFIED
}

func (m *FundTransfer) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *FundTransfer) GetSettlementBlock() int64 {
	if m != nil {
		return m.SettlementBlock
	}
	return 0
}

// SettlementInstruction represents blockchain-specific settlement instructions
type SettlementInstruction struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The recipient's blockchain address
	RecipientAddress string `protobuf:"bytes,2,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	// Optional memo or note for the transaction
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// The minimum block height or timestamp for settlement
	SettlementBlock int64 `protobuf:"varint,4,opt,name=settlement_block,json=settlementBlock,proto3" json:"settlement_block,omitempty"`
}

func (m *SettlementInstruction) Reset()         { *m = SettlementInstruction{} }
func (m *SettlementInstruction) String() string { return proto.CompactTextString(m) }
func (*SettlementInstruction) ProtoMessage()    {}
func (*SettlementInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{3}
}
func (m *SettlementInstruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettlementInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettlementInstruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettlementInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlementInstruction.Merge(m, src)
}
func (m *SettlementInstruction) XXX_Size() int {
	return m.Size()
}
func (m *SettlementInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlementInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_SettlementInstruction proto.InternalMessageInfo

func (m *SettlementInstruction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SettlementInstruction) GetRecipientAddress() string {
	if m != nil {
		return m.RecipientAddress
	}
	return ""
}

func (m *SettlementInstruction) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *SettlementInstruction) GetSettlementBlock() int64 {
	if m != nil {
		return m.SettlementBlock
	}
	return 0
}

// FundTransferEntryWithSettlement represents a fund transfer with settlement instructions
type FundTransferWithSettlement struct {
	NftAddress               string                   `protobuf:"bytes,1,opt,name=nft_address,json=nftAddress,proto3" json:"nft_address,omitempty"`
	LedgerEntryCorrelationId string                   `protobuf:"bytes,2,opt,name=ledger_entry_correlation_id,json=ledgerEntryCorrelationId,proto3" json:"ledger_entry_correlation_id,omitempty"`
	SettlementInstructions   []*SettlementInstruction `protobuf:"bytes,3,rep,name=settlementInstructions,proto3" json:"settlementInstructions,omitempty"`
}

func (m *FundTransferWithSettlement) Reset()         { *m = FundTransferWithSettlement{} }
func (m *FundTransferWithSettlement) String() string { return proto.CompactTextString(m) }
func (*FundTransferWithSettlement) ProtoMessage()    {}
func (*FundTransferWithSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{4}
}
func (m *FundTransferWithSettlement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundTransferWithSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundTransferWithSettlement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundTransferWithSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundTransferWithSettlement.Merge(m, src)
}
func (m *FundTransferWithSettlement) XXX_Size() int {
	return m.Size()
}
func (m *FundTransferWithSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_FundTransferWithSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_FundTransferWithSettlement proto.InternalMessageInfo

func (m *FundTransferWithSettlement) GetNftAddress() string {
	if m != nil {
		return m.NftAddress
	}
	return ""
}

func (m *FundTransferWithSettlement) GetLedgerEntryCorrelationId() string {
	if m != nil {
		return m.LedgerEntryCorrelationId
	}
	return ""
}

func (m *FundTransferWithSettlement) GetSettlementInstructions() []*SettlementInstruction {
	if m != nil {
		return m.SettlementInstructions
	}
	return nil
}

// Balances represents the current balances for principal, interest, and other amounts
type Balances struct {
	Principal cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=principal,proto3,customtype=cosmossdk.io/math.Int" json:"principal"`
	Interest  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=interest,proto3,customtype=cosmossdk.io/math.Int" json:"interest"`
	Other     cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=other,proto3,customtype=cosmossdk.io/math.Int" json:"other"`
}

func (m *Balances) Reset()         { *m = Balances{} }
func (m *Balances) String() string { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()    {}
func (*Balances) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee508b012fc2213, []int{5}
}
func (m *Balances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balances.Merge(m, src)
}
func (m *Balances) XXX_Size() int {
	return m.Size()
}
func (m *Balances) XXX_DiscardUnknown() {
	xxx_messageInfo_Balances.DiscardUnknown(m)
}

var xxx_messageInfo_Balances proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("provenance.ledger.v1.LedgerEntryType", LedgerEntryType_name, LedgerEntryType_value)
	proto.RegisterEnum("provenance.ledger.v1.FundingTransferStatus", FundingTransferStatus_name, FundingTransferStatus_value)
	proto.RegisterType((*Ledger)(nil), "provenance.ledger.v1.Ledger")
	proto.RegisterType((*LedgerEntry)(nil), "provenance.ledger.v1.LedgerEntry")
	proto.RegisterType((*FundTransfer)(nil), "provenance.ledger.v1.FundTransfer")
	proto.RegisterType((*SettlementInstruction)(nil), "provenance.ledger.v1.SettlementInstruction")
	proto.RegisterType((*FundTransferWithSettlement)(nil), "provenance.ledger.v1.FundTransferWithSettlement")
	proto.RegisterType((*Balances)(nil), "provenance.ledger.v1.Balances")
}

func init() { proto.RegisterFile("provenance/ledger/v1/ledger.proto", fileDescriptor_dee508b012fc2213) }

var fileDescriptor_dee508b012fc2213 = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4f, 0x6f, 0x1a, 0xc7,
	0x1b, 0xc7, 0xbd, 0x06, 0x63, 0xfb, 0x01, 0x6c, 0x3c, 0x3f, 0xff, 0x21, 0xfc, 0x54, 0x4c, 0xb0,
	0x9c, 0xa6, 0x6e, 0x0d, 0x4d, 0xda, 0x4b, 0x0f, 0xad, 0xc4, 0x9f, 0x25, 0x41, 0x22, 0x80, 0x76,
	0x41, 0xad, 0xa3, 0x4a, 0xab, 0xf5, 0xee, 0x80, 0x57, 0xd9, 0x9d, 0xdd, 0xee, 0x0e, 0x56, 0xfc,
	0x16, 0x38, 0xf5, 0x0d, 0x70, 0x6e, 0x8f, 0x3d, 0xa4, 0xa7, 0xbe, 0x81, 0x1c, 0xa3, 0x9c, 0xa2,
	0x1e, 0xa2, 0xd6, 0x3e, 0xe4, 0xda, 0x97, 0x50, 0xcd, 0xcc, 0x82, 0x71, 0x0c, 0x6a, 0x8a, 0xd4,
	0x0b, 0xda, 0x79, 0xf6, 0xfb, 0x7c, 0xf8, 0xce, 0xf3, 0xcc, 0x33, 0x00, 0x77, 0x3d, 0xdf, 0x3d,
	0xc7, 0x44, 0x27, 0x06, 0x2e, 0xda, 0xd8, 0xec, 0x63, 0xbf, 0x78, 0xfe, 0x20, 0x7c, 0x2a, 0x78,
	0xbe, 0x4b, 0x5d, 0xb4, 0x7d, 0x2d, 0x29, 0x84, 0x2f, 0xce, 0x1f, 0x64, 0xee, 0x18, 0x6e, 0xe0,
	0xb8, 0x81, 0xc6, 0x35, 0x45, 0xb1, 0x10, 0x09, 0x99, 0x2d, 0xdd, 0xb1, 0x88, 0x5b, 0xe4, 0x9f,
	0x61, 0x68, 0xbb, 0xef, 0xf6, 0x5d, 0x21, 0x65, 0x4f, 0x22, 0x9a, 0x7f, 0x27, 0x41, 0xac, 0xc1,
	0x89, 0x68, 0x1f, 0xe2, 0xa4, 0x47, 0x35, 0xdd, 0x34, 0x7d, 0x1c, 0x04, 0x69, 0x29, 0x27, 0xdd,
	0x5f, 0x57, 0x80, 0xf4, 0x68, 0x49, 0x44, 0xd0, 0x36, 0xac, 0x98, 0x98, 0xb8, 0x4e, 0x7a, 0x99,
	0xbf, 0x12, 0x0b, 0x94, 0x87, 0x24, 0xc1, 0xcf, 0xa9, 0xe6, 0x39, 0x54, 0x33, 0x75, 0x8a, 0xd3,
	0x11, 0xfe, 0x36, 0xce, 0x82, 0x6d, 0x87, 0x56, 0x75, 0x8a, 0x51, 0x0e, 0x12, 0x13, 0x8d, 0xee,
	0xd0, 0x74, 0x34, 0x64, 0x0b, 0x49, 0xc9, 0xa1, 0x68, 0x17, 0x62, 0x01, 0xd5, 0xe9, 0x20, 0x48,
	0xaf, 0xf0, 0x77, 0xe1, 0x0a, 0x1d, 0x40, 0xd2, 0x22, 0x14, 0xfb, 0x38, 0xa0, 0x9a, 0xcf, 0xe8,
	0x31, 0xfe, 0x3a, 0x31, 0x0e, 0x2a, 0x0c, 0x7f, 0x00, 0x49, 0x47, 0xa7, 0x03, 0xdf, 0xa2, 0x17,
	0xc2, 0xc2, 0xaa, 0x10, 0x8d, 0x83, 0xcc, 0x43, 0xfe, 0xa7, 0x18, 0xc4, 0xc5, 0x4e, 0x65, 0x42,
	0xfd, 0x0b, 0x74, 0x08, 0x1b, 0x86, 0xeb, 0xfb, 0xd8, 0xd6, 0xa9, 0xe5, 0x12, 0xcd, 0x32, 0xc3,
	0x1d, 0x27, 0xa7, 0xa2, 0x75, 0x13, 0x65, 0x60, 0x2d, 0xc0, 0x3f, 0x0c, 0x30, 0x31, 0x30, 0xdf,
	0x77, 0x52, 0x99, 0xac, 0xd1, 0x57, 0x10, 0xa5, 0x17, 0x9e, 0xd8, 0xf1, 0xc6, 0xc3, 0xc3, 0xc2,
	0xac, 0x2e, 0x15, 0xa6, 0xbe, 0xb3, 0x73, 0xe1, 0x61, 0x85, 0xa7, 0xb0, 0x62, 0x7b, 0x6e, 0x40,
	0xb1, 0x29, 0x0c, 0x87, 0x05, 0x11, 0x21, 0x5e, 0xb2, 0x43, 0xd8, 0xc0, 0xbd, 0x1e, 0x36, 0xa8,
	0x75, 0x8e, 0x85, 0x46, 0x14, 0x26, 0x39, 0x89, 0x72, 0x59, 0x19, 0x22, 0xac, 0xa0, 0xbc, 0x2a,
	0xe5, 0xcf, 0x5f, 0xbe, 0xdd, 0x5f, 0xfa, 0xfd, 0xed, 0xfe, 0x8e, 0x38, 0x0b, 0x81, 0xf9, 0xac,
	0x60, 0xb9, 0x45, 0x47, 0xa7, 0x67, 0x85, 0x3a, 0xa1, 0xaf, 0x5f, 0x1c, 0x43, 0x78, 0x48, 0xea,
	0x84, 0xfe, 0xfc, 0xee, 0x97, 0x23, 0x49, 0x61, 0xc9, 0xe8, 0x29, 0xa4, 0x3c, 0xdf, 0x22, 0x9a,
	0xee, 0x79, 0xb6, 0x85, 0x4d, 0xde, 0xa1, 0xd5, 0x05, 0x81, 0x1b, 0x8c, 0x54, 0x12, 0x20, 0xd6,
	0x57, 0x05, 0x12, 0x9c, 0x7d, 0xaa, 0xdb, 0x9c, 0xbb, 0xb6, 0x20, 0x17, 0x18, 0xa5, 0xac, 0xdb,
	0x8c, 0xf9, 0x1d, 0x6c, 0x5a, 0x84, 0xde, 0xb0, 0xbb, 0xbe, 0x20, 0x96, 0x1d, 0xae, 0x29, 0xb7,
	0x6d, 0x88, 0x33, 0xf2, 0xd8, 0x2c, 0x2c, 0x48, 0x5d, 0xb7, 0x08, 0x0d, 0xbd, 0x7e, 0x0f, 0x5b,
	0x2e, 0x3d, 0xc3, 0xfe, 0x0d, 0xb7, 0xf1, 0x05, 0xb9, 0x9b, 0x1c, 0x35, 0xe5, 0xb7, 0x03, 0x49,
	0x41, 0x1f, 0x3b, 0x4e, 0x2c, 0x48, 0x8e, 0x73, 0x8c, 0xf0, 0x9c, 0x1f, 0x2e, 0x43, 0xa2, 0x36,
	0x20, 0x66, 0xc7, 0xd7, 0x49, 0xd0, 0xfb, 0x90, 0x9b, 0xe1, 0x6b, 0xf8, 0xbf, 0x38, 0xf0, 0x1a,
	0x66, 0xe7, 0x5c, 0x7b, 0x6f, 0xb0, 0xc4, 0x7d, 0x91, 0xb6, 0xaf, 0x27, 0xa1, 0x72, 0x63, 0xc6,
	0x76, 0x21, 0xa6, 0x3b, 0xee, 0x80, 0xd0, 0xf0, 0xee, 0x08, 0x57, 0xa8, 0x32, 0xb9, 0x14, 0xa2,
	0x7c, 0xc2, 0x3e, 0x9d, 0x3d, 0x61, 0xcc, 0xab, 0x45, 0xfa, 0x63, 0xbb, 0x2a, 0x4f, 0x99, 0xdc,
	0x20, 0x08, 0xa2, 0x0e, 0x76, 0xdc, 0x70, 0x7c, 0xf8, 0x33, 0xfa, 0x04, 0x52, 0x01, 0xa6, 0xd4,
	0xc6, 0x0e, 0x66, 0xed, 0xb6, 0x5d, 0xe3, 0x19, 0x1f, 0xa1, 0x88, 0xb2, 0x79, 0x1d, 0x2f, 0xb3,
	0x70, 0xfe, 0x57, 0x09, 0x76, 0xd4, 0x49, 0xac, 0x4e, 0x02, 0xea, 0x0f, 0x0c, 0xe6, 0x7b, 0xca,
	0xb5, 0x74, 0xc3, 0xb5, 0x0c, 0x5b, 0x3e, 0x36, 0x2c, 0xcf, 0x62, 0xec, 0x71, 0xcd, 0x78, 0x09,
	0xca, 0xe9, 0xd7, 0x2f, 0x8e, 0xb7, 0xc3, 0xda, 0x87, 0xb5, 0x53, 0xa9, 0x6f, 0x91, 0xbe, 0x92,
	0x9a, 0xa4, 0x8c, 0x6b, 0x3a, 0xf6, 0x1d, 0xf9, 0x07, 0xdf, 0xd1, 0xd9, 0xbe, 0xff, 0x94, 0x20,
	0x33, 0xdd, 0xc4, 0x6f, 0x2d, 0x7a, 0x76, 0xbd, 0x8f, 0xff, 0xbc, 0xa5, 0x06, 0xec, 0x06, 0xb3,
	0xaa, 0x16, 0xa4, 0x23, 0xb9, 0xc8, 0xfd, 0xf8, 0xbc, 0x56, 0xce, 0xac, 0xb4, 0x32, 0x07, 0x95,
	0xff, 0x4b, 0x82, 0xb5, 0xb2, 0x6e, 0x33, 0x46, 0x80, 0x9a, 0xb0, 0xce, 0xee, 0x08, 0xc3, 0xf2,
	0x74, 0x5b, 0xec, 0x67, 0x91, 0xc9, 0x9d, 0x20, 0x50, 0x03, 0xd6, 0xc6, 0x3f, 0x32, 0x61, 0xf7,
	0xfe, 0x3d, 0x6e, 0x42, 0x40, 0x35, 0x58, 0xe1, 0x23, 0x26, 0xda, 0xb9, 0x00, 0x4a, 0xa4, 0x1f,
	0xfd, 0x16, 0x81, 0xcd, 0xf7, 0x7e, 0x51, 0xd0, 0x43, 0xf8, 0xa8, 0x21, 0x57, 0x1f, 0xc9, 0x8a,
	0x26, 0x37, 0x3b, 0xca, 0x89, 0xd6, 0x39, 0x69, 0xcb, 0x5a, 0xb7, 0xa9, 0xb6, 0xe5, 0x4a, 0xbd,
	0x56, 0x97, 0xab, 0xa9, 0xa5, 0xcc, 0xe6, 0x70, 0x94, 0x8b, 0x77, 0x49, 0xe0, 0x61, 0xc3, 0xea,
	0x59, 0xd8, 0x44, 0x5f, 0x42, 0xf6, 0x76, 0x4e, 0xb5, 0xae, 0x96, 0xbb, 0x8a, 0x2a, 0x3f, 0x91,
	0x9b, 0x9d, 0x94, 0x94, 0x49, 0x0d, 0x47, 0xb9, 0x44, 0xd5, 0x0a, 0x4e, 0x07, 0x7e, 0x20, 0x4e,
	0xcd, 0x37, 0x70, 0x70, 0x3b, 0x4b, 0xad, 0x3c, 0x96, 0xab, 0xdd, 0x86, 0x5c, 0xd5, 0xda, 0xa5,
	0x13, 0x9e, 0xba, 0x9c, 0xd9, 0x19, 0x8e, 0x72, 0x5b, 0xaa, 0x71, 0x86, 0xcd, 0x81, 0x8d, 0x4d,
	0xad, 0xad, 0x5f, 0xf0, 0xfc, 0x32, 0x1c, 0xce, 0x74, 0x7a, 0x8b, 0x10, 0xc9, 0xec, 0x0d, 0x47,
	0xb9, 0xff, 0x75, 0x49, 0xf0, 0x61, 0x8c, 0x5a, 0x4b, 0x91, 0x2b, 0x8d, 0x96, 0xda, 0x55, 0xe4,
	0x09, 0x23, 0x2a, 0x18, 0x35, 0xd7, 0xc7, 0x86, 0xed, 0x06, 0x03, 0x1f, 0x4f, 0x18, 0x47, 0x70,
	0xe7, 0x36, 0x63, 0x9c, 0xb7, 0x92, 0x89, 0x0f, 0x47, 0xb9, 0xd5, 0xb1, 0x36, 0x0f, 0x3b, 0x33,
	0xbe, 0x4f, 0x96, 0x53, 0xb1, 0xcc, 0xea, 0x70, 0x94, 0x8b, 0xd4, 0x30, 0x46, 0xf7, 0x60, 0xef,
	0xb6, 0xa6, 0xd5, 0x79, 0x2c, 0x2b, 0xa9, 0xd5, 0xcc, 0xfa, 0x70, 0x94, 0x5b, 0x69, 0xf1, 0xee,
	0xbd, 0x91, 0x60, 0x67, 0xe6, 0x6d, 0x85, 0x3e, 0x86, 0x83, 0x5a, 0xb7, 0x59, 0xad, 0x37, 0x1f,
	0x69, 0x1d, 0xa5, 0xd4, 0x54, 0x6b, 0xb2, 0xa2, 0xa9, 0x9d, 0x52, 0xa7, 0xab, 0xde, 0xec, 0x24,
	0x3a, 0x80, 0xfd, 0x79, 0xc2, 0xb6, 0xcc, 0xe3, 0x29, 0x09, 0xdd, 0x83, 0xfc, 0x5c, 0x91, 0xd2,
	0xaa, 0xc8, 0xaa, 0xca, 0x74, 0xcb, 0xe8, 0x10, 0xee, 0xce, 0xd3, 0x55, 0x5a, 0x4f, 0xda, 0x0d,
	0xb9, 0x23, 0x57, 0x53, 0x11, 0x94, 0x87, 0xec, 0x3c, 0x59, 0xad, 0x54, 0x6f, 0xc8, 0xd5, 0x54,
	0xb4, 0xac, 0xbf, 0xbc, 0xcc, 0x4a, 0xaf, 0x2e, 0xb3, 0xd2, 0x1f, 0x97, 0x59, 0xe9, 0xc7, 0xab,
	0xec, 0xd2, 0xab, 0xab, 0xec, 0xd2, 0x9b, 0xab, 0xec, 0x12, 0xec, 0x59, 0xee, 0xcc, 0x61, 0x6f,
	0x4b, 0x4f, 0x3f, 0xeb, 0x5b, 0xf4, 0x6c, 0x70, 0x5a, 0x30, 0x5c, 0xa7, 0x78, 0x2d, 0x39, 0xb6,
	0xdc, 0xa9, 0x55, 0xf1, 0x79, 0xf8, 0x5f, 0xf8, 0x34, 0xc6, 0xff, 0xb2, 0x7e, 0xf1, 0x77, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xec, 0x36, 0xb4, 0x4d, 0x31, 0x0b, 0x00, 0x00,
}

func (m *Ledger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ledger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ledger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaturityDate) > 0 {
		i -= len(m.MaturityDate)
		copy(dAtA[i:], m.MaturityDate)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.MaturityDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InterestRate) > 0 {
		i -= len(m.InterestRate)
		copy(dAtA[i:], m.InterestRate)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.InterestRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NextPmtAmt) > 0 {
		i -= len(m.NextPmtAmt)
		copy(dAtA[i:], m.NextPmtAmt)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.NextPmtAmt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NextPmtDate) > 0 {
		i -= len(m.NextPmtDate)
		copy(dAtA[i:], m.NextPmtDate)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.NextPmtDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OtherBalAmt.Size()
		i -= size
		if _, err := m.OtherBalAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.OtherAppliedAmt.Size()
		i -= size
		if _, err := m.OtherAppliedAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.IntBalAmt.Size()
		i -= size
		if _, err := m.IntBalAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.IntAppliedAmt.Size()
		i -= size
		if _, err := m.IntAppliedAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.PrinBalAmt.Size()
		i -= size
		if _, err := m.PrinBalAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.PrinAppliedAmt.Size()
		i -= size
		if _, err := m.PrinAppliedAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Amt.Size()
		i -= size
		if _, err := m.Amt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.EffectiveDate) > 0 {
		i -= len(m.EffectiveDate)
		copy(dAtA[i:], m.EffectiveDate)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.EffectiveDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PostedDate) > 0 {
		i -= len(m.PostedDate)
		copy(dAtA[i:], m.PostedDate)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.PostedDate)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Sequence != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementBlock != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.SettlementBlock))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LedgerEntryCorrelationId) > 0 {
		i -= len(m.LedgerEntryCorrelationId)
		copy(dAtA[i:], m.LedgerEntryCorrelationId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.LedgerEntryCorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettlementInstruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettlementInstruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettlementInstruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementBlock != 0 {
		i = encodeVarintLedger(dAtA, i, uint64(m.SettlementBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientAddress) > 0 {
		i -= len(m.RecipientAddress)
		copy(dAtA[i:], m.RecipientAddress)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.RecipientAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FundTransferWithSettlement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundTransferWithSettlement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundTransferWithSettlement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SettlementInstructions) > 0 {
		for iNdEx := len(m.SettlementInstructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SettlementInstructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLedger(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LedgerEntryCorrelationId) > 0 {
		i -= len(m.LedgerEntryCorrelationId)
		copy(dAtA[i:], m.LedgerEntryCorrelationId)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.LedgerEntryCorrelationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftAddress) > 0 {
		i -= len(m.NftAddress)
		copy(dAtA[i:], m.NftAddress)
		i = encodeVarintLedger(dAtA, i, uint64(len(m.NftAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Balances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Other.Size()
		i -= size
		if _, err := m.Other.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Interest.Size()
		i -= size
		if _, err := m.Interest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Principal.Size()
		i -= size
		if _, err := m.Principal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLedger(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLedger(dAtA []byte, offset int, v uint64) int {
	offset -= sovLedger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ledger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.NextPmtDate)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.NextPmtAmt)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.InterestRate)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.MaturityDate)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	return n
}

func (m *LedgerEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovLedger(uint64(m.Sequence))
	}
	if m.Type != 0 {
		n += 1 + sovLedger(uint64(m.Type))
	}
	l = len(m.PostedDate)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.EffectiveDate)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = m.Amt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.PrinAppliedAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.PrinBalAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.IntAppliedAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.IntBalAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.OtherAppliedAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.OtherBalAmt.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func (m *FundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.LedgerEntryCorrelationId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovLedger(uint64(m.Status))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.SettlementBlock != 0 {
		n += 1 + sovLedger(uint64(m.SettlementBlock))
	}
	return n
}

func (m *SettlementInstruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.RecipientAddress)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if m.SettlementBlock != 0 {
		n += 1 + sovLedger(uint64(m.SettlementBlock))
	}
	return n
}

func (m *FundTransferWithSettlement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftAddress)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	l = len(m.LedgerEntryCorrelationId)
	if l > 0 {
		n += 1 + l + sovLedger(uint64(l))
	}
	if len(m.SettlementInstructions) > 0 {
		for _, e := range m.SettlementInstructions {
			l = e.Size()
			n += 1 + l + sovLedger(uint64(l))
		}
	}
	return n
}

func (m *Balances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Principal.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.Interest.Size()
	n += 1 + l + sovLedger(uint64(l))
	l = m.Other.Size()
	n += 1 + l + sovLedger(uint64(l))
	return n
}

func sovLedger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLedger(x uint64) (n int) {
	return sovLedger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ledger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ledger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ledger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPmtDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPmtAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPmtAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterestRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LedgerEntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrinAppliedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrinAppliedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrinBalAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrinBalAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntAppliedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntAppliedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntBalAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IntBalAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherAppliedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OtherAppliedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherBalAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OtherBalAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryCorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryCorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= FundingTransferStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementBlock", wireType)
			}
			m.SettlementBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettlementInstruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettlementInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettlementInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementBlock", wireType)
			}
			m.SettlementBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettlementBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundTransferWithSettlement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundTransferWithSettlement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundTransferWithSettlement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LedgerEntryCorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LedgerEntryCorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementInstructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlementInstructions = append(m.SettlementInstructions, &SettlementInstruction{})
			if err := m.SettlementInstructions[len(m.SettlementInstructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Interest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLedger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLedger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Other.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLedger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLedger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLedger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLedger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLedger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLedger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLedger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLedger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLedger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLedger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLedger = fmt.Errorf("proto: unexpected end of group")
)
