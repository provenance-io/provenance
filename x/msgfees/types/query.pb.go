// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/msgfees/v1/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAllMsgFeesRequest queries all Msg which have fees associated with them.
type QueryAllMsgFeesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMsgFeesRequest) Reset()         { *m = QueryAllMsgFeesRequest{} }
func (m *QueryAllMsgFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMsgFeesRequest) ProtoMessage()    {}
func (*QueryAllMsgFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{2}
}
func (m *QueryAllMsgFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMsgFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMsgFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMsgFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMsgFeesRequest.Merge(m, src)
}
func (m *QueryAllMsgFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMsgFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMsgFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMsgFeesRequest proto.InternalMessageInfo

func (m *QueryAllMsgFeesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// response for querying all msg's with fees associated with them
type QueryAllMsgFeesResponse struct {
	MsgFees []*MsgFee `protobuf:"bytes,1,rep,name=msg_fees,json=msgFees,proto3" json:"msg_fees,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMsgFeesResponse) Reset()         { *m = QueryAllMsgFeesResponse{} }
func (m *QueryAllMsgFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMsgFeesResponse) ProtoMessage()    {}
func (*QueryAllMsgFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{3}
}
func (m *QueryAllMsgFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMsgFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMsgFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMsgFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMsgFeesResponse.Merge(m, src)
}
func (m *QueryAllMsgFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMsgFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMsgFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMsgFeesResponse proto.InternalMessageInfo

func (m *QueryAllMsgFeesResponse) GetMsgFees() []*MsgFee {
	if m != nil {
		return m.MsgFees
	}
	return nil
}

func (m *QueryAllMsgFeesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// CalculateTxFeesRequest is the request type for the Query RPC method.
type CalculateTxFeesRequest struct {
	// tx_bytes is the transaction to simulate.
	TxBytes []byte `protobuf:"bytes,1,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	// default_base_denom is used to set the denom used for gas fees
	// if not set it will default to nhash.
	DefaultBaseDenom string `protobuf:"bytes,2,opt,name=default_base_denom,json=defaultBaseDenom,proto3" json:"default_base_denom,omitempty"`
	// gas_adjustment is the adjustment factor to be multiplied against the estimate returned by the tx simulation
	GasAdjustment float32 `protobuf:"fixed32,3,opt,name=gas_adjustment,json=gasAdjustment,proto3" json:"gas_adjustment,omitempty"`
}

func (m *CalculateTxFeesRequest) Reset()         { *m = CalculateTxFeesRequest{} }
func (m *CalculateTxFeesRequest) String() string { return proto.CompactTextString(m) }
func (*CalculateTxFeesRequest) ProtoMessage()    {}
func (*CalculateTxFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{4}
}
func (m *CalculateTxFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateTxFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateTxFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateTxFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateTxFeesRequest.Merge(m, src)
}
func (m *CalculateTxFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *CalculateTxFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateTxFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateTxFeesRequest proto.InternalMessageInfo

func (m *CalculateTxFeesRequest) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *CalculateTxFeesRequest) GetDefaultBaseDenom() string {
	if m != nil {
		return m.DefaultBaseDenom
	}
	return ""
}

func (m *CalculateTxFeesRequest) GetGasAdjustment() float32 {
	if m != nil {
		return m.GasAdjustment
	}
	return 0
}

// CalculateTxFeesResponse is the response type for the Query RPC method.
type CalculateTxFeesResponse struct {
	// additional_fees are the amount of coins to be for addition msg fees
	AdditionalFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=additional_fees,json=additionalFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"additional_fees"`
	// total_fees are the total amount of fees needed for the transactions (msg fees + gas fee)
	// note: the gas fee is calculated with the min gas fee param as a constant
	TotalFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_fees,json=totalFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_fees"`
	// estimated_gas is the amount of gas needed for the transaction
	EstimatedGas uint64 `protobuf:"varint,3,opt,name=estimated_gas,json=estimatedGas,proto3" json:"estimated_gas,omitempty" yaml:"estimated_gas"`
}

func (m *CalculateTxFeesResponse) Reset()         { *m = CalculateTxFeesResponse{} }
func (m *CalculateTxFeesResponse) String() string { return proto.CompactTextString(m) }
func (*CalculateTxFeesResponse) ProtoMessage()    {}
func (*CalculateTxFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f2d53a5aebf81b, []int{5}
}
func (m *CalculateTxFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CalculateTxFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CalculateTxFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CalculateTxFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalculateTxFeesResponse.Merge(m, src)
}
func (m *CalculateTxFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CalculateTxFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CalculateTxFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CalculateTxFeesResponse proto.InternalMessageInfo

func (m *CalculateTxFeesResponse) GetAdditionalFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AdditionalFees
	}
	return nil
}

func (m *CalculateTxFeesResponse) GetTotalFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

func (m *CalculateTxFeesResponse) GetEstimatedGas() uint64 {
	if m != nil {
		return m.EstimatedGas
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.msgfees.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.msgfees.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAllMsgFeesRequest)(nil), "provenance.msgfees.v1.QueryAllMsgFeesRequest")
	proto.RegisterType((*QueryAllMsgFeesResponse)(nil), "provenance.msgfees.v1.QueryAllMsgFeesResponse")
	proto.RegisterType((*CalculateTxFeesRequest)(nil), "provenance.msgfees.v1.CalculateTxFeesRequest")
	proto.RegisterType((*CalculateTxFeesResponse)(nil), "provenance.msgfees.v1.CalculateTxFeesResponse")
}

func init() { proto.RegisterFile("provenance/msgfees/v1/query.proto", fileDescriptor_73f2d53a5aebf81b) }

var fileDescriptor_73f2d53a5aebf81b = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0x3b, 0x05, 0x79, 0x19, 0x79, 0x31, 0x23, 0x42, 0x69, 0xa0, 0xc5, 0x35, 0x28, 0x10,
	0xd9, 0xb5, 0xe0, 0xc1, 0x60, 0x3c, 0x50, 0x0c, 0x9c, 0x4c, 0x70, 0xe3, 0xc9, 0xcb, 0x3a, 0xed,
	0x0e, 0xeb, 0xe2, 0xee, 0xce, 0xd2, 0x99, 0x6d, 0xda, 0xab, 0x07, 0xe3, 0xd1, 0x44, 0x8f, 0x9e,
	0x3d, 0xf8, 0x11, 0xfc, 0x04, 0x1c, 0x49, 0xbc, 0x78, 0x42, 0x03, 0x7e, 0x02, 0x3f, 0x81, 0x99,
	0x97, 0xb6, 0x5b, 0xda, 0x22, 0x07, 0x4f, 0xed, 0xcc, 0xf3, 0x3c, 0xf3, 0xff, 0x3d, 0xcf, 0xfe,
	0x67, 0xe0, 0xed, 0xb8, 0x46, 0xeb, 0x24, 0xc2, 0x51, 0x95, 0x58, 0x21, 0xf3, 0x0e, 0x08, 0x61,
	0x56, 0xbd, 0x64, 0x1d, 0x25, 0xa4, 0xd6, 0x34, 0xe3, 0x1a, 0xe5, 0x14, 0xdd, 0xea, 0xa4, 0x98,
	0x3a, 0xc5, 0xac, 0x97, 0xf2, 0x33, 0x1e, 0xf5, 0xa8, 0xcc, 0xb0, 0xc4, 0x3f, 0x95, 0x9c, 0x9f,
	0xf7, 0x28, 0xf5, 0x02, 0x62, 0xc9, 0x55, 0x25, 0x39, 0xb0, 0x70, 0xa4, 0xcf, 0xc9, 0x2f, 0xe8,
	0x10, 0x8e, 0x7d, 0x0b, 0x47, 0x11, 0xe5, 0x98, 0xfb, 0x34, 0x62, 0x3a, 0x7a, 0xa7, 0x3f, 0x48,
	0x4b, 0x50, 0x9f, 0x5e, 0xa5, 0x2c, 0xa4, 0xcc, 0x51, 0xb2, 0x6a, 0xa1, 0x43, 0x05, 0xb5, 0xb2,
	0x2a, 0x98, 0x11, 0xab, 0x5e, 0xaa, 0x10, 0x8e, 0x4b, 0x56, 0x95, 0xfa, 0x91, 0x8e, 0xaf, 0xa5,
	0xe3, 0xb2, 0xbd, 0x76, 0x56, 0x8c, 0x3d, 0x3f, 0x92, 0x30, 0x2a, 0xd7, 0x98, 0x81, 0xe8, 0xb9,
	0xc8, 0xd8, 0xc7, 0x35, 0x1c, 0x32, 0x9b, 0x1c, 0x25, 0x84, 0x71, 0xc3, 0x86, 0x37, 0xbb, 0x76,
	0x59, 0x4c, 0x23, 0x46, 0xd0, 0x63, 0x38, 0x12, 0xcb, 0x9d, 0x1c, 0x58, 0x02, 0x2b, 0xd7, 0x37,
	0x16, 0xcd, 0xbe, 0xf3, 0x32, 0x55, 0x59, 0x79, 0xf8, 0xf8, 0xb4, 0x98, 0xb1, 0x75, 0x89, 0xf1,
	0x0a, 0xce, 0xca, 0x33, 0xb7, 0x83, 0xe0, 0x19, 0xf3, 0x76, 0x09, 0x69, 0xa9, 0xa1, 0x5d, 0x08,
	0x3b, 0x5c, 0xb9, 0xac, 0x3c, 0xfa, 0xae, 0xa9, 0x5b, 0x16, 0x4d, 0x98, 0xea, 0x1b, 0xe9, 0x26,
	0xcc, 0x7d, 0xec, 0x11, 0x5d, 0x6b, 0xa7, 0x2a, 0x8d, 0xcf, 0x00, 0xce, 0xf5, 0x48, 0x68, 0xf4,
	0x47, 0x70, 0x2c, 0x64, 0x9e, 0x23, 0x08, 0x73, 0x60, 0x69, 0xe8, 0x12, 0x78, 0x55, 0x69, 0x8f,
	0x86, 0xea, 0x04, 0xb4, 0xd7, 0x87, 0xee, 0xde, 0x3f, 0xe9, 0x94, 0x6c, 0x17, 0xde, 0x7b, 0x00,
	0x67, 0x77, 0x70, 0x50, 0x4d, 0x02, 0xcc, 0xc9, 0x8b, 0x46, 0x7a, 0x02, 0xf3, 0x70, 0x8c, 0x37,
	0x9c, 0x4a, 0x93, 0x13, 0x35, 0xda, 0x09, 0x7b, 0x94, 0x37, 0xca, 0x62, 0x89, 0xee, 0x43, 0xe4,
	0x92, 0x03, 0x9c, 0x04, 0xdc, 0x11, 0x62, 0x8e, 0x4b, 0x22, 0x1a, 0x4a, 0x8c, 0x71, 0xfb, 0x86,
	0x8e, 0x94, 0x31, 0x23, 0x4f, 0xc5, 0x3e, 0x5a, 0x86, 0x53, 0x1e, 0x66, 0x0e, 0x76, 0x0f, 0x13,
	0xc6, 0x43, 0x12, 0xf1, 0xdc, 0xd0, 0x12, 0x58, 0xc9, 0xda, 0x93, 0x1e, 0x66, 0xdb, 0xed, 0x4d,
	0xe3, 0x5b, 0x16, 0xce, 0xf5, 0xa0, 0xe8, 0x49, 0x71, 0x38, 0x8d, 0x5d, 0xd7, 0x17, 0xc8, 0x38,
	0x48, 0x0f, 0x6c, 0xbe, 0xab, 0xe9, 0x56, 0xbb, 0x3b, 0xd4, 0x8f, 0xca, 0x0f, 0xc4, 0x97, 0xfe,
	0xfa, 0xb3, 0xb8, 0xe2, 0xf9, 0xfc, 0x75, 0x52, 0x31, 0xab, 0x34, 0xd4, 0x96, 0xd5, 0x3f, 0xeb,
	0xcc, 0x7d, 0x63, 0xf1, 0x66, 0x4c, 0x98, 0x2c, 0x60, 0xf6, 0x54, 0x47, 0x43, 0x4e, 0xf9, 0x10,
	0x42, 0x4e, 0x79, 0x4b, 0x30, 0xfb, 0xff, 0x05, 0xc7, 0xe5, 0xf1, 0x52, 0xeb, 0x09, 0x9c, 0x24,
	0x8c, 0xfb, 0x21, 0xe6, 0xc4, 0x75, 0x3c, 0xcc, 0xe4, 0x8c, 0x86, 0xcb, 0xb9, 0x3f, 0xa7, 0xc5,
	0x99, 0x26, 0x0e, 0x83, 0x2d, 0xa3, 0x2b, 0x6c, 0xd8, 0x13, 0xed, 0xf5, 0x1e, 0x66, 0x1b, 0x27,
	0x43, 0xf0, 0x9a, 0xb4, 0x19, 0x7a, 0x07, 0xe0, 0x88, 0xf2, 0x3a, 0x5a, 0x1d, 0xe0, 0xa6, 0xde,
	0xcb, 0x95, 0x5f, 0xbb, 0x4a, 0xaa, 0xfa, 0x18, 0xc6, 0xf2, 0xdb, 0xef, 0xbf, 0x3f, 0x66, 0x8b,
	0x68, 0xd1, 0xea, 0xff, 0x66, 0xa8, 0xbb, 0x85, 0x3e, 0x01, 0x38, 0x7d, 0xc1, 0xf9, 0x68, 0xfd,
	0x32, 0x99, 0x9e, 0x4b, 0x98, 0x37, 0xaf, 0x9a, 0xae, 0xc9, 0x0c, 0x49, 0xb6, 0x80, 0xf2, 0x03,
	0xc8, 0x70, 0x10, 0xa0, 0x2f, 0x00, 0x4e, 0x5f, 0xb0, 0xd9, 0x40, 0xac, 0xfe, 0x37, 0x63, 0x20,
	0xd6, 0x00, 0xf7, 0x1a, 0x0f, 0x25, 0x96, 0x69, 0xac, 0xa6, 0xb1, 0x78, 0x43, 0x10, 0x55, 0x5b,
	0x25, 0x8e, 0x78, 0x09, 0x84, 0xa7, 0x5c, 0xe1, 0xb6, 0x2d, 0xb0, 0x56, 0xf6, 0x8f, 0xcf, 0x0a,
	0xe0, 0xe4, 0xac, 0x00, 0x7e, 0x9d, 0x15, 0xc0, 0x87, 0xf3, 0x42, 0xe6, 0xe4, 0xbc, 0x90, 0xf9,
	0x71, 0x5e, 0xc8, 0xc0, 0x9c, 0x4f, 0xfb, 0x13, 0xec, 0x83, 0x97, 0x9b, 0x29, 0xf3, 0x75, 0x72,
	0xd6, 0x7d, 0x9a, 0xd6, 0x6e, 0xb4, 0x87, 0x22, 0xdd, 0x58, 0x19, 0x91, 0xef, 0xee, 0xe6, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0xf8, 0x5c, 0xa4, 0x8e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters for x/msgfees
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Query all Msgs which have fees associated with them.
	QueryAllMsgFees(ctx context.Context, in *QueryAllMsgFeesRequest, opts ...grpc.CallOption) (*QueryAllMsgFeesResponse, error)
	// CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees.
	CalculateTxFees(ctx context.Context, in *CalculateTxFeesRequest, opts ...grpc.CallOption) (*CalculateTxFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.msgfees.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllMsgFees(ctx context.Context, in *QueryAllMsgFeesRequest, opts ...grpc.CallOption) (*QueryAllMsgFeesResponse, error) {
	out := new(QueryAllMsgFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.msgfees.v1.Query/QueryAllMsgFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateTxFees(ctx context.Context, in *CalculateTxFeesRequest, opts ...grpc.CallOption) (*CalculateTxFeesResponse, error) {
	out := new(CalculateTxFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.msgfees.v1.Query/CalculateTxFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters for x/msgfees
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Query all Msgs which have fees associated with them.
	QueryAllMsgFees(context.Context, *QueryAllMsgFeesRequest) (*QueryAllMsgFeesResponse, error)
	// CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees.
	CalculateTxFees(context.Context, *CalculateTxFeesRequest) (*CalculateTxFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryAllMsgFees(ctx context.Context, req *QueryAllMsgFeesRequest) (*QueryAllMsgFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllMsgFees not implemented")
}
func (*UnimplementedQueryServer) CalculateTxFees(ctx context.Context, req *CalculateTxFeesRequest) (*CalculateTxFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTxFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.msgfees.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllMsgFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMsgFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllMsgFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.msgfees.v1.Query/QueryAllMsgFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllMsgFees(ctx, req.(*QueryAllMsgFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateTxFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateTxFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateTxFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.msgfees.v1.Query/CalculateTxFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateTxFees(ctx, req.(*CalculateTxFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.msgfees.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryAllMsgFees",
			Handler:    _Query_QueryAllMsgFees_Handler,
		},
		{
			MethodName: "CalculateTxFees",
			Handler:    _Query_CalculateTxFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/msgfees/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMsgFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMsgFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMsgFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMsgFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMsgFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMsgFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgFees) > 0 {
		for iNdEx := len(m.MsgFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CalculateTxFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateTxFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateTxFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasAdjustment != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GasAdjustment))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.DefaultBaseDenom) > 0 {
		i -= len(m.DefaultBaseDenom)
		copy(dAtA[i:], m.DefaultBaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DefaultBaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CalculateTxFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CalculateTxFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CalculateTxFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EstimatedGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EstimatedGas))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AdditionalFees) > 0 {
		for iNdEx := len(m.AdditionalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMsgFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMsgFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MsgFees) > 0 {
		for _, e := range m.MsgFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CalculateTxFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DefaultBaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GasAdjustment != 0 {
		n += 5
	}
	return n
}

func (m *CalculateTxFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdditionalFees) > 0 {
		for _, e := range m.AdditionalFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.EstimatedGas != 0 {
		n += 1 + sovQuery(uint64(m.EstimatedGas))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMsgFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMsgFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMsgFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMsgFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMsgFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMsgFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgFees = append(m.MsgFees, &MsgFee{})
			if err := m.MsgFees[len(m.MsgFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateTxFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateTxFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateTxFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytes == nil {
				m.TxBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAdjustment", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GasAdjustment = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CalculateTxFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CalculateTxFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CalculateTxFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalFees = append(m.AdditionalFees, types.Coin{})
			if err := m.AdditionalFees[len(m.AdditionalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedGas", wireType)
			}
			m.EstimatedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
