// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/msgfees/v1/msgfees.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the msgfees module.
type Params struct {
	// floor_gas_price is the constant used to calculate fees when gas fees shares denom with msg fee.
	//
	// Conversions:
	//   - x nhash/usd-mil = 1,000,000/x usd/hash
	//   - y usd/hash = 1,000,000/y nhash/usd-mil
	//
	// Examples:
	//   - 40,000,000 nhash/usd-mil = 1,000,000/40,000,000 usd/hash = $0.025/hash,
	//   - $0.040/hash = 1,000,000/0.040 nhash/usd-mil = 25,000,000 nhash/usd-mil
	FloorGasPrice types.Coin `protobuf:"bytes,2,opt,name=floor_gas_price,json=floorGasPrice,proto3" json:"floor_gas_price"`
	// nhash_per_usd_mil is the total nhash per usd mil for converting usd to nhash.
	NhashPerUsdMil uint64 `protobuf:"varint,3,opt,name=nhash_per_usd_mil,json=nhashPerUsdMil,proto3" json:"nhash_per_usd_mil,omitempty"`
	// conversion_fee_denom is the denom usd is converted to.
	ConversionFeeDenom string `protobuf:"bytes,4,opt,name=conversion_fee_denom,json=conversionFeeDenom,proto3" json:"conversion_fee_denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6265859d114362, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFloorGasPrice() types.Coin {
	if m != nil {
		return m.FloorGasPrice
	}
	return types.Coin{}
}

func (m *Params) GetNhashPerUsdMil() uint64 {
	if m != nil {
		return m.NhashPerUsdMil
	}
	return 0
}

func (m *Params) GetConversionFeeDenom() string {
	if m != nil {
		return m.ConversionFeeDenom
	}
	return ""
}

// MsgFee is the core of what gets stored on the blockchain to define a msg-based fee.
type MsgFee struct {
	// msg_type_url is the type-url of the message with the added fee, e.g. "/cosmos.bank.v1beta1.MsgSend".
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	// additional_fee is the extra fee that is required for the given message type (can be in any denom).
	AdditionalFee types.Coin `protobuf:"bytes,2,opt,name=additional_fee,json=additionalFee,proto3" json:"additional_fee"`
	// recipient is an option address that will receive a portion of the additional fee.
	// There can only be a recipient if the recipient_basis_points is not zero.
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// recipient_basis_points is an optional portion of the additional fee to be sent to the recipient.
	// Must be between 0 and 10,000 (inclusive).
	//
	// If there is a recipient, this must not be zero. If there is not a recipient, this must be zero.
	//
	// The recipient will receive additional_fee * recipient_basis_points / 10,000.
	// The fee collector will receive the rest, i.e. additional_fee * (10,000 - recipient_basis_points) / 10,000.
	RecipientBasisPoints uint32 `protobuf:"varint,4,opt,name=recipient_basis_points,json=recipientBasisPoints,proto3" json:"recipient_basis_points,omitempty"`
}

func (m *MsgFee) Reset()         { *m = MsgFee{} }
func (m *MsgFee) String() string { return proto.CompactTextString(m) }
func (*MsgFee) ProtoMessage()    {}
func (*MsgFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6265859d114362, []int{1}
}
func (m *MsgFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFee.Merge(m, src)
}
func (m *MsgFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFee proto.InternalMessageInfo

func (m *MsgFee) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *MsgFee) GetAdditionalFee() types.Coin {
	if m != nil {
		return m.AdditionalFee
	}
	return types.Coin{}
}

func (m *MsgFee) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *MsgFee) GetRecipientBasisPoints() uint32 {
	if m != nil {
		return m.RecipientBasisPoints
	}
	return 0
}

// EventMsgFee final event property for msg fee on type
type EventMsgFee struct {
	MsgType   string `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	Count     string `protobuf:"bytes,2,opt,name=count,proto3" json:"count,omitempty"`
	Total     string `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *EventMsgFee) Reset()         { *m = EventMsgFee{} }
func (m *EventMsgFee) String() string { return proto.CompactTextString(m) }
func (*EventMsgFee) ProtoMessage()    {}
func (*EventMsgFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6265859d114362, []int{2}
}
func (m *EventMsgFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMsgFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMsgFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMsgFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMsgFee.Merge(m, src)
}
func (m *EventMsgFee) XXX_Size() int {
	return m.Size()
}
func (m *EventMsgFee) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMsgFee.DiscardUnknown(m)
}

var xxx_messageInfo_EventMsgFee proto.InternalMessageInfo

func (m *EventMsgFee) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *EventMsgFee) GetCount() string {
	if m != nil {
		return m.Count
	}
	return ""
}

func (m *EventMsgFee) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *EventMsgFee) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// EventMsgFees event emitted with summary of msg fees
type EventMsgFees struct {
	MsgFees []EventMsgFee `protobuf:"bytes,1,rep,name=msg_fees,json=msgFees,proto3" json:"msg_fees"`
}

func (m *EventMsgFees) Reset()         { *m = EventMsgFees{} }
func (m *EventMsgFees) String() string { return proto.CompactTextString(m) }
func (*EventMsgFees) ProtoMessage()    {}
func (*EventMsgFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c6265859d114362, []int{3}
}
func (m *EventMsgFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMsgFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMsgFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMsgFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMsgFees.Merge(m, src)
}
func (m *EventMsgFees) XXX_Size() int {
	return m.Size()
}
func (m *EventMsgFees) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMsgFees.DiscardUnknown(m)
}

var xxx_messageInfo_EventMsgFees proto.InternalMessageInfo

func (m *EventMsgFees) GetMsgFees() []EventMsgFee {
	if m != nil {
		return m.MsgFees
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "provenance.msgfees.v1.Params")
	proto.RegisterType((*MsgFee)(nil), "provenance.msgfees.v1.MsgFee")
	proto.RegisterType((*EventMsgFee)(nil), "provenance.msgfees.v1.EventMsgFee")
	proto.RegisterType((*EventMsgFees)(nil), "provenance.msgfees.v1.EventMsgFees")
}

func init() {
	proto.RegisterFile("provenance/msgfees/v1/msgfees.proto", fileDescriptor_0c6265859d114362)
}

var fileDescriptor_0c6265859d114362 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xd2, 0x10, 0xc8, 0xa6, 0x2d, 0xc2, 0x0a, 0xc8, 0xad, 0x90, 0x1b, 0x85, 0x4b, 0x38,
	0x60, 0x93, 0x96, 0x13, 0xc7, 0x14, 0xd2, 0x53, 0xa5, 0xc8, 0xd0, 0x0b, 0x97, 0xd5, 0xc6, 0x99,
	0x38, 0x2b, 0xd9, 0x3b, 0xd6, 0xee, 0xc6, 0xa2, 0x7f, 0xc1, 0x27, 0xf0, 0x11, 0x7c, 0x03, 0xea,
	0xb1, 0x47, 0x4e, 0x08, 0x25, 0x17, 0x3e, 0x03, 0xad, 0xed, 0xc4, 0x01, 0xf5, 0xd0, 0xdb, 0xce,
	0xbe, 0x79, 0x6f, 0xde, 0x5b, 0xcd, 0xd2, 0x97, 0x99, 0xc2, 0x1c, 0x24, 0x97, 0x11, 0x04, 0xa9,
	0x8e, 0xe7, 0x00, 0x3a, 0xc8, 0x87, 0x9b, 0xa3, 0x9f, 0x29, 0x34, 0xe8, 0x3c, 0xab, 0x9b, 0xfc,
	0x0d, 0x92, 0x0f, 0x8f, 0xbb, 0x31, 0xc6, 0x58, 0x74, 0x04, 0xf6, 0x54, 0x36, 0x1f, 0x7b, 0x11,
	0xea, 0x14, 0x75, 0x30, 0xe5, 0x1a, 0x82, 0x7c, 0x38, 0x05, 0xc3, 0x87, 0x41, 0x84, 0x42, 0x96,
	0x78, 0xff, 0x3b, 0xa1, 0xad, 0x09, 0x57, 0x3c, 0xd5, 0xce, 0x05, 0x7d, 0x32, 0x4f, 0x10, 0x15,
	0x8b, 0xb9, 0x66, 0x99, 0x12, 0x11, 0xb8, 0x0f, 0x7a, 0x64, 0xd0, 0x39, 0x3d, 0xf2, 0x4b, 0x11,
	0xdf, 0x8a, 0xf8, 0x95, 0x88, 0x7f, 0x8e, 0x42, 0x8e, 0x9a, 0x37, 0xbf, 0x4e, 0x1a, 0xe1, 0x41,
	0xc1, 0xbb, 0xe0, 0x7a, 0x62, 0x59, 0xce, 0x2b, 0xfa, 0x54, 0x2e, 0xb8, 0x5e, 0xb0, 0x0c, 0x14,
	0x5b, 0xea, 0x19, 0x4b, 0x45, 0xe2, 0xee, 0xf5, 0xc8, 0xa0, 0x19, 0x1e, 0x16, 0xc0, 0x04, 0xd4,
	0x95, 0x9e, 0x5d, 0x8a, 0xc4, 0x79, 0x43, 0xbb, 0x11, 0xca, 0x1c, 0x94, 0x16, 0x28, 0xd9, 0x1c,
	0x80, 0xcd, 0x40, 0x62, 0xea, 0x36, 0x7b, 0x64, 0xd0, 0x0e, 0x9d, 0x1a, 0x1b, 0x03, 0xbc, 0xb7,
	0xc8, 0xbb, 0xe6, 0x9f, 0x6f, 0x27, 0x8d, 0xfe, 0x0f, 0x42, 0x5b, 0x97, 0x3a, 0x1e, 0x03, 0x38,
	0x3d, 0xba, 0x9f, 0xea, 0x98, 0x99, 0xeb, 0x0c, 0xd8, 0x52, 0x25, 0x2e, 0x29, 0xa8, 0x34, 0xd5,
	0xf1, 0xa7, 0xeb, 0x0c, 0xae, 0x54, 0xe2, 0x8c, 0xe9, 0x21, 0x9f, 0xcd, 0x84, 0x11, 0x28, 0x79,
	0x62, 0x87, 0xdc, 0x3b, 0x57, 0x4d, 0xb3, 0x93, 0x5e, 0xd0, 0xb6, 0x82, 0x48, 0x64, 0x02, 0xa4,
	0x29, 0xf2, 0xb4, 0xc3, 0xfa, 0xc2, 0x79, 0x4b, 0x9f, 0x6f, 0x0b, 0x36, 0xe5, 0x5a, 0x68, 0x96,
	0xa1, 0x90, 0x46, 0x17, 0x61, 0x0e, 0xc2, 0xee, 0x16, 0x1d, 0x59, 0x70, 0x52, 0x60, 0x7d, 0x45,
	0x3b, 0x1f, 0x72, 0x90, 0xa6, 0x0a, 0x73, 0x44, 0x1f, 0x6f, 0xc2, 0x54, 0x41, 0x1e, 0x55, 0x41,
	0x9c, 0x2e, 0x7d, 0x18, 0xe1, 0x52, 0x9a, 0xc2, 0x7c, 0x3b, 0x2c, 0x0b, 0x7b, 0x6b, 0xd0, 0xf0,
	0xa4, 0xf2, 0x53, 0x16, 0xff, 0x3a, 0x6d, 0xfe, 0xe7, 0xb4, 0xff, 0x91, 0xee, 0xef, 0xcc, 0xd4,
	0xce, 0x79, 0x39, 0xd4, 0x2e, 0x92, 0x4b, 0x7a, 0x7b, 0x83, 0xce, 0x69, 0xdf, 0xbf, 0x73, 0xc7,
	0xfc, 0x1d, 0x5a, 0xf5, 0x44, 0xd6, 0x9e, 0x15, 0x19, 0x89, 0x9b, 0x95, 0x47, 0x6e, 0x57, 0x1e,
	0xf9, 0xbd, 0xf2, 0xc8, 0xd7, 0xb5, 0xd7, 0xb8, 0x5d, 0x7b, 0x8d, 0x9f, 0x6b, 0xaf, 0x41, 0x5d,
	0x81, 0x77, 0xcb, 0x4d, 0xc8, 0xe7, 0xb3, 0x58, 0x98, 0xc5, 0x72, 0xea, 0x47, 0x98, 0x06, 0x75,
	0xcf, 0x6b, 0x81, 0x3b, 0x55, 0xf0, 0x65, 0xfb, 0x17, 0xec, 0xbb, 0xe8, 0x69, 0xab, 0x58, 0xdd,
	0xb3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xf6, 0x22, 0x0d, 0x2e, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversionFeeDenom) > 0 {
		i -= len(m.ConversionFeeDenom)
		copy(dAtA[i:], m.ConversionFeeDenom)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.ConversionFeeDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.NhashPerUsdMil != 0 {
		i = encodeVarintMsgfees(dAtA, i, uint64(m.NhashPerUsdMil))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.FloorGasPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *MsgFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecipientBasisPoints != 0 {
		i = encodeVarintMsgfees(dAtA, i, uint64(m.RecipientBasisPoints))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.AdditionalFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMsgFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMsgFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMsgFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Count) > 0 {
		i -= len(m.Count)
		copy(dAtA[i:], m.Count)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.Count)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintMsgfees(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMsgFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMsgFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMsgFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgFees) > 0 {
		for iNdEx := len(m.MsgFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgfees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgfees(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgfees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FloorGasPrice.Size()
	n += 1 + l + sovMsgfees(uint64(l))
	if m.NhashPerUsdMil != 0 {
		n += 1 + sovMsgfees(uint64(m.NhashPerUsdMil))
	}
	l = len(m.ConversionFeeDenom)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	return n
}

func (m *MsgFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	l = m.AdditionalFee.Size()
	n += 1 + l + sovMsgfees(uint64(l))
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	if m.RecipientBasisPoints != 0 {
		n += 1 + sovMsgfees(uint64(m.RecipientBasisPoints))
	}
	return n
}

func (m *EventMsgFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	l = len(m.Count)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovMsgfees(uint64(l))
	}
	return n
}

func (m *EventMsgFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MsgFees) > 0 {
		for _, e := range m.MsgFees {
			l = e.Size()
			n += 1 + l + sovMsgfees(uint64(l))
		}
	}
	return n
}

func sovMsgfees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgfees(x uint64) (n int) {
	return sovMsgfees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloorGasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FloorGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NhashPerUsdMil", wireType)
			}
			m.NhashPerUsdMil = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NhashPerUsdMil |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionFeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversionFeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AdditionalFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientBasisPoints", wireType)
			}
			m.RecipientBasisPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecipientBasisPoints |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMsgFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMsgFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMsgFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Count = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMsgFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMsgFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMsgFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgFees = append(m.MsgFees, EventMsgFee{})
			if err := m.MsgFees[len(m.MsgFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgfees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgfees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgfees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgfees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgfees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgfees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgfees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgfees = fmt.Errorf("proto: unexpected end of group")
)
