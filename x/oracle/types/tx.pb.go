// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/oracle/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_CosmWasm_wasmd_x_wasm_types "github.com/CosmWasm/wasmd/x/wasm/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgQueryOracleRequest queries an Oracle on another chain
type MsgQueryOracleRequest struct {
	// Query contains the query data passed to the oracle.
	Query github_com_CosmWasm_wasmd_x_wasm_types.RawContractMessage `protobuf:"bytes,1,opt,name=query,proto3,casttype=github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage" json:"query,omitempty"`
	// Source port is the source port to the oracle.
	SourcePort string `protobuf:"bytes,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// Source channel is the channel to the oracle.
	SourceChannel string `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
}

func (m *MsgQueryOracleRequest) Reset()         { *m = MsgQueryOracleRequest{} }
func (m *MsgQueryOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgQueryOracleRequest) ProtoMessage()    {}
func (*MsgQueryOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39dda41c6a784, []int{0}
}
func (m *MsgQueryOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQueryOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQueryOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQueryOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQueryOracleRequest.Merge(m, src)
}
func (m *MsgQueryOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgQueryOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQueryOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQueryOracleRequest proto.InternalMessageInfo

func (m *MsgQueryOracleRequest) GetQuery() github_com_CosmWasm_wasmd_x_wasm_types.RawContractMessage {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *MsgQueryOracleRequest) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *MsgQueryOracleRequest) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

// MsgQueryOracleResponse contains the id of the oracle query.
type MsgQueryOracleResponse struct {
	// The id that uniquely identifies the query.
	QueryId uint64 `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *MsgQueryOracleResponse) Reset()         { *m = MsgQueryOracleResponse{} }
func (m *MsgQueryOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgQueryOracleResponse) ProtoMessage()    {}
func (*MsgQueryOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39dda41c6a784, []int{1}
}
func (m *MsgQueryOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQueryOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQueryOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQueryOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQueryOracleResponse.Merge(m, src)
}
func (m *MsgQueryOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgQueryOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQueryOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQueryOracleResponse proto.InternalMessageInfo

func (m *MsgQueryOracleResponse) GetQueryId() uint64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

// MsgUpdateOracleRequest is the request type for updating an oracle's contract address
type MsgUpdateOracleRequest struct {
	// The address of the oracle's contract
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The signing authorities for the request
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpdateOracleRequest) Reset()         { *m = MsgUpdateOracleRequest{} }
func (m *MsgUpdateOracleRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleRequest) ProtoMessage()    {}
func (*MsgUpdateOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39dda41c6a784, []int{2}
}
func (m *MsgUpdateOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleRequest.Merge(m, src)
}
func (m *MsgUpdateOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleRequest proto.InternalMessageInfo

func (m *MsgUpdateOracleRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgUpdateOracleRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// MsgUpdateOracleResponse is the response type for updating the oracle.
type MsgUpdateOracleResponse struct {
}

func (m *MsgUpdateOracleResponse) Reset()         { *m = MsgUpdateOracleResponse{} }
func (m *MsgUpdateOracleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleResponse) ProtoMessage()    {}
func (*MsgUpdateOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66a39dda41c6a784, []int{3}
}
func (m *MsgUpdateOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleResponse.Merge(m, src)
}
func (m *MsgUpdateOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgQueryOracleRequest)(nil), "provenance.oracle.v1.MsgQueryOracleRequest")
	proto.RegisterType((*MsgQueryOracleResponse)(nil), "provenance.oracle.v1.MsgQueryOracleResponse")
	proto.RegisterType((*MsgUpdateOracleRequest)(nil), "provenance.oracle.v1.MsgUpdateOracleRequest")
	proto.RegisterType((*MsgUpdateOracleResponse)(nil), "provenance.oracle.v1.MsgUpdateOracleResponse")
}

func init() { proto.RegisterFile("provenance/oracle/v1/tx.proto", fileDescriptor_66a39dda41c6a784) }

var fileDescriptor_66a39dda41c6a784 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0xcf, 0x58, 0xb5, 0xcd, 0xb4, 0x7a, 0x18, 0xa2, 0x4d, 0x02, 0x6e, 0x4a, 0x40, 0x28, 0xd8,
	0xec, 0xd0, 0x14, 0x04, 0x05, 0x0f, 0x26, 0x27, 0x0f, 0xc1, 0xba, 0x45, 0x04, 0x2f, 0x61, 0xba,
	0x3b, 0xcc, 0x2e, 0x76, 0xf7, 0x6d, 0xe7, 0xcd, 0xa6, 0xc9, 0x97, 0x10, 0x8f, 0x1e, 0xfb, 0x21,
	0xfa, 0x21, 0x3c, 0x16, 0x4f, 0x1e, 0x44, 0x24, 0xb9, 0xf8, 0x19, 0x3c, 0x49, 0x67, 0x52, 0xb2,
	0xda, 0x58, 0x7a, 0xda, 0x7d, 0xbf, 0xf7, 0xfb, 0xbd, 0x7f, 0xfb, 0x5b, 0xfa, 0x28, 0xd7, 0x30,
	0x92, 0x99, 0xc8, 0x42, 0xc9, 0x41, 0x8b, 0xf0, 0x48, 0xf2, 0xd1, 0x2e, 0x37, 0x63, 0x3f, 0xd7,
	0x60, 0x80, 0xd5, 0x16, 0x69, 0xdf, 0xa5, 0xfd, 0xd1, 0x6e, 0xb3, 0x11, 0x02, 0xa6, 0x80, 0x43,
	0xcb, 0xe1, 0x2e, 0x70, 0x82, 0x66, 0x4d, 0x81, 0x02, 0x87, 0x5f, 0xbc, 0x39, 0xb4, 0x7d, 0x46,
	0xe8, 0x83, 0x01, 0xaa, 0x37, 0x85, 0xd4, 0x93, 0xd7, 0xb6, 0x4c, 0x20, 0x8f, 0x0b, 0x89, 0x86,
	0x1d, 0xd0, 0x3b, 0xc7, 0x17, 0x68, 0x9d, 0x6c, 0x91, 0xed, 0x8d, 0xde, 0x8b, 0xdf, 0x3f, 0x5a,
	0xcf, 0x54, 0x62, 0xe2, 0xe2, 0xd0, 0x0f, 0x21, 0xe5, 0x7d, 0xc0, 0xf4, 0x9d, 0xc0, 0x94, 0x9f,
	0x08, 0x4c, 0x23, 0x3e, 0xb6, 0x4f, 0x6e, 0x26, 0xb9, 0x44, 0x3f, 0x10, 0x27, 0x7d, 0xc8, 0x8c,
	0x16, 0xa1, 0x19, 0x48, 0x44, 0xa1, 0x64, 0xe0, 0x6a, 0xb1, 0x16, 0x5d, 0x47, 0x28, 0x74, 0x28,
	0x87, 0x39, 0x68, 0x53, 0xbf, 0xb5, 0x45, 0xb6, 0xab, 0x01, 0x75, 0xd0, 0x3e, 0x68, 0xc3, 0x1e,
	0xd3, 0xfb, 0x73, 0x42, 0x18, 0x8b, 0x2c, 0x93, 0x47, 0xf5, 0x15, 0xcb, 0xb9, 0xe7, 0xd0, 0xbe,
	0x03, 0xdb, 0x7b, 0xf4, 0xe1, 0xbf, 0x53, 0x63, 0x0e, 0x19, 0x4a, 0xd6, 0xa0, 0x6b, 0xb6, 0xd5,
	0x30, 0x89, 0xec, 0xe4, 0xb7, 0x83, 0x55, 0x1b, 0xbf, 0x8a, 0xda, 0x1f, 0x89, 0x55, 0xbd, 0xcd,
	0x23, 0x61, 0xe4, 0xdf, 0xcb, 0x76, 0xe9, 0xaa, 0x88, 0x22, 0x2d, 0x11, 0xad, 0xa8, 0xda, 0xab,
	0x7f, 0x3d, 0xeb, 0xd4, 0xe6, 0xf7, 0x7b, 0xe9, 0x32, 0x07, 0x46, 0x27, 0x99, 0x0a, 0x2e, 0x89,
	0xec, 0x29, 0xad, 0x8a, 0xc2, 0xc4, 0xa0, 0x13, 0x33, 0x71, 0x9b, 0x5c, 0xa3, 0x5a, 0x50, 0x9f,
	0xaf, 0x7d, 0x3e, 0x6d, 0x91, 0x5f, 0xa7, 0x2d, 0xd2, 0x6e, 0xd0, 0xcd, 0x2b, 0xf3, 0xb8, 0x35,
	0xba, 0xdf, 0x09, 0x5d, 0x19, 0xa0, 0x62, 0x1f, 0xe8, 0x46, 0x39, 0xcf, 0x76, 0xfc, 0x65, 0xdf,
	0xdd, 0x5f, 0xbe, 0x56, 0xb3, 0x73, 0x43, 0xf6, 0xfc, 0x76, 0x31, 0x5d, 0x2f, 0x9d, 0x94, 0x3d,
	0xf9, 0xaf, 0xfa, 0xaa, 0x5d, 0x9a, 0x3b, 0x37, 0x23, 0xbb, 0x4e, 0x3d, 0xf5, 0x65, 0xea, 0x91,
	0xf3, 0xa9, 0x47, 0x7e, 0x4e, 0x3d, 0xf2, 0x69, 0xe6, 0x55, 0xce, 0x67, 0x5e, 0xe5, 0xdb, 0xcc,
	0xab, 0xd0, 0xcd, 0x04, 0x96, 0x56, 0xda, 0x27, 0xef, 0xbb, 0x25, 0xfb, 0x2d, 0x28, 0x9d, 0x04,
	0x4a, 0x11, 0x1f, 0x5f, 0xfe, 0x2c, 0xd6, 0x8a, 0x87, 0x77, 0xad, 0xcd, 0xf7, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xa7, 0x1d, 0x74, 0xfb, 0x4e, 0x03, 0x00, 0x00,
}

func (this *MsgUpdateOracleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpdateOracleRequest)
	if !ok {
		that2, ok := that.(MsgUpdateOracleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Authority != that1.Authority {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateOracle is the RPC endpoint for updating the oracle
	UpdateOracle(ctx context.Context, in *MsgUpdateOracleRequest, opts ...grpc.CallOption) (*MsgUpdateOracleResponse, error)
	// QueryOracle sends an icq to an oracle on another chain
	QueryOracle(ctx context.Context, in *MsgQueryOracleRequest, opts ...grpc.CallOption) (*MsgQueryOracleResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateOracle(ctx context.Context, in *MsgUpdateOracleRequest, opts ...grpc.CallOption) (*MsgUpdateOracleResponse, error) {
	out := new(MsgUpdateOracleResponse)
	err := c.cc.Invoke(ctx, "/provenance.oracle.v1.Msg/UpdateOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) QueryOracle(ctx context.Context, in *MsgQueryOracleRequest, opts ...grpc.CallOption) (*MsgQueryOracleResponse, error) {
	out := new(MsgQueryOracleResponse)
	err := c.cc.Invoke(ctx, "/provenance.oracle.v1.Msg/QueryOracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateOracle is the RPC endpoint for updating the oracle
	UpdateOracle(context.Context, *MsgUpdateOracleRequest) (*MsgUpdateOracleResponse, error)
	// QueryOracle sends an icq to an oracle on another chain
	QueryOracle(context.Context, *MsgQueryOracleRequest) (*MsgQueryOracleResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateOracle(ctx context.Context, req *MsgUpdateOracleRequest) (*MsgUpdateOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOracle not implemented")
}
func (*UnimplementedMsgServer) QueryOracle(ctx context.Context, req *MsgQueryOracleRequest) (*MsgQueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOracle not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.oracle.v1.Msg/UpdateOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOracle(ctx, req.(*MsgUpdateOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_QueryOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQueryOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).QueryOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.oracle.v1.Msg/QueryOracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).QueryOracle(ctx, req.(*MsgQueryOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.oracle.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateOracle",
			Handler:    _Msg_UpdateOracle_Handler,
		},
		{
			MethodName: "QueryOracle",
			Handler:    _Msg_QueryOracle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/oracle/v1/tx.proto",
}

func (m *MsgQueryOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQueryOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgQueryOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQueryOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQueryOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgQueryOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgQueryOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovTx(uint64(m.QueryId))
	}
	return n
}

func (m *MsgUpdateOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgQueryOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQueryOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQueryOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQueryOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
