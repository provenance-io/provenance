// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/expiration/v1/expiration.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the expiration module.
type Params struct {
	// the deposit amount for holding module assets on chain
	Deposit types.Coin `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_55597788ec54e660, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

// Expiration holds a typed key/value structure for data associated with an expiring module asset
type Expiration struct {
	// the module asset identifier
	ModuleAssetId string `protobuf:"bytes,1,opt,name=module_asset_id,json=moduleAssetId,proto3" json:"module_asset_id,omitempty"`
	// The bech32 address the expiration is bound to
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The block height the module asset expires
	BlockHeight int64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The deposit amount held while module asset is in use
	Deposit types.Coin `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	// Message relating to the expiring module asset
	Message *types1.Any `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Expiration) Reset()         { *m = Expiration{} }
func (m *Expiration) String() string { return proto.CompactTextString(m) }
func (*Expiration) ProtoMessage()    {}
func (*Expiration) Descriptor() ([]byte, []int) {
	return fileDescriptor_55597788ec54e660, []int{1}
}
func (m *Expiration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Expiration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Expiration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Expiration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Expiration.Merge(m, src)
}
func (m *Expiration) XXX_Size() int {
	return m.Size()
}
func (m *Expiration) XXX_DiscardUnknown() {
	xxx_messageInfo_Expiration.DiscardUnknown(m)
}

var xxx_messageInfo_Expiration proto.InternalMessageInfo

func (m *Expiration) GetModuleAssetId() string {
	if m != nil {
		return m.ModuleAssetId
	}
	return ""
}

func (m *Expiration) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Expiration) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Expiration) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Expiration) GetMessage() *types1.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "provenance.expiration.v1.Params")
	proto.RegisterType((*Expiration)(nil), "provenance.expiration.v1.Expiration")
}

func init() {
	proto.RegisterFile("provenance/expiration/v1/expiration.proto", fileDescriptor_55597788ec54e660)
}

var fileDescriptor_55597788ec54e660 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x6f, 0xda, 0x40,
	0x18, 0xc6, 0x7d, 0xe5, 0x5f, 0x39, 0x5a, 0x55, 0xb2, 0x18, 0x0c, 0x95, 0x0c, 0x65, 0xa8, 0xe8,
	0xd0, 0x3b, 0xb9, 0x95, 0x2a, 0x35, 0x1b, 0x44, 0x91, 0x92, 0x21, 0x12, 0xf2, 0x98, 0x05, 0x9d,
	0xed, 0x8b, 0x39, 0x05, 0xfb, 0xb5, 0x7c, 0x87, 0x03, 0xdf, 0x22, 0x63, 0x46, 0x3e, 0x0e, 0x23,
	0x23, 0x53, 0x14, 0xc1, 0x92, 0x8f, 0x11, 0x71, 0x86, 0xe0, 0x21, 0x4b, 0x36, 0x3f, 0xcf, 0xfd,
	0x1e, 0xbd, 0x8f, 0xde, 0xd7, 0xf8, 0x57, 0x92, 0x42, 0xc6, 0x63, 0x16, 0xfb, 0x9c, 0xf2, 0x79,
	0x22, 0x52, 0xa6, 0x04, 0xc4, 0x34, 0x73, 0x0a, 0x8a, 0x24, 0x29, 0x28, 0x30, 0xad, 0x13, 0x4a,
	0x0a, 0x8f, 0x99, 0xd3, 0x6e, 0x86, 0x10, 0x82, 0x86, 0xe8, 0xfe, 0x2b, 0xe7, 0xdb, 0xad, 0x10,
	0x20, 0x9c, 0x72, 0xaa, 0x95, 0x37, 0xbb, 0xa5, 0x2c, 0x5e, 0x1c, 0x9e, 0x6c, 0x1f, 0x64, 0x04,
	0x92, 0x7a, 0x4c, 0x72, 0x9a, 0x39, 0x1e, 0x57, 0xcc, 0xa1, 0x3e, 0x88, 0xc3, 0xa8, 0xde, 0x35,
	0xae, 0x8e, 0x58, 0xca, 0x22, 0x69, 0xfe, 0xc7, 0xb5, 0x80, 0x27, 0x20, 0x85, 0xb2, 0x3e, 0x75,
	0x51, 0xbf, 0xf1, 0xa7, 0x45, 0xf2, 0x2c, 0xd9, 0x67, 0xc9, 0x21, 0x4b, 0xce, 0x41, 0xc4, 0xc3,
	0xf2, 0xea, 0xa9, 0x63, 0xb8, 0x47, 0xfe, 0xec, 0xf3, 0xe3, 0xb2, 0x63, 0xbc, 0x2c, 0x3b, 0x46,
	0x6f, 0x83, 0x30, 0xbe, 0x78, 0x6b, 0x6c, 0xfe, 0xc4, 0xdf, 0x22, 0x08, 0x66, 0x53, 0x3e, 0x66,
	0x52, 0x72, 0x35, 0x16, 0x81, 0x85, 0xba, 0xa8, 0x5f, 0x77, 0xbf, 0xe6, 0xf6, 0x60, 0xef, 0x5e,
	0x05, 0x66, 0x13, 0x57, 0xe0, 0x3e, 0xe6, 0xa9, 0x9e, 0x5c, 0x77, 0x73, 0x61, 0xfe, 0xc0, 0x5f,
	0xbc, 0x29, 0xf8, 0x77, 0xe3, 0x09, 0x17, 0xe1, 0x44, 0x59, 0xa5, 0x2e, 0xea, 0x97, 0xdc, 0x86,
	0xf6, 0x2e, 0xb5, 0x55, 0x2c, 0x5d, 0xfe, 0x58, 0x69, 0x93, 0xe0, 0x5a, 0xc4, 0xa5, 0x64, 0x21,
	0xb7, 0x2a, 0x3a, 0xda, 0x24, 0xf9, 0x1a, 0xc9, 0x71, 0x8d, 0x64, 0x10, 0x2f, 0xdc, 0x23, 0x34,
	0x84, 0xd5, 0xd6, 0x46, 0xeb, 0xad, 0x8d, 0x9e, 0xb7, 0x36, 0x7a, 0xd8, 0xd9, 0xc6, 0x7a, 0x67,
	0x1b, 0x9b, 0x9d, 0x6d, 0xe0, 0xef, 0x42, 0x1f, 0xe2, 0xdd, 0x8b, 0x8d, 0xd0, 0xcd, 0xbf, 0x50,
	0xa8, 0xc9, 0xcc, 0x23, 0x3e, 0x44, 0xf4, 0x84, 0xfd, 0x16, 0x50, 0x50, 0x74, 0x5e, 0xfc, 0x27,
	0xd4, 0x22, 0xe1, 0xd2, 0xab, 0xea, 0x1e, 0x7f, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x7a,
	0x64, 0xaf, 0x39, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpiration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *Expiration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Expiration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Expiration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExpiration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExpiration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BlockHeight != 0 {
		i = encodeVarintExpiration(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintExpiration(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleAssetId) > 0 {
		i -= len(m.ModuleAssetId)
		copy(dAtA[i:], m.ModuleAssetId)
		i = encodeVarintExpiration(dAtA, i, uint64(len(m.ModuleAssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExpiration(dAtA []byte, offset int, v uint64) int {
	offset -= sovExpiration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Deposit.Size()
	n += 1 + l + sovExpiration(uint64(l))
	return n
}

func (m *Expiration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleAssetId)
	if l > 0 {
		n += 1 + l + sovExpiration(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovExpiration(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovExpiration(uint64(m.BlockHeight))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovExpiration(uint64(l))
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovExpiration(uint64(l))
	}
	return n
}

func sovExpiration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExpiration(x uint64) (n int) {
	return sovExpiration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpiration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpiration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Expiration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Expiration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Expiration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExpiration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExpiration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types1.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExpiration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExpiration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpiration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpiration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpiration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExpiration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExpiration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExpiration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExpiration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpiration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExpiration = fmt.Errorf("proto: unexpected end of group")
)
