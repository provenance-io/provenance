// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateRewardProgramRequest is the request type for creating a reward program RPC
type MsgCreateRewardProgramRequest struct {
	Title                    string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description              string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DistributeFromAddress    string             `protobuf:"bytes,3,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	TotalRewardPool          types.Coin         `protobuf:"bytes,4,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool"`
	MaxRewardPerClaimAddress types.Coin         `protobuf:"bytes,5,opt,name=max_reward_per_claim_address,json=maxRewardPerClaimAddress,proto3" json:"max_reward_per_claim_address"`
	ProgramStartTime         time.Time          `protobuf:"bytes,6,opt,name=program_start_time,json=programStartTime,proto3,stdtime" json:"program_start_time,omitempty" yaml:"program_start_time,omitempty"`
	ClaimPeriods             uint64             `protobuf:"varint,7,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	ClaimPeriodDays          uint64             `protobuf:"varint,8,opt,name=claim_period_days,json=claimPeriodDays,proto3" json:"claim_period_days,omitempty"`
	MaxRolloverClaimPeriods  uint64             `protobuf:"varint,9,opt,name=max_rollover_claim_periods,json=maxRolloverClaimPeriods,proto3" json:"max_rollover_claim_periods,omitempty"`
	ExpireDays               uint64             `protobuf:"varint,10,opt,name=expire_days,json=expireDays,proto3" json:"expire_days,omitempty"`
	QualifyingActions        []QualifyingAction `protobuf:"bytes,11,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *MsgCreateRewardProgramRequest) Reset()      { *m = MsgCreateRewardProgramRequest{} }
func (*MsgCreateRewardProgramRequest) ProtoMessage() {}
func (*MsgCreateRewardProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{0}
}
func (m *MsgCreateRewardProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRewardProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRewardProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRewardProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRewardProgramRequest.Merge(m, src)
}
func (m *MsgCreateRewardProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRewardProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRewardProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRewardProgramRequest proto.InternalMessageInfo

func (m *MsgCreateRewardProgramRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateRewardProgramRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateRewardProgramRequest) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *MsgCreateRewardProgramRequest) GetTotalRewardPool() types.Coin {
	if m != nil {
		return m.TotalRewardPool
	}
	return types.Coin{}
}

func (m *MsgCreateRewardProgramRequest) GetMaxRewardPerClaimAddress() types.Coin {
	if m != nil {
		return m.MaxRewardPerClaimAddress
	}
	return types.Coin{}
}

func (m *MsgCreateRewardProgramRequest) GetProgramStartTime() time.Time {
	if m != nil {
		return m.ProgramStartTime
	}
	return time.Time{}
}

func (m *MsgCreateRewardProgramRequest) GetClaimPeriods() uint64 {
	if m != nil {
		return m.ClaimPeriods
	}
	return 0
}

func (m *MsgCreateRewardProgramRequest) GetClaimPeriodDays() uint64 {
	if m != nil {
		return m.ClaimPeriodDays
	}
	return 0
}

func (m *MsgCreateRewardProgramRequest) GetMaxRolloverClaimPeriods() uint64 {
	if m != nil {
		return m.MaxRolloverClaimPeriods
	}
	return 0
}

func (m *MsgCreateRewardProgramRequest) GetExpireDays() uint64 {
	if m != nil {
		return m.ExpireDays
	}
	return 0
}

func (m *MsgCreateRewardProgramRequest) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// MsgCreateRewardProgramResponse is the response type for creating a reward program RPC
type MsgCreateRewardProgramResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateRewardProgramResponse) Reset()         { *m = MsgCreateRewardProgramResponse{} }
func (m *MsgCreateRewardProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRewardProgramResponse) ProtoMessage()    {}
func (*MsgCreateRewardProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{1}
}
func (m *MsgCreateRewardProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRewardProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRewardProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRewardProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRewardProgramResponse.Merge(m, src)
}
func (m *MsgCreateRewardProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRewardProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRewardProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRewardProgramResponse proto.InternalMessageInfo

func (m *MsgCreateRewardProgramResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgEndRewardProgramRequest is the request type for ending a reward program RPC
type MsgEndRewardProgramRequest struct {
	RewardProgramId     uint64 `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	ProgramOwnerAddress string `protobuf:"bytes,2,opt,name=program_owner_address,json=programOwnerAddress,proto3" json:"program_owner_address,omitempty"`
}

func (m *MsgEndRewardProgramRequest) Reset()      { *m = MsgEndRewardProgramRequest{} }
func (*MsgEndRewardProgramRequest) ProtoMessage() {}
func (*MsgEndRewardProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{2}
}
func (m *MsgEndRewardProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEndRewardProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEndRewardProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEndRewardProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEndRewardProgramRequest.Merge(m, src)
}
func (m *MsgEndRewardProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgEndRewardProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEndRewardProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEndRewardProgramRequest proto.InternalMessageInfo

func (m *MsgEndRewardProgramRequest) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *MsgEndRewardProgramRequest) GetProgramOwnerAddress() string {
	if m != nil {
		return m.ProgramOwnerAddress
	}
	return ""
}

// MsgEndRewardProgramResponse is the response type for ending a reward program RPC
type MsgEndRewardProgramResponse struct {
}

func (m *MsgEndRewardProgramResponse) Reset()         { *m = MsgEndRewardProgramResponse{} }
func (m *MsgEndRewardProgramResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEndRewardProgramResponse) ProtoMessage()    {}
func (*MsgEndRewardProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{3}
}
func (m *MsgEndRewardProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEndRewardProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEndRewardProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEndRewardProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEndRewardProgramResponse.Merge(m, src)
}
func (m *MsgEndRewardProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEndRewardProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEndRewardProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEndRewardProgramResponse proto.InternalMessageInfo

// MsgClaimRewardRequest is the request type for claiming reward from reward program RPC
type MsgClaimRewardRequest struct {
	RewardProgramId uint64 `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	RewardAddress   string `protobuf:"bytes,2,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
}

func (m *MsgClaimRewardRequest) Reset()         { *m = MsgClaimRewardRequest{} }
func (m *MsgClaimRewardRequest) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardRequest) ProtoMessage()    {}
func (*MsgClaimRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{4}
}
func (m *MsgClaimRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardRequest.Merge(m, src)
}
func (m *MsgClaimRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardRequest proto.InternalMessageInfo

func (m *MsgClaimRewardRequest) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *MsgClaimRewardRequest) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

// MsgClaimRewardResponse is the response type for claiming reward from reward program RPC
type MsgClaimRewardResponse struct {
	ClaimDetails RewardProgramClaimDetail `protobuf:"bytes,1,opt,name=claim_details,json=claimDetails,proto3" json:"claim_details"`
}

func (m *MsgClaimRewardResponse) Reset()         { *m = MsgClaimRewardResponse{} }
func (m *MsgClaimRewardResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardResponse) ProtoMessage()    {}
func (*MsgClaimRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{5}
}
func (m *MsgClaimRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardResponse.Merge(m, src)
}
func (m *MsgClaimRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardResponse proto.InternalMessageInfo

func (m *MsgClaimRewardResponse) GetClaimDetails() RewardProgramClaimDetail {
	if m != nil {
		return m.ClaimDetails
	}
	return RewardProgramClaimDetail{}
}

// MsgClaimRewardResponse is the request type for claiming rewards from all reward programs RPC
type MsgClaimAllRewardsRequest struct {
	RewardAddress string `protobuf:"bytes,1,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
}

func (m *MsgClaimAllRewardsRequest) Reset()         { *m = MsgClaimAllRewardsRequest{} }
func (m *MsgClaimAllRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllRewardsRequest) ProtoMessage()    {}
func (*MsgClaimAllRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{6}
}
func (m *MsgClaimAllRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllRewardsRequest.Merge(m, src)
}
func (m *MsgClaimAllRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllRewardsRequest proto.InternalMessageInfo

func (m *MsgClaimAllRewardsRequest) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

// MsgClaimRewardResponse is the response type for claiming rewards from all reward programs RPC
type MsgClaimAllRewardsResponse struct {
	TotalRewardClaim types.Coin                  `protobuf:"bytes,1,opt,name=total_reward_claim,json=totalRewardClaim,proto3" json:"total_reward_claim"`
	ClaimDetails     []*RewardProgramClaimDetail `protobuf:"bytes,2,rep,name=claim_details,json=claimDetails,proto3" json:"claim_details,omitempty"`
}

func (m *MsgClaimAllRewardsResponse) Reset()         { *m = MsgClaimAllRewardsResponse{} }
func (m *MsgClaimAllRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAllRewardsResponse) ProtoMessage()    {}
func (*MsgClaimAllRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{7}
}
func (m *MsgClaimAllRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAllRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAllRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAllRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAllRewardsResponse.Merge(m, src)
}
func (m *MsgClaimAllRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAllRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAllRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAllRewardsResponse proto.InternalMessageInfo

func (m *MsgClaimAllRewardsResponse) GetTotalRewardClaim() types.Coin {
	if m != nil {
		return m.TotalRewardClaim
	}
	return types.Coin{}
}

func (m *MsgClaimAllRewardsResponse) GetClaimDetails() []*RewardProgramClaimDetail {
	if m != nil {
		return m.ClaimDetails
	}
	return nil
}

type ClaimedRewardPeriodDetail struct {
	ClaimPeriodId     uint64     `protobuf:"varint,1,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	TotalShares       uint64     `protobuf:"varint,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	ClaimPeriodReward types.Coin `protobuf:"bytes,3,opt,name=claim_period_reward,json=claimPeriodReward,proto3" json:"claim_period_reward"`
}

func (m *ClaimedRewardPeriodDetail) Reset()         { *m = ClaimedRewardPeriodDetail{} }
func (m *ClaimedRewardPeriodDetail) String() string { return proto.CompactTextString(m) }
func (*ClaimedRewardPeriodDetail) ProtoMessage()    {}
func (*ClaimedRewardPeriodDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{8}
}
func (m *ClaimedRewardPeriodDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimedRewardPeriodDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimedRewardPeriodDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimedRewardPeriodDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimedRewardPeriodDetail.Merge(m, src)
}
func (m *ClaimedRewardPeriodDetail) XXX_Size() int {
	return m.Size()
}
func (m *ClaimedRewardPeriodDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimedRewardPeriodDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimedRewardPeriodDetail proto.InternalMessageInfo

func (m *ClaimedRewardPeriodDetail) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *ClaimedRewardPeriodDetail) GetTotalShares() uint64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *ClaimedRewardPeriodDetail) GetClaimPeriodReward() types.Coin {
	if m != nil {
		return m.ClaimPeriodReward
	}
	return types.Coin{}
}

type RewardProgramClaimDetail struct {
	RewardProgramId            uint64                       `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	TotalRewardClaim           types.Coin                   `protobuf:"bytes,2,opt,name=total_reward_claim,json=totalRewardClaim,proto3" json:"total_reward_claim"`
	ClaimedRewardPeriodDetails []*ClaimedRewardPeriodDetail `protobuf:"bytes,3,rep,name=claimed_reward_period_details,json=claimedRewardPeriodDetails,proto3" json:"claimed_reward_period_details,omitempty"`
}

func (m *RewardProgramClaimDetail) Reset()         { *m = RewardProgramClaimDetail{} }
func (m *RewardProgramClaimDetail) String() string { return proto.CompactTextString(m) }
func (*RewardProgramClaimDetail) ProtoMessage()    {}
func (*RewardProgramClaimDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a1c90eb8246d229, []int{9}
}
func (m *RewardProgramClaimDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramClaimDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramClaimDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramClaimDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramClaimDetail.Merge(m, src)
}
func (m *RewardProgramClaimDetail) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramClaimDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramClaimDetail.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramClaimDetail proto.InternalMessageInfo

func (m *RewardProgramClaimDetail) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardProgramClaimDetail) GetTotalRewardClaim() types.Coin {
	if m != nil {
		return m.TotalRewardClaim
	}
	return types.Coin{}
}

func (m *RewardProgramClaimDetail) GetClaimedRewardPeriodDetails() []*ClaimedRewardPeriodDetail {
	if m != nil {
		return m.ClaimedRewardPeriodDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCreateRewardProgramRequest)(nil), "provenance.reward.v1.MsgCreateRewardProgramRequest")
	proto.RegisterType((*MsgCreateRewardProgramResponse)(nil), "provenance.reward.v1.MsgCreateRewardProgramResponse")
	proto.RegisterType((*MsgEndRewardProgramRequest)(nil), "provenance.reward.v1.MsgEndRewardProgramRequest")
	proto.RegisterType((*MsgEndRewardProgramResponse)(nil), "provenance.reward.v1.MsgEndRewardProgramResponse")
	proto.RegisterType((*MsgClaimRewardRequest)(nil), "provenance.reward.v1.MsgClaimRewardRequest")
	proto.RegisterType((*MsgClaimRewardResponse)(nil), "provenance.reward.v1.MsgClaimRewardResponse")
	proto.RegisterType((*MsgClaimAllRewardsRequest)(nil), "provenance.reward.v1.MsgClaimAllRewardsRequest")
	proto.RegisterType((*MsgClaimAllRewardsResponse)(nil), "provenance.reward.v1.MsgClaimAllRewardsResponse")
	proto.RegisterType((*ClaimedRewardPeriodDetail)(nil), "provenance.reward.v1.ClaimedRewardPeriodDetail")
	proto.RegisterType((*RewardProgramClaimDetail)(nil), "provenance.reward.v1.RewardProgramClaimDetail")
}

func init() { proto.RegisterFile("provenance/reward/v1/tx.proto", fileDescriptor_6a1c90eb8246d229) }

var fileDescriptor_6a1c90eb8246d229 = []byte{
	// 1094 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x4e, 0x68, 0xc7, 0x49, 0x93, 0x4c, 0x12, 0xb2, 0x31, 0x89, 0xed, 0xba, 0x6a,
	0x89, 0x4a, 0xbb, 0x9b, 0xb8, 0x55, 0x25, 0x52, 0x2e, 0x49, 0x0a, 0x52, 0x85, 0xa2, 0x04, 0x87,
	0x03, 0xf4, 0xb2, 0x8c, 0xbd, 0x93, 0xed, 0xa0, 0xdd, 0x9d, 0xcd, 0xcc, 0xe4, 0x87, 0x85, 0x7a,
	0xe1, 0xc0, 0x85, 0x03, 0x95, 0xb8, 0xc0, 0xad, 0xff, 0x01, 0x12, 0x47, 0x24, 0xae, 0xa8, 0x12,
	0x97, 0x4a, 0x5c, 0x38, 0x05, 0x94, 0x70, 0x40, 0x1c, 0x7b, 0xe1, 0x8a, 0x76, 0x66, 0xd6, 0xd9,
	0xd8, 0x6b, 0xe3, 0xe4, 0x66, 0xcf, 0xfb, 0xde, 0x7b, 0xdf, 0x7b, 0xdf, 0x7b, 0xcf, 0x06, 0x8b,
	0x11, 0xa3, 0x07, 0x38, 0x44, 0x61, 0x13, 0xdb, 0x0c, 0x1f, 0x22, 0xe6, 0xda, 0x07, 0x2b, 0xb6,
	0x38, 0xb2, 0x22, 0x46, 0x05, 0x85, 0x33, 0x67, 0x66, 0x4b, 0x99, 0xad, 0x83, 0x95, 0xe2, 0x8c,
	0x47, 0x3d, 0x2a, 0x01, 0x76, 0xfc, 0x49, 0x61, 0x8b, 0x65, 0x8f, 0x52, 0xcf, 0xc7, 0xb6, 0xfc,
	0xd6, 0xd8, 0xdf, 0xb5, 0x05, 0x09, 0x30, 0x17, 0x28, 0x88, 0x34, 0x60, 0xbe, 0x13, 0x80, 0xc2,
	0x96, 0x36, 0x2d, 0x68, 0x13, 0x8a, 0x88, 0x8d, 0xc2, 0x90, 0x0a, 0x24, 0x08, 0x0d, 0xb9, 0xb6,
	0x96, 0x9a, 0x94, 0x07, 0x94, 0xdb, 0x0d, 0xc4, 0xb1, 0x7d, 0xb0, 0xd2, 0xc0, 0x02, 0xad, 0xd8,
	0x4d, 0x4a, 0x42, 0x6d, 0xbf, 0x9e, 0x59, 0x84, 0xe6, 0x2b, 0x21, 0xd5, 0xaf, 0x47, 0xc1, 0xe2,
	0x26, 0xf7, 0x36, 0x18, 0x46, 0x02, 0xd7, 0xa5, 0x65, 0x9b, 0x51, 0x8f, 0xa1, 0xa0, 0x8e, 0xf7,
	0xf6, 0x31, 0x17, 0x70, 0x06, 0x8c, 0x08, 0x22, 0x7c, 0x6c, 0x1a, 0x15, 0x63, 0xe9, 0x6a, 0x5d,
	0x7d, 0x81, 0x15, 0x50, 0x70, 0x31, 0x6f, 0x32, 0x12, 0xc5, 0x84, 0xcc, 0x9c, 0xb4, 0xa5, 0x9f,
	0xe0, 0x03, 0x30, 0xe7, 0x12, 0x2e, 0x18, 0x69, 0xec, 0x0b, 0xec, 0xec, 0x32, 0x1a, 0x38, 0xc8,
	0x75, 0x19, 0xe6, 0xdc, 0x1c, 0x96, 0xe8, 0xd9, 0x33, 0xf3, 0x07, 0x8c, 0x06, 0x6b, 0xca, 0x08,
	0x3f, 0x04, 0x53, 0x82, 0x0a, 0xe4, 0x3b, 0x8a, 0xa7, 0x13, 0x51, 0xea, 0x9b, 0xf9, 0x8a, 0xb1,
	0x54, 0xa8, 0xcd, 0x5b, 0xaa, 0x60, 0x2b, 0x2e, 0xd8, 0xd2, 0x05, 0x5b, 0x1b, 0x94, 0x84, 0xeb,
	0xf9, 0x97, 0xc7, 0xe5, 0xa1, 0xfa, 0x84, 0xf4, 0xd4, 0x65, 0x50, 0xea, 0x43, 0x07, 0x2c, 0x04,
	0xe8, 0xa8, 0x1d, 0x0a, 0x33, 0xa7, 0xe9, 0x23, 0x72, 0xc6, 0x64, 0x64, 0xb0, 0xb8, 0x66, 0x80,
	0x8e, 0x74, 0x54, 0xcc, 0x36, 0xe2, 0x08, 0x09, 0xdb, 0xef, 0x0d, 0x00, 0x23, 0xd5, 0x30, 0x87,
	0x0b, 0xc4, 0x84, 0x13, 0xab, 0x6b, 0x8e, 0xca, 0xb8, 0x45, 0x4b, 0xc9, 0x67, 0x25, 0xca, 0x5a,
	0x1f, 0x27, 0xd2, 0xaf, 0x6f, 0xc5, 0x81, 0xff, 0x39, 0x2e, 0x2f, 0x74, 0x7b, 0xdf, 0xa1, 0x01,
	0x11, 0x38, 0x88, 0x44, 0xeb, 0xf5, 0x71, 0xf9, 0x46, 0x0b, 0x05, 0xfe, 0x6a, 0xb5, 0x1f, 0xaa,
	0xfa, 0xfc, 0x8f, 0xb2, 0x51, 0x9f, 0xd4, 0x90, 0x9d, 0x18, 0x11, 0xe7, 0x81, 0x37, 0xc0, 0xb8,
	0xaa, 0x36, 0xc2, 0x8c, 0x50, 0x97, 0x9b, 0x6f, 0x54, 0x8c, 0xa5, 0x7c, 0x7d, 0x4c, 0x3e, 0x6e,
	0xab, 0x37, 0x78, 0x1b, 0x4c, 0xa5, 0x41, 0x8e, 0x8b, 0x5a, 0xdc, 0xbc, 0x22, 0x81, 0x13, 0x29,
	0xe0, 0x23, 0xd4, 0xe2, 0xf0, 0x21, 0x28, 0xca, 0x6e, 0x52, 0xdf, 0xa7, 0x07, 0xed, 0x5e, 0x26,
	0xd1, 0xaf, 0x4a, 0xa7, 0xb9, 0xb8, 0x55, 0x1a, 0xb0, 0x91, 0x4e, 0x54, 0x06, 0x05, 0x7c, 0x14,
	0x11, 0x86, 0x55, 0x0a, 0x20, 0xd1, 0x40, 0x3d, 0xc9, 0xe8, 0x87, 0x00, 0xee, 0xed, 0x23, 0x9f,
	0xec, 0xb6, 0x48, 0xe8, 0x39, 0xa8, 0x29, 0x27, 0xdd, 0x2c, 0x54, 0x86, 0x97, 0x0a, 0xb5, 0x5b,
	0x56, 0xd6, 0xc2, 0x59, 0x1f, 0xb5, 0xf1, 0x6b, 0x12, 0xbe, 0x5e, 0x89, 0xbb, 0xfa, 0xfa, 0xb8,
	0x6c, 0xaa, 0xae, 0x75, 0xc7, 0xab, 0x4f, 0xed, 0x75, 0xf8, 0xf0, 0xd5, 0x2b, 0xdf, 0xbd, 0x28,
	0x0f, 0xfd, 0xfd, 0xa2, 0x6c, 0x54, 0x97, 0x41, 0xa9, 0xd7, 0x32, 0xf0, 0x88, 0x86, 0x1c, 0xc3,
	0x6b, 0x20, 0x47, 0x5c, 0xb9, 0x0a, 0xf9, 0x7a, 0x8e, 0xb8, 0xd5, 0xaf, 0x0c, 0x50, 0xdc, 0xe4,
	0xde, 0xfb, 0xa1, 0x9b, 0xb9, 0x3c, 0xb7, 0xc1, 0x54, 0x32, 0x7b, 0x5a, 0xc0, 0xb6, 0xf7, 0x04,
	0x4b, 0x3b, 0x3c, 0x76, 0x61, 0x0d, 0xcc, 0x26, 0x20, 0x7a, 0x18, 0x62, 0xd6, 0x1e, 0x52, 0xb5,
	0x5c, 0xd3, 0xda, 0xb8, 0x15, 0xdb, 0xf4, 0xf8, 0xa5, 0xa8, 0x2f, 0x82, 0xb7, 0x32, 0x79, 0x28,
	0xde, 0xd5, 0xcf, 0xc1, 0x6c, 0x5c, 0x59, 0x2c, 0x88, 0x02, 0x5c, 0x86, 0xe1, 0x4d, 0x70, 0x4d,
	0x63, 0xcf, 0x53, 0x1b, 0x57, 0xaf, 0x9a, 0x54, 0xb5, 0x05, 0xde, 0xec, 0xcc, 0xa5, 0xbb, 0xf7,
	0x69, 0x32, 0x91, 0x2e, 0x16, 0x88, 0xf8, 0x5c, 0x26, 0x2a, 0xd4, 0xac, 0x6c, 0x75, 0xcf, 0x55,
	0x22, 0xc3, 0x3d, 0x92, 0x6e, 0x7a, 0x29, 0xd5, 0x1c, 0xab, 0x27, 0xbe, 0x9a, 0x97, 0x5d, 0x58,
	0x07, 0xf3, 0x49, 0xea, 0x35, 0x5f, 0x1f, 0x02, 0x9e, 0x94, 0xda, 0x4d, 0xdf, 0xc8, 0xa2, 0xff,
	0x8b, 0x92, 0xb4, 0x2b, 0x88, 0xae, 0x61, 0x13, 0xc0, 0x73, 0xf7, 0x49, 0xb2, 0xd0, 0x85, 0xfc,
	0xef, 0x21, 0x99, 0x4c, 0x1d, 0x28, 0x99, 0x00, 0xee, 0x74, 0xb6, 0x24, 0x27, 0x07, 0xfe, 0x82,
	0x2d, 0xc9, 0x6c, 0xc6, 0xcf, 0x06, 0x98, 0x97, 0x18, 0xec, 0xb6, 0x8f, 0x57, 0xbc, 0xca, 0x12,
	0x04, 0x6f, 0x81, 0x89, 0x73, 0x8b, 0xdf, 0x96, 0x7d, 0x3c, 0xb5, 0xf6, 0x8f, 0x5d, 0x78, 0x1d,
	0x8c, 0xa9, 0x7a, 0xf9, 0x53, 0xc4, 0xb0, 0x92, 0x3c, 0x5f, 0x2f, 0xc8, 0xb7, 0x1d, 0xf9, 0x04,
	0xb7, 0xc0, 0xf4, 0xb9, 0x50, 0x8a, 0xaf, 0x3c, 0xf3, 0x03, 0xf4, 0x64, 0x2a, 0x95, 0x4f, 0xf1,
	0xd4, 0xfc, 0xbf, 0xc9, 0x01, 0xb3, 0x57, 0xc1, 0x17, 0x9a, 0xdb, 0x6c, 0xc9, 0x72, 0x97, 0x95,
	0x8c, 0x81, 0xc5, 0xa6, 0x6a, 0x6b, 0xea, 0x87, 0x45, 0xde, 0x4e, 0x2d, 0xe1, 0xb0, 0x94, 0xd0,
	0xce, 0x96, 0xb0, 0xa7, 0x22, 0xf5, 0x62, 0xb3, 0x97, 0x49, 0x2b, 0x5a, 0xfb, 0x77, 0x04, 0x0c,
	0x6f, 0x72, 0x0f, 0xfe, 0x60, 0x80, 0xe9, 0x8c, 0x2b, 0x05, 0xef, 0x65, 0xa7, 0xec, 0xfb, 0x03,
	0x5f, 0xbc, 0x7f, 0x31, 0x27, 0x7d, 0x50, 0xee, 0x7e, 0xf9, 0xdb, 0x5f, 0xdf, 0xe6, 0xde, 0xae,
	0xde, 0xb4, 0xfb, 0xfc, 0xc9, 0x48, 0xb4, 0xe1, 0xf0, 0x27, 0x03, 0x4c, 0x76, 0x1e, 0x27, 0xb8,
	0xdc, 0x33, 0x73, 0x8f, 0x7b, 0x5a, 0x5c, 0xb9, 0x80, 0x87, 0x26, 0xba, 0x26, 0x89, 0x3e, 0xac,
	0xbd, 0x3b, 0x10, 0x51, 0xfb, 0x8b, 0xae, 0xa9, 0x7a, 0x06, 0x7f, 0x35, 0xc0, 0x58, 0xea, 0x9c,
	0x71, 0xf8, 0x4e, 0xef, 0x96, 0x75, 0x5d, 0xd8, 0xe2, 0x9d, 0xc1, 0xc0, 0x9a, 0xee, 0x67, 0x92,
	0xee, 0x93, 0xda, 0x27, 0x7d, 0xe9, 0xca, 0x49, 0x39, 0x23, 0xab, 0xef, 0xd9, 0xb3, 0x81, 0xaa,
	0xf9, 0xd1, 0x00, 0x13, 0x1d, 0xc7, 0x0d, 0xda, 0xfd, 0x39, 0x76, 0xdd, 0xd2, 0xe2, 0xf2, 0xe0,
	0x0e, 0xba, 0xb0, 0xf7, 0x64, 0x61, 0x0f, 0x6a, 0xf7, 0x2f, 0x53, 0xd8, 0xba, 0xf7, 0xf2, 0xa4,
	0x64, 0xbc, 0x3a, 0x29, 0x19, 0x7f, 0x9e, 0x94, 0x8c, 0xe7, 0xa7, 0xa5, 0xa1, 0x57, 0xa7, 0xa5,
	0xa1, 0xdf, 0x4f, 0x4b, 0x43, 0x60, 0x8e, 0xd0, 0x4c, 0x2e, 0xdb, 0xc6, 0x93, 0x9a, 0x47, 0xc4,
	0xd3, 0xfd, 0x86, 0xd5, 0xa4, 0x41, 0x2a, 0xe9, 0x5d, 0x42, 0xd3, 0x14, 0x8e, 0x12, 0x12, 0xa2,
	0x15, 0x61, 0xde, 0x18, 0x95, 0xff, 0xd5, 0xee, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x5a,
	0xb9, 0x73, 0x01, 0x0c, 0x00, 0x00,
}

func (this *MsgCreateRewardProgramRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateRewardProgramRequest)
	if !ok {
		that2, ok := that.(MsgCreateRewardProgramRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DistributeFromAddress != that1.DistributeFromAddress {
		return false
	}
	if !this.TotalRewardPool.Equal(&that1.TotalRewardPool) {
		return false
	}
	if !this.MaxRewardPerClaimAddress.Equal(&that1.MaxRewardPerClaimAddress) {
		return false
	}
	if !this.ProgramStartTime.Equal(that1.ProgramStartTime) {
		return false
	}
	if this.ClaimPeriods != that1.ClaimPeriods {
		return false
	}
	if this.ClaimPeriodDays != that1.ClaimPeriodDays {
		return false
	}
	if this.MaxRolloverClaimPeriods != that1.MaxRolloverClaimPeriods {
		return false
	}
	if this.ExpireDays != that1.ExpireDays {
		return false
	}
	if len(this.QualifyingActions) != len(that1.QualifyingActions) {
		return false
	}
	for i := range this.QualifyingActions {
		if !this.QualifyingActions[i].Equal(&that1.QualifyingActions[i]) {
			return false
		}
	}
	return true
}
func (this *MsgEndRewardProgramRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgEndRewardProgramRequest)
	if !ok {
		that2, ok := that.(MsgEndRewardProgramRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.ProgramOwnerAddress != that1.ProgramOwnerAddress {
		return false
	}
	return true
}
func (this *MsgClaimRewardResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimRewardResponse)
	if !ok {
		that2, ok := that.(MsgClaimRewardResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClaimDetails.Equal(&that1.ClaimDetails) {
		return false
	}
	return true
}
func (this *MsgClaimAllRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimAllRewardsResponse)
	if !ok {
		that2, ok := that.(MsgClaimAllRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TotalRewardClaim.Equal(&that1.TotalRewardClaim) {
		return false
	}
	if len(this.ClaimDetails) != len(that1.ClaimDetails) {
		return false
	}
	for i := range this.ClaimDetails {
		if !this.ClaimDetails[i].Equal(that1.ClaimDetails[i]) {
			return false
		}
	}
	return true
}
func (this *ClaimedRewardPeriodDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimedRewardPeriodDetail)
	if !ok {
		that2, ok := that.(ClaimedRewardPeriodDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if !this.ClaimPeriodReward.Equal(&that1.ClaimPeriodReward) {
		return false
	}
	return true
}
func (this *RewardProgramClaimDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgramClaimDetail)
	if !ok {
		that2, ok := that.(RewardProgramClaimDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardClaim.Equal(&that1.TotalRewardClaim) {
		return false
	}
	if len(this.ClaimedRewardPeriodDetails) != len(that1.ClaimedRewardPeriodDetails) {
		return false
	}
	for i := range this.ClaimedRewardPeriodDetails {
		if !this.ClaimedRewardPeriodDetails[i].Equal(that1.ClaimedRewardPeriodDetails[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateRewardProgram is the RPC endpoint for creating a rewards program
	CreateRewardProgram(ctx context.Context, in *MsgCreateRewardProgramRequest, opts ...grpc.CallOption) (*MsgCreateRewardProgramResponse, error)
	// EndRewardProgram is the RPC endpoint for ending a rewards program
	EndRewardProgram(ctx context.Context, in *MsgEndRewardProgramRequest, opts ...grpc.CallOption) (*MsgEndRewardProgramResponse, error)
	// ClaimRewards is the RPC endpoint for claiming rewards for completed claim periods of a reward program
	ClaimRewards(ctx context.Context, in *MsgClaimRewardRequest, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error)
	ClaimAllRewards(ctx context.Context, in *MsgClaimAllRewardsRequest, opts ...grpc.CallOption) (*MsgClaimAllRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateRewardProgram(ctx context.Context, in *MsgCreateRewardProgramRequest, opts ...grpc.CallOption) (*MsgCreateRewardProgramResponse, error) {
	out := new(MsgCreateRewardProgramResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Msg/CreateRewardProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EndRewardProgram(ctx context.Context, in *MsgEndRewardProgramRequest, opts ...grpc.CallOption) (*MsgEndRewardProgramResponse, error) {
	out := new(MsgEndRewardProgramResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Msg/EndRewardProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewardRequest, opts ...grpc.CallOption) (*MsgClaimRewardResponse, error) {
	out := new(MsgClaimRewardResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Msg/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAllRewards(ctx context.Context, in *MsgClaimAllRewardsRequest, opts ...grpc.CallOption) (*MsgClaimAllRewardsResponse, error) {
	out := new(MsgClaimAllRewardsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Msg/ClaimAllRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateRewardProgram is the RPC endpoint for creating a rewards program
	CreateRewardProgram(context.Context, *MsgCreateRewardProgramRequest) (*MsgCreateRewardProgramResponse, error)
	// EndRewardProgram is the RPC endpoint for ending a rewards program
	EndRewardProgram(context.Context, *MsgEndRewardProgramRequest) (*MsgEndRewardProgramResponse, error)
	// ClaimRewards is the RPC endpoint for claiming rewards for completed claim periods of a reward program
	ClaimRewards(context.Context, *MsgClaimRewardRequest) (*MsgClaimRewardResponse, error)
	ClaimAllRewards(context.Context, *MsgClaimAllRewardsRequest) (*MsgClaimAllRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateRewardProgram(ctx context.Context, req *MsgCreateRewardProgramRequest) (*MsgCreateRewardProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRewardProgram not implemented")
}
func (*UnimplementedMsgServer) EndRewardProgram(ctx context.Context, req *MsgEndRewardProgramRequest) (*MsgEndRewardProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndRewardProgram not implemented")
}
func (*UnimplementedMsgServer) ClaimRewards(ctx context.Context, req *MsgClaimRewardRequest) (*MsgClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}
func (*UnimplementedMsgServer) ClaimAllRewards(ctx context.Context, req *MsgClaimAllRewardsRequest) (*MsgClaimAllRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAllRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateRewardProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRewardProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRewardProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Msg/CreateRewardProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRewardProgram(ctx, req.(*MsgCreateRewardProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EndRewardProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEndRewardProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EndRewardProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Msg/EndRewardProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EndRewardProgram(ctx, req.(*MsgEndRewardProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Msg/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAllRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAllRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAllRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Msg/ClaimAllRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAllRewards(ctx, req.(*MsgClaimAllRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.reward.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRewardProgram",
			Handler:    _Msg_CreateRewardProgram_Handler,
		},
		{
			MethodName: "EndRewardProgram",
			Handler:    _Msg_EndRewardProgram_Handler,
		},
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
		{
			MethodName: "ClaimAllRewards",
			Handler:    _Msg_ClaimAllRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/reward/v1/tx.proto",
}

func (m *MsgCreateRewardProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRewardProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRewardProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ExpireDays != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpireDays))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxRolloverClaimPeriods != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxRolloverClaimPeriods))
		i--
		dAtA[i] = 0x48
	}
	if m.ClaimPeriodDays != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimPeriodDays))
		i--
		dAtA[i] = 0x40
	}
	if m.ClaimPeriods != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimPeriods))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.MaxRewardPerClaimAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TotalRewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRewardProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRewardProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRewardProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgEndRewardProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndRewardProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEndRewardProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProgramOwnerAddress) > 0 {
		i -= len(m.ProgramOwnerAddress)
		copy(dAtA[i:], m.ProgramOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProgramOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgEndRewardProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEndRewardProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEndRewardProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAllRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAllRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAllRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimDetails) > 0 {
		for iNdEx := len(m.ClaimDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.TotalRewardClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClaimedRewardPeriodDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimedRewardPeriodDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimedRewardPeriodDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimPeriodReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TotalShares != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardProgramClaimDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramClaimDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramClaimDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimedRewardPeriodDetails) > 0 {
		for iNdEx := len(m.ClaimedRewardPeriodDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimedRewardPeriodDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.TotalRewardClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RewardProgramId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateRewardProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TotalRewardPool.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxRewardPerClaimAddress.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime)
	n += 1 + l + sovTx(uint64(l))
	if m.ClaimPeriods != 0 {
		n += 1 + sovTx(uint64(m.ClaimPeriods))
	}
	if m.ClaimPeriodDays != 0 {
		n += 1 + sovTx(uint64(m.ClaimPeriodDays))
	}
	if m.MaxRolloverClaimPeriods != 0 {
		n += 1 + sovTx(uint64(m.MaxRolloverClaimPeriods))
	}
	if m.ExpireDays != 0 {
		n += 1 + sovTx(uint64(m.ExpireDays))
	}
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateRewardProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgEndRewardProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovTx(uint64(m.RewardProgramId))
	}
	l = len(m.ProgramOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEndRewardProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovTx(uint64(m.RewardProgramId))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClaimDetails.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgClaimAllRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAllRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalRewardClaim.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ClaimDetails) > 0 {
		for _, e := range m.ClaimDetails {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ClaimedRewardPeriodDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimPeriodId != 0 {
		n += 1 + sovTx(uint64(m.ClaimPeriodId))
	}
	if m.TotalShares != 0 {
		n += 1 + sovTx(uint64(m.TotalShares))
	}
	l = m.ClaimPeriodReward.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *RewardProgramClaimDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovTx(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardClaim.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.ClaimedRewardPeriodDetails) > 0 {
		for _, e := range m.ClaimedRewardPeriodDetails {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateRewardProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRewardProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRewardProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardPerClaimAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRewardPerClaimAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			m.ClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodDays", wireType)
			}
			m.ClaimPeriodDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRolloverClaimPeriods", wireType)
			}
			m.MaxRolloverClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRolloverClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDays", wireType)
			}
			m.ExpireDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRewardProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRewardProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRewardProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndRewardProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndRewardProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndRewardProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramOwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramOwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEndRewardProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEndRewardProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEndRewardProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAllRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAllRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAllRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimDetails = append(m.ClaimDetails, &RewardProgramClaimDetail{})
			if err := m.ClaimDetails[len(m.ClaimDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimedRewardPeriodDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimedRewardPeriodDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimedRewardPeriodDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimPeriodReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgramClaimDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramClaimDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramClaimDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedRewardPeriodDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedRewardPeriodDetails = append(m.ClaimedRewardPeriodDetails, &ClaimedRewardPeriodDetail{})
			if err := m.ClaimedRewardPeriodDetails[len(m.ClaimedRewardPeriodDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
