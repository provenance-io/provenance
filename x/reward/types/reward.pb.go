// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/reward.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardProgram_State int32

const (
	RewardProgram_PENDING  RewardProgram_State = 0
	RewardProgram_STARTED  RewardProgram_State = 1
	RewardProgram_FINISHED RewardProgram_State = 2
)

var RewardProgram_State_name = map[int32]string{
	0: "PENDING",
	1: "STARTED",
	2: "FINISHED",
}

var RewardProgram_State_value = map[string]int32{
	"PENDING":  0,
	"STARTED":  1,
	"FINISHED": 2,
}

func (x RewardProgram_State) String() string {
	return proto.EnumName(RewardProgram_State_name, int32(x))
}

func (RewardProgram_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0, 0}
}

// RewardProgram
type RewardProgram struct {
	Id                     uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                  string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description            string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DistributeFromAddress  string              `protobuf:"bytes,4,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	TotalRewardPool        types.Coin          `protobuf:"bytes,5,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool"`
	MaxRewardByAddress     types.Coin          `protobuf:"bytes,6,opt,name=max_reward_by_address,json=maxRewardByAddress,proto3" json:"max_reward_by_address"`
	ClaimPeriodSeconds     uint64              `protobuf:"varint,7,opt,name=claim_period_seconds,json=claimPeriodSeconds,proto3" json:"claim_period_seconds,omitempty"`
	ProgramStartTime       time.Time           `protobuf:"bytes,8,opt,name=program_start_time,json=programStartTime,proto3,stdtime" json:"program_start_time,omitempty" yaml:"program_start_time,omitempty"`
	ExpectedProgramEndTime time.Time           `protobuf:"bytes,9,opt,name=expected_program_end_time,json=expectedProgramEndTime,proto3,stdtime" json:"expected_program_end_time,omitempty" yaml:"expected_program_end_time,omitempty"`
	ClaimPeriodEndTime     time.Time           `protobuf:"bytes,10,opt,name=claim_period_end_time,json=claimPeriodEndTime,proto3,stdtime" json:"claim_period_end_time,omitempty" yaml:"claim_period_end_time,omitempty"`
	ActualProgramEndTime   time.Time           `protobuf:"bytes,11,opt,name=actual_program_end_time,json=actualProgramEndTime,proto3,stdtime" json:"finished_time,omitempty" yaml:"finished_time,omitempty"`
	ClaimPeriods           uint64              `protobuf:"varint,12,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	CurrentClaimPeriod     uint64              `protobuf:"varint,13,opt,name=current_claim_period,json=currentClaimPeriod,proto3" json:"current_claim_period,omitempty"`
	State                  RewardProgram_State `protobuf:"varint,14,opt,name=state,proto3,enum=provenance.reward.v1.RewardProgram_State" json:"state,omitempty"`
	ShareExpirationOffset  uint64              `protobuf:"varint,15,opt,name=share_expiration_offset,json=shareExpirationOffset,proto3" json:"share_expiration_offset,omitempty"`
	QualifyingActions      []QualifyingAction  `protobuf:"bytes,16,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *RewardProgram) Reset()      { *m = RewardProgram{} }
func (*RewardProgram) ProtoMessage() {}
func (*RewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0}
}
func (m *RewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgram.Merge(m, src)
}
func (m *RewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgram proto.InternalMessageInfo

func (m *RewardProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardProgram) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RewardProgram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *RewardProgram) GetTotalRewardPool() types.Coin {
	if m != nil {
		return m.TotalRewardPool
	}
	return types.Coin{}
}

func (m *RewardProgram) GetMaxRewardByAddress() types.Coin {
	if m != nil {
		return m.MaxRewardByAddress
	}
	return types.Coin{}
}

func (m *RewardProgram) GetClaimPeriodSeconds() uint64 {
	if m != nil {
		return m.ClaimPeriodSeconds
	}
	return 0
}

func (m *RewardProgram) GetProgramStartTime() time.Time {
	if m != nil {
		return m.ProgramStartTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetExpectedProgramEndTime() time.Time {
	if m != nil {
		return m.ExpectedProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriodEndTime() time.Time {
	if m != nil {
		return m.ClaimPeriodEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetActualProgramEndTime() time.Time {
	if m != nil {
		return m.ActualProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriods() uint64 {
	if m != nil {
		return m.ClaimPeriods
	}
	return 0
}

func (m *RewardProgram) GetCurrentClaimPeriod() uint64 {
	if m != nil {
		return m.CurrentClaimPeriod
	}
	return 0
}

func (m *RewardProgram) GetState() RewardProgram_State {
	if m != nil {
		return m.State
	}
	return RewardProgram_PENDING
}

func (m *RewardProgram) GetShareExpirationOffset() uint64 {
	if m != nil {
		return m.ShareExpirationOffset
	}
	return 0
}

func (m *RewardProgram) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// RewardProgramBalance will display the balance for a distribution address for specific rewards program
// Money available for claims. How is this program doing.
// Aggregate objects for claims and analytics
// Used for queries
// Reward Program Id - Key
type RewardProgramBalance struct {
	RewardProgramId uint64     `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	Balance         types.Coin `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance"`
}

func (m *RewardProgramBalance) Reset()      { *m = RewardProgramBalance{} }
func (*RewardProgramBalance) ProtoMessage() {}
func (*RewardProgramBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{1}
}
func (m *RewardProgramBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgramBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgramBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgramBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgramBalance.Merge(m, src)
}
func (m *RewardProgramBalance) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgramBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgramBalance.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgramBalance proto.InternalMessageInfo

func (m *RewardProgramBalance) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardProgramBalance) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// ClaimPeriodRewardDistribution, this will updated at the end of every claim period
// Reward Program Id + Claim Period Id
type ClaimPeriodRewardDistribution struct {
	ClaimPeriodId                  uint64     `protobuf:"varint,1,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	RewardProgramId                uint64     `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	TotalRewardsPoolForClaimPeriod types.Coin `protobuf:"bytes,3,opt,name=total_rewards_pool_for_claim_period,json=totalRewardsPoolForClaimPeriod,proto3" json:"total_rewards_pool_for_claim_period" yaml:"total_rewards_pool"`
	RewardsPool                    types.Coin `protobuf:"bytes,4,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool" yaml:"rewards_pool"`
	TotalShares                    int64      `protobuf:"varint,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	ClaimPeriodEnded               bool       `protobuf:"varint,6,opt,name=claim_period_ended,json=claimPeriodEnded,proto3" json:"claim_period_ended,omitempty"`
}

func (m *ClaimPeriodRewardDistribution) Reset()      { *m = ClaimPeriodRewardDistribution{} }
func (*ClaimPeriodRewardDistribution) ProtoMessage() {}
func (*ClaimPeriodRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{2}
}
func (m *ClaimPeriodRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPeriodRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPeriodRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPeriodRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPeriodRewardDistribution.Merge(m, src)
}
func (m *ClaimPeriodRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPeriodRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPeriodRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPeriodRewardDistribution proto.InternalMessageInfo

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetTotalRewardsPoolForClaimPeriod() types.Coin {
	if m != nil {
		return m.TotalRewardsPoolForClaimPeriod
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetRewardsPool() types.Coin {
	if m != nil {
		return m.RewardsPool
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodEnded() bool {
	if m != nil {
		return m.ClaimPeriodEnded
	}
	return false
}

type AccountState struct {
	RewardProgramId uint64 `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	SubPeriodId     uint64 `protobuf:"varint,2,opt,name=sub_period_id,json=subPeriodId,proto3" json:"sub_period_id,omitempty"`
	Address         string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	ActionCounter   uint64 `protobuf:"varint,4,opt,name=action_counter,json=actionCounter,proto3" json:"action_counter,omitempty"`
}

func (m *AccountState) Reset()      { *m = AccountState{} }
func (*AccountState) ProtoMessage() {}
func (*AccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3}
}
func (m *AccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountState.Merge(m, src)
}
func (m *AccountState) XXX_Size() int {
	return m.Size()
}
func (m *AccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountState.DiscardUnknown(m)
}

var xxx_messageInfo_AccountState proto.InternalMessageInfo

func (m *AccountState) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *AccountState) GetSubPeriodId() uint64 {
	if m != nil {
		return m.SubPeriodId
	}
	return 0
}

func (m *AccountState) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountState) GetActionCounter() uint64 {
	if m != nil {
		return m.ActionCounter
	}
	return 0
}

// Share
// Reward Program Id + Reward Claim Period Id + Address
type Share struct {
	RewardProgramId uint64    `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	SubPeriodId     uint64    `protobuf:"varint,2,opt,name=sub_period_id,json=subPeriodId,proto3" json:"sub_period_id,omitempty"`
	Address         string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Claimed         bool      `protobuf:"varint,4,opt,name=claimed,proto3" json:"claimed,omitempty"`
	ExpireTime      time.Time `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3,stdtime" json:"expire_time,omitempty" yaml:"expire_time,omitempty"`
	Amount          int64     `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Share) Reset()      { *m = Share{} }
func (*Share) ProtoMessage() {}
func (*Share) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{4}
}
func (m *Share) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Share) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Share.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Share) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Share.Merge(m, src)
}
func (m *Share) XXX_Size() int {
	return m.Size()
}
func (m *Share) XXX_DiscardUnknown() {
	xxx_messageInfo_Share.DiscardUnknown(m)
}

var xxx_messageInfo_Share proto.InternalMessageInfo

func (m *Share) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *Share) GetSubPeriodId() uint64 {
	if m != nil {
		return m.SubPeriodId
	}
	return 0
}

func (m *Share) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Share) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *Share) GetExpireTime() time.Time {
	if m != nil {
		return m.ExpireTime
	}
	return time.Time{}
}

func (m *Share) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type QualifyingAction struct {
	// Types that are valid to be assigned to Type:
	//	*QualifyingAction_Delegate
	//	*QualifyingAction_TransferDelegations
	Type isQualifyingAction_Type `protobuf_oneof:"type"`
}

func (m *QualifyingAction) Reset()         { *m = QualifyingAction{} }
func (m *QualifyingAction) String() string { return proto.CompactTextString(m) }
func (*QualifyingAction) ProtoMessage()    {}
func (*QualifyingAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{5}
}
func (m *QualifyingAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualifyingAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualifyingAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualifyingAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyingAction.Merge(m, src)
}
func (m *QualifyingAction) XXX_Size() int {
	return m.Size()
}
func (m *QualifyingAction) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyingAction.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyingAction proto.InternalMessageInfo

type isQualifyingAction_Type interface {
	isQualifyingAction_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QualifyingAction_Delegate struct {
	Delegate *ActionDelegate `protobuf:"bytes,1,opt,name=delegate,proto3,oneof" json:"delegate,omitempty"`
}
type QualifyingAction_TransferDelegations struct {
	TransferDelegations *ActionTransferDelegations `protobuf:"bytes,2,opt,name=transferDelegations,proto3,oneof" json:"transferDelegations,omitempty"`
}

func (*QualifyingAction_Delegate) isQualifyingAction_Type()            {}
func (*QualifyingAction_TransferDelegations) isQualifyingAction_Type() {}

func (m *QualifyingAction) GetType() isQualifyingAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *QualifyingAction) GetDelegate() *ActionDelegate {
	if x, ok := m.GetType().(*QualifyingAction_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (m *QualifyingAction) GetTransferDelegations() *ActionTransferDelegations {
	if x, ok := m.GetType().(*QualifyingAction_TransferDelegations); ok {
		return x.TransferDelegations
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QualifyingAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QualifyingAction_Delegate)(nil),
		(*QualifyingAction_TransferDelegations)(nil),
	}
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
type ActionDelegate struct {
	MinimumActions               uint64                                 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	MaximumActions               uint64                                 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	MinimumDelegationAmount      *types.Coin                            `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount,omitempty"`
	MaximumDelegationAmount      *types.Coin                            `protobuf:"bytes,4,opt,name=maximum_delegation_amount,json=maximumDelegationAmount,proto3" json:"maximum_delegation_amount,omitempty"`
	MinimumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=minimum_active_stake_percentile,json=minimumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_active_stake_percentile"`
	MaximumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=maximum_active_stake_percentile,json=maximumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_active_stake_percentile"`
}

func (m *ActionDelegate) Reset()      { *m = ActionDelegate{} }
func (*ActionDelegate) ProtoMessage() {}
func (*ActionDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{6}
}
func (m *ActionDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDelegate.Merge(m, src)
}
func (m *ActionDelegate) XXX_Size() int {
	return m.Size()
}
func (m *ActionDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDelegate proto.InternalMessageInfo

func (m *ActionDelegate) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionDelegate) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionDelegate) GetMinimumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return nil
}

func (m *ActionDelegate) GetMaximumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MaximumDelegationAmount
	}
	return nil
}

// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransferDelegations "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
type ActionTransferDelegations struct {
}

func (m *ActionTransferDelegations) Reset()      { *m = ActionTransferDelegations{} }
func (*ActionTransferDelegations) ProtoMessage() {}
func (*ActionTransferDelegations) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{7}
}
func (m *ActionTransferDelegations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionTransferDelegations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionTransferDelegations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionTransferDelegations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionTransferDelegations.Merge(m, src)
}
func (m *ActionTransferDelegations) XXX_Size() int {
	return m.Size()
}
func (m *ActionTransferDelegations) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionTransferDelegations.DiscardUnknown(m)
}

var xxx_messageInfo_ActionTransferDelegations proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("provenance.reward.v1.RewardProgram_State", RewardProgram_State_name, RewardProgram_State_value)
	proto.RegisterType((*RewardProgram)(nil), "provenance.reward.v1.RewardProgram")
	proto.RegisterType((*RewardProgramBalance)(nil), "provenance.reward.v1.RewardProgramBalance")
	proto.RegisterType((*ClaimPeriodRewardDistribution)(nil), "provenance.reward.v1.ClaimPeriodRewardDistribution")
	proto.RegisterType((*AccountState)(nil), "provenance.reward.v1.AccountState")
	proto.RegisterType((*Share)(nil), "provenance.reward.v1.Share")
	proto.RegisterType((*QualifyingAction)(nil), "provenance.reward.v1.QualifyingAction")
	proto.RegisterType((*ActionDelegate)(nil), "provenance.reward.v1.ActionDelegate")
	proto.RegisterType((*ActionTransferDelegations)(nil), "provenance.reward.v1.ActionTransferDelegations")
}

func init() { proto.RegisterFile("provenance/reward/v1/reward.proto", fileDescriptor_0c3894741a216575) }

var fileDescriptor_0c3894741a216575 = []byte{
	// 1337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xbf, 0x73, 0x1b, 0x45,
	0x14, 0xd6, 0xc9, 0xf2, 0x8f, 0x3c, 0xd9, 0xb2, 0xb2, 0xb1, 0xe3, 0x73, 0x08, 0x92, 0x22, 0x13,
	0x63, 0x32, 0xc9, 0x09, 0x9b, 0x19, 0x66, 0x48, 0xc3, 0x58, 0xb1, 0x43, 0x3c, 0xcc, 0x24, 0xe6,
	0xe4, 0x14, 0x30, 0xc3, 0xdc, 0xac, 0xee, 0x56, 0xca, 0x4d, 0x74, 0xb7, 0xca, 0xed, 0xca, 0xb1,
	0x1a, 0x5a, 0xa0, 0x4b, 0x19, 0xba, 0x14, 0xfc, 0x09, 0x50, 0x52, 0xd0, 0xa5, 0x61, 0x26, 0x25,
	0x43, 0x21, 0x98, 0xa4, 0x61, 0x28, 0xd3, 0xd2, 0x30, 0xb7, 0xbb, 0x27, 0xed, 0x59, 0x4a, 0x14,
	0x68, 0xa8, 0xe2, 0xdd, 0xf7, 0xbd, 0xf7, 0xbe, 0xf7, 0xe3, 0xbe, 0x55, 0xe0, 0x52, 0x37, 0xa2,
	0xc7, 0x24, 0xc4, 0xa1, 0x4b, 0x6a, 0x11, 0x79, 0x88, 0x23, 0xaf, 0x76, 0xbc, 0xad, 0xfe, 0xb2,
	0xba, 0x11, 0xe5, 0x14, 0xad, 0x8c, 0x20, 0x96, 0x32, 0x1c, 0x6f, 0x5f, 0x58, 0x69, 0xd3, 0x36,
	0x15, 0x80, 0x5a, 0xfc, 0x97, 0xc4, 0x5e, 0x28, 0xb7, 0x29, 0x6d, 0x77, 0x48, 0x4d, 0x9c, 0x9a,
	0xbd, 0x56, 0x8d, 0xfb, 0x01, 0x61, 0x1c, 0x07, 0x5d, 0x05, 0x58, 0x3f, 0x0d, 0xc0, 0x61, 0x5f,
	0x99, 0x4a, 0x2e, 0x65, 0x01, 0x65, 0xb5, 0x26, 0x66, 0xa4, 0x76, 0xbc, 0xdd, 0x24, 0x1c, 0x6f,
	0xd7, 0x5c, 0xea, 0x87, 0x89, 0xab, 0xb4, 0x3b, 0x32, 0xa9, 0x3c, 0x48, 0x53, 0xf5, 0x6f, 0x80,
	0x25, 0x5b, 0x50, 0x3b, 0x8c, 0x68, 0x3b, 0xc2, 0x01, 0x2a, 0x40, 0xd6, 0xf7, 0x4c, 0xa3, 0x62,
	0x6c, 0xe5, 0xec, 0xac, 0xef, 0xa1, 0x15, 0x98, 0xe5, 0x3e, 0xef, 0x10, 0x33, 0x5b, 0x31, 0xb6,
	0xce, 0xd8, 0xf2, 0x80, 0x2a, 0x90, 0xf7, 0x08, 0x73, 0x23, 0xbf, 0xcb, 0x7d, 0x1a, 0x9a, 0x33,
	0xc2, 0xa6, 0x5f, 0xa1, 0x0f, 0x61, 0xcd, 0xf3, 0x19, 0x8f, 0xfc, 0x66, 0x8f, 0x13, 0xa7, 0x15,
	0xd1, 0xc0, 0xc1, 0x9e, 0x17, 0x11, 0xc6, 0xcc, 0x9c, 0x40, 0xaf, 0x8e, 0xcc, 0x37, 0x23, 0x1a,
	0xec, 0x4a, 0x23, 0xfa, 0x14, 0xce, 0x72, 0xca, 0x71, 0xc7, 0x91, 0x1d, 0x73, 0xba, 0x94, 0x76,
	0xcc, 0xd9, 0x8a, 0xb1, 0x95, 0xdf, 0x59, 0xb7, 0x14, 0xf7, 0xb8, 0x50, 0x4b, 0x15, 0x6a, 0xdd,
	0xa0, 0x7e, 0x58, 0xcf, 0x3d, 0x1d, 0x94, 0x33, 0xf6, 0xb2, 0xf0, 0x54, 0xf5, 0x50, 0xda, 0x41,
	0x36, 0xac, 0x06, 0xf8, 0x24, 0x09, 0xd5, 0xec, 0x0f, 0x29, 0xcc, 0xbd, 0x59, 0x40, 0x14, 0xe0,
	0x13, 0x19, 0xae, 0xde, 0x4f, 0x08, 0xbe, 0x0f, 0x2b, 0x6e, 0x07, 0xfb, 0x81, 0xd3, 0x25, 0x91,
	0x4f, 0x3d, 0x87, 0x11, 0x97, 0x86, 0x1e, 0x33, 0xe7, 0x45, 0xcb, 0x90, 0xb0, 0x1d, 0x0a, 0x53,
	0x43, 0x5a, 0xd0, 0x77, 0x06, 0xa0, 0xae, 0x6c, 0xaf, 0xc3, 0x38, 0x8e, 0xb8, 0x13, 0x0f, 0xd7,
	0x5c, 0x10, 0x1c, 0x2e, 0x58, 0x72, 0xb0, 0x56, 0x32, 0x58, 0xeb, 0x28, 0x99, 0x7c, 0xfd, 0x4e,
	0x4c, 0xe2, 0xaf, 0x41, 0xf9, 0xe2, 0xb8, 0xf7, 0x55, 0x1a, 0xf8, 0x9c, 0x04, 0x5d, 0xde, 0x7f,
	0x39, 0x28, 0x6f, 0xf4, 0x71, 0xd0, 0xb9, 0x5e, 0x7d, 0x1d, 0xaa, 0xfa, 0xe8, 0xf7, 0xb2, 0x61,
	0x17, 0x15, 0xa4, 0x11, 0x23, 0xe2, 0x3c, 0xe8, 0x07, 0x03, 0xd6, 0xc9, 0x49, 0x97, 0xb8, 0x9c,
	0x78, 0x4e, 0x12, 0x80, 0x84, 0x9e, 0xa4, 0x78, 0x66, 0x2a, 0xc5, 0x2f, 0x15, 0xc5, 0x8d, 0x57,
	0x06, 0x49, 0x31, 0xbd, 0x22, 0x99, 0xbe, 0x01, 0x58, 0x12, 0x3e, 0x9f, 0x20, 0xd5, 0x7a, 0xee,
	0x87, 0x9e, 0xa0, 0xfd, 0xbd, 0x01, 0xab, 0xa9, 0x29, 0x0c, 0x29, 0xc3, 0x54, 0xca, 0x77, 0x15,
	0xe5, 0xf2, 0xc4, 0x00, 0x29, 0xba, 0x9b, 0x92, 0xee, 0x14, 0xa0, 0xa4, 0xaa, 0x4f, 0x3e, 0xa1,
	0xf9, 0xd8, 0x80, 0x35, 0xec, 0xf2, 0x1e, 0xee, 0x8c, 0xf7, 0x36, 0x3f, 0x95, 0xe8, 0xbe, 0x22,
	0xba, 0xd6, 0xf2, 0x43, 0x9f, 0xdd, 0x23, 0x13, 0x08, 0x96, 0x24, 0xc1, 0x57, 0x00, 0x24, 0xb1,
	0x15, 0xc9, 0xe0, 0x54, 0x07, 0x37, 0x60, 0x49, 0x2f, 0x8b, 0x99, 0x8b, 0x62, 0x7f, 0x17, 0xb5,
	0x2a, 0xe4, 0xae, 0xf7, 0xa2, 0x88, 0x84, 0xdc, 0xd1, 0xc1, 0xe6, 0x92, 0xda, 0x75, 0x69, 0xbb,
	0x31, 0x72, 0x41, 0x1f, 0xc3, 0x2c, 0xe3, 0x98, 0x13, 0xb3, 0x50, 0x31, 0xb6, 0x0a, 0x3b, 0xef,
	0x59, 0x93, 0x34, 0xd0, 0x4a, 0x49, 0x8e, 0xd5, 0x88, 0x1d, 0x6c, 0xe9, 0x17, 0xeb, 0x06, 0xbb,
	0x87, 0x23, 0xe2, 0x90, 0x93, 0xae, 0x1f, 0xe1, 0x58, 0x4b, 0x1c, 0xda, 0x6a, 0x31, 0xc2, 0xcd,
	0x65, 0x91, 0x75, 0x55, 0x98, 0xf7, 0x87, 0xd6, 0x3b, 0xc2, 0x88, 0x1e, 0x02, 0x7a, 0xd0, 0xc3,
	0x1d, 0xbf, 0xd5, 0xf7, 0xc3, 0xb6, 0x83, 0xdd, 0xd8, 0xc4, 0xcc, 0x62, 0x65, 0x66, 0x2b, 0xbf,
	0xb3, 0x39, 0x99, 0xc5, 0x67, 0x43, 0xfc, 0xae, 0x80, 0xd7, 0x2b, 0x71, 0xc3, 0x5f, 0x0e, 0xca,
	0xa6, 0xec, 0xea, 0x78, 0x3c, 0xfb, 0xec, 0x83, 0x53, 0x3e, 0xac, 0x5a, 0x83, 0x59, 0x51, 0x00,
	0xca, 0xc3, 0xfc, 0xe1, 0xfe, 0xed, 0xbd, 0x83, 0xdb, 0x9f, 0x14, 0x33, 0xf1, 0xa1, 0x71, 0xb4,
	0x6b, 0x1f, 0xed, 0xef, 0x15, 0x0d, 0xb4, 0x08, 0x0b, 0x37, 0x0f, 0x6e, 0x1f, 0x34, 0x6e, 0xed,
	0xef, 0x15, 0xb3, 0xd7, 0x17, 0x1e, 0x3f, 0x29, 0x67, 0xfe, 0x7c, 0x52, 0x36, 0xaa, 0x5f, 0x1b,
	0xb0, 0x92, 0x6a, 0x45, 0x1d, 0x77, 0x62, 0x8e, 0xe8, 0x0a, 0x9c, 0x4d, 0xe4, 0x4f, 0xad, 0xcd,
	0x50, 0x93, 0x97, 0x23, 0xdd, 0xe1, 0xc0, 0x43, 0x1f, 0xc1, 0x7c, 0x53, 0xba, 0x09, 0x19, 0x7e,
	0x03, 0x55, 0x4b, 0xf0, 0x1a, 0x93, 0x1f, 0x67, 0xe0, 0x6d, 0x6d, 0x8c, 0x92, 0xd4, 0x5e, 0x22,
	0xd0, 0xb1, 0x9e, 0x6f, 0xc2, 0x72, 0xea, 0x33, 0x18, 0x12, 0x5a, 0xd2, 0x36, 0xe6, 0xc0, 0x9b,
	0x4c, 0x3d, 0x3b, 0x99, 0xfa, 0xb7, 0x06, 0x6c, 0xe8, 0x62, 0xcf, 0x84, 0xda, 0x3b, 0x2d, 0x1a,
	0xa5, 0xd7, 0x6d, 0x6a, 0x5d, 0x97, 0xd4, 0xe0, 0xd6, 0xe5, 0xe0, 0xc6, 0x63, 0x56, 0xed, 0x92,
	0xf6, 0x36, 0xb0, 0xf8, 0x71, 0xb8, 0x49, 0x23, 0x7d, 0x71, 0x3f, 0x87, 0x45, 0xdd, 0x41, 0x3c,
	0x52, 0xaf, 0xcd, 0xf9, 0x96, 0xca, 0x79, 0x4e, 0xe6, 0x4c, 0x67, 0xcb, 0x47, 0xa3, 0x44, 0xe8,
	0x12, 0x2c, 0x4a, 0x46, 0x62, 0x73, 0x99, 0x78, 0xcd, 0x66, 0xec, 0xbc, 0xb8, 0x6b, 0x88, 0x2b,
	0x74, 0x15, 0xd0, 0x69, 0x91, 0x21, 0x9e, 0x78, 0xa5, 0x16, 0xec, 0x62, 0x5a, 0x58, 0x88, 0xa7,
	0xcd, 0xed, 0x27, 0x03, 0x16, 0x77, 0x5d, 0x97, 0xf6, 0x42, 0x2e, 0x97, 0xf0, 0xdf, 0x6c, 0x4e,
	0x15, 0x96, 0x58, 0xaf, 0xa9, 0x0d, 0x54, 0x8e, 0x29, 0xcf, 0x7a, 0xcd, 0xe1, 0x38, 0xaf, 0xc2,
	0x7c, 0xf2, 0x66, 0x8a, 0x47, 0xbe, 0x8e, 0x5e, 0x0e, 0xca, 0x05, 0x59, 0xb2, 0x32, 0x54, 0xed,
	0x04, 0x82, 0x2e, 0x43, 0x41, 0x7e, 0x29, 0x8e, 0xa0, 0x44, 0x22, 0xd1, 0xc6, 0x9c, 0xbd, 0x24,
	0x6f, 0x6f, 0xc8, 0x4b, 0x8d, 0xff, 0xcf, 0x59, 0x98, 0x15, 0x2d, 0xf8, 0x9f, 0x89, 0x9b, 0x30,
	0x2f, 0xba, 0x4c, 0x3c, 0xc1, 0x78, 0xc1, 0x4e, 0x8e, 0xe8, 0x2b, 0xc8, 0x0b, 0x25, 0x22, 0x52,
	0xb5, 0x67, 0xa7, 0xaa, 0xf6, 0xae, 0x52, 0xed, 0x55, 0xcd, 0x2d, 0xa5, 0xd9, 0x17, 0x87, 0x6f,
	0xe0, 0xb8, 0x59, 0x2a, 0x36, 0x48, 0x9b, 0xd0, 0xe9, 0xf3, 0x30, 0x87, 0x83, 0xb8, 0x6f, 0x62,
	0x1b, 0x66, 0x6c, 0x75, 0xd2, 0x7a, 0xf8, 0x8b, 0x01, 0xc5, 0xd3, 0x52, 0x86, 0xea, 0xb0, 0xe0,
	0x91, 0x0e, 0x69, 0xc7, 0x52, 0x6c, 0x08, 0xce, 0xef, 0x4c, 0x16, 0x41, 0x89, 0xdf, 0x53, 0xd8,
	0x5b, 0x19, 0x7b, 0xe8, 0x87, 0x5c, 0x38, 0xc7, 0x23, 0x1c, 0xb2, 0x16, 0x89, 0x94, 0x5d, 0x68,
	0x6a, 0x56, 0x84, 0xab, 0xbd, 0x2e, 0xdc, 0xd1, 0xb8, 0xdb, 0xad, 0x8c, 0x3d, 0x29, 0x9a, 0xa8,
	0xc3, 0x88, 0xeb, 0xa8, 0xcf, 0x41, 0x8e, 0xf7, 0xbb, 0xa4, 0xfa, 0x4d, 0x0e, 0x0a, 0x69, 0x56,
	0xe8, 0x5d, 0x58, 0x0e, 0xfc, 0xd0, 0x0f, 0x7a, 0xc1, 0x50, 0xd9, 0xe5, 0x6a, 0x14, 0xd4, 0xb5,
	0x12, 0x63, 0x01, 0xc4, 0x27, 0x29, 0x60, 0x56, 0x01, 0xe5, 0x75, 0x02, 0xbc, 0x0b, 0xeb, 0x49,
	0x44, 0x6f, 0xc8, 0xc6, 0x51, 0x9d, 0x9e, 0xa6, 0x37, 0xf6, 0x9a, 0xf2, 0x1d, 0x15, 0xb2, 0x2b,
	0x3c, 0x45, 0x58, 0x95, 0x7f, 0x3c, 0x6c, 0x6e, 0x7a, 0x58, 0xe9, 0x3b, 0x16, 0xb6, 0x07, 0x65,
	0xbd, 0xfe, 0x63, 0x12, 0xff, 0xc6, 0xbb, 0x4f, 0xe2, 0x2f, 0xc0, 0x25, 0x21, 0xf7, 0x3b, 0x72,
	0x31, 0xcf, 0xd4, 0xad, 0x78, 0xf9, 0x7e, 0x1b, 0x94, 0x37, 0xdb, 0x3e, 0xbf, 0xd7, 0x6b, 0x5a,
	0x2e, 0x0d, 0xd4, 0x0f, 0x7e, 0xf5, 0xcf, 0x35, 0xe6, 0xdd, 0xaf, 0xc5, 0x6d, 0x66, 0xd6, 0x1e,
	0x71, 0xed, 0x8b, 0x5a, 0xff, 0x8e, 0x49, 0x23, 0x0e, 0x7a, 0x38, 0x8c, 0x29, 0xd2, 0x6a, 0xdd,
	0x9c, 0x94, 0x76, 0xee, 0x3f, 0xa6, 0x1d, 0x4d, 0x63, 0x2c, 0xad, 0xb6, 0xda, 0x97, 0x61, 0xfd,
	0x95, 0x0b, 0x35, 0x82, 0xd5, 0xdb, 0x4f, 0x9f, 0x97, 0x8c, 0x67, 0xcf, 0x4b, 0xc6, 0x1f, 0xcf,
	0x4b, 0xc6, 0xa3, 0x17, 0xa5, 0xcc, 0xb3, 0x17, 0xa5, 0xcc, 0xaf, 0x2f, 0x4a, 0x19, 0x58, 0xf3,
	0xe9, 0xc4, 0x3d, 0x3d, 0x34, 0xbe, 0xd8, 0xd1, 0xb8, 0x8e, 0x20, 0xd7, 0x7c, 0xaa, 0x9d, 0x6a,
	0x27, 0xc9, 0xff, 0xed, 0x04, 0xf7, 0xe6, 0x9c, 0xf8, 0xde, 0x3f, 0xf8, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x82, 0xc4, 0xb1, 0x3e, 0xfd, 0x0d, 0x00, 0x00,
}

func (this *RewardProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgram)
	if !ok {
		that2, ok := that.(RewardProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DistributeFromAddress != that1.DistributeFromAddress {
		return false
	}
	if !this.TotalRewardPool.Equal(&that1.TotalRewardPool) {
		return false
	}
	if !this.MaxRewardByAddress.Equal(&that1.MaxRewardByAddress) {
		return false
	}
	if this.ClaimPeriodSeconds != that1.ClaimPeriodSeconds {
		return false
	}
	if !this.ProgramStartTime.Equal(that1.ProgramStartTime) {
		return false
	}
	if !this.ExpectedProgramEndTime.Equal(that1.ExpectedProgramEndTime) {
		return false
	}
	if !this.ClaimPeriodEndTime.Equal(that1.ClaimPeriodEndTime) {
		return false
	}
	if !this.ActualProgramEndTime.Equal(that1.ActualProgramEndTime) {
		return false
	}
	if this.ClaimPeriods != that1.ClaimPeriods {
		return false
	}
	if this.CurrentClaimPeriod != that1.CurrentClaimPeriod {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.ShareExpirationOffset != that1.ShareExpirationOffset {
		return false
	}
	if len(this.QualifyingActions) != len(that1.QualifyingActions) {
		return false
	}
	for i := range this.QualifyingActions {
		if !this.QualifyingActions[i].Equal(&that1.QualifyingActions[i]) {
			return false
		}
	}
	return true
}
func (this *RewardProgramBalance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgramBalance)
	if !ok {
		that2, ok := that.(RewardProgramBalance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.Balance.Equal(&that1.Balance) {
		return false
	}
	return true
}
func (this *ClaimPeriodRewardDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimPeriodRewardDistribution)
	if !ok {
		that2, ok := that.(ClaimPeriodRewardDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardsPoolForClaimPeriod.Equal(&that1.TotalRewardsPoolForClaimPeriod) {
		return false
	}
	if !this.RewardsPool.Equal(&that1.RewardsPool) {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if this.ClaimPeriodEnded != that1.ClaimPeriodEnded {
		return false
	}
	return true
}
func (this *AccountState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountState)
	if !ok {
		that2, ok := that.(AccountState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.SubPeriodId != that1.SubPeriodId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.ActionCounter != that1.ActionCounter {
		return false
	}
	return true
}
func (this *Share) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Share)
	if !ok {
		that2, ok := that.(Share)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.SubPeriodId != that1.SubPeriodId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Claimed != that1.Claimed {
		return false
	}
	if !this.ExpireTime.Equal(that1.ExpireTime) {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *QualifyingAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction)
	if !ok {
		that2, ok := that.(QualifyingAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *QualifyingAction_Delegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Delegate)
	if !ok {
		that2, ok := that.(QualifyingAction_Delegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delegate.Equal(that1.Delegate) {
		return false
	}
	return true
}
func (this *QualifyingAction_TransferDelegations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_TransferDelegations)
	if !ok {
		that2, ok := that.(QualifyingAction_TransferDelegations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TransferDelegations.Equal(that1.TransferDelegations) {
		return false
	}
	return true
}
func (this *ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionDelegate)
	if !ok {
		that2, ok := that.(ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(that1.MinimumDelegationAmount) {
		return false
	}
	if !this.MaximumDelegationAmount.Equal(that1.MaximumDelegationAmount) {
		return false
	}
	if !this.MinimumActiveStakePercentile.Equal(that1.MinimumActiveStakePercentile) {
		return false
	}
	if !this.MaximumActiveStakePercentile.Equal(that1.MaximumActiveStakePercentile) {
		return false
	}
	return true
}
func (this *ActionTransferDelegations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionTransferDelegations)
	if !ok {
		that2, ok := that.(ActionTransferDelegations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (m *RewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.ShareExpirationOffset != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ShareExpirationOffset))
		i--
		dAtA[i] = 0x78
	}
	if m.State != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x70
	}
	if m.CurrentClaimPeriod != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.CurrentClaimPeriod))
		i--
		dAtA[i] = 0x68
	}
	if m.ClaimPeriods != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriods))
		i--
		dAtA[i] = 0x60
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ActualProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintReward(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClaimPeriodEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintReward(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x52
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpectedProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintReward(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintReward(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if m.ClaimPeriodSeconds != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodSeconds))
		i--
		dAtA[i] = 0x38
	}
	{
		size, err := m.MaxRewardByAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalRewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardProgramBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgramBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgramBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPeriodRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPeriodRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPeriodRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimPeriodEnded {
		i--
		if m.ClaimPeriodEnded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.RewardsPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TotalRewardsPoolForClaimPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionCounter != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ActionCounter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.SubPeriodId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Share) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Share) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Share) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintReward(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x2a
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.SubPeriodId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualifyingAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Delegate != nil {
		{
			size, err := m.Delegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingAction_TransferDelegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_TransferDelegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TransferDelegations != nil {
		{
			size, err := m.TransferDelegations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ActionDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaximumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MaximumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinimumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MinimumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaximumDelegationAmount != nil {
		{
			size, err := m.MaximumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinimumDelegationAmount != nil {
		{
			size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionTransferDelegations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionTransferDelegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionTransferDelegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReward(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.TotalRewardPool.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaxRewardByAddress.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriodSeconds != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodSeconds))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriods != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriods))
	}
	if m.CurrentClaimPeriod != 0 {
		n += 1 + sovReward(uint64(m.CurrentClaimPeriod))
	}
	if m.State != 0 {
		n += 1 + sovReward(uint64(m.State))
	}
	if m.ShareExpirationOffset != 0 {
		n += 1 + sovReward(uint64(m.ShareExpirationOffset))
	}
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 2 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *RewardProgramBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.Balance.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ClaimPeriodRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimPeriodId != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodId))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardsPoolForClaimPeriod.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.RewardsPool.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	if m.ClaimPeriodEnded {
		n += 2
	}
	return n
}

func (m *AccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.SubPeriodId != 0 {
		n += 1 + sovReward(uint64(m.SubPeriodId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.ActionCounter != 0 {
		n += 1 + sovReward(uint64(m.ActionCounter))
	}
	return n
}

func (m *Share) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.SubPeriodId != 0 {
		n += 1 + sovReward(uint64(m.SubPeriodId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.Claimed {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireTime)
	n += 1 + l + sovReward(uint64(l))
	if m.Amount != 0 {
		n += 1 + sovReward(uint64(m.Amount))
	}
	return n
}

func (m *QualifyingAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *QualifyingAction_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate != nil {
		l = m.Delegate.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingAction_TransferDelegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransferDelegations != nil {
		l = m.TransferDelegations.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	if m.MinimumDelegationAmount != nil {
		l = m.MinimumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	if m.MaximumDelegationAmount != nil {
		l = m.MaximumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.MinimumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaximumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionTransferDelegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRewardByAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodSeconds", wireType)
			}
			m.ClaimPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpectedProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClaimPeriodEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ActualProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			m.ClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentClaimPeriod", wireType)
			}
			m.CurrentClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RewardProgram_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareExpirationOffset", wireType)
			}
			m.ShareExpirationOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareExpirationOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardProgramBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgramBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgramBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPeriodRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardsPoolForClaimPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardsPoolForClaimPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEnded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimPeriodEnded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPeriodId", wireType)
			}
			m.SubPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCounter", wireType)
			}
			m.ActionCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Share) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Share: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Share: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPeriodId", wireType)
			}
			m.SubPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualifyingAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualifyingAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualifyingAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Delegate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionTransferDelegations{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_TransferDelegations{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumDelegationAmount == nil {
				m.MinimumDelegationAmount = &types.Coin{}
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaximumDelegationAmount == nil {
				m.MaximumDelegationAmount = &types.Coin{}
			}
			if err := m.MaximumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionTransferDelegations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionTransferDelegations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionTransferDelegations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
