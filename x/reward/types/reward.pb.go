// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/reward.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// State is the state of the reward program
type RewardProgram_State int32

const (
	// undefined program state
	RewardProgram_STATE_UNSPECIFIED RewardProgram_State = 0
	// pending state of reward program
	RewardProgram_STATE_PENDING RewardProgram_State = 1
	// started state of reward program
	RewardProgram_STATE_STARTED RewardProgram_State = 2
	// finished state of reward program
	RewardProgram_STATE_FINISHED RewardProgram_State = 3
	// expired state of reward program
	RewardProgram_STATE_EXPIRED RewardProgram_State = 4
)

var RewardProgram_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "STATE_PENDING",
	2: "STATE_STARTED",
	3: "STATE_FINISHED",
	4: "STATE_EXPIRED",
}

var RewardProgram_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"STATE_PENDING":     1,
	"STATE_STARTED":     2,
	"STATE_FINISHED":    3,
	"STATE_EXPIRED":     4,
}

func (x RewardProgram_State) String() string {
	return proto.EnumName(RewardProgram_State_name, int32(x))
}

func (RewardProgram_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0, 0}
}

// ClaimStatus is the state a claim is in
type RewardAccountState_ClaimStatus int32

const (
	// undefined state
	RewardAccountState_CLAIM_STATUS_UNSPECIFIED RewardAccountState_ClaimStatus = 0
	// unclaimable status
	RewardAccountState_CLAIM_STATUS_UNCLAIMABLE RewardAccountState_ClaimStatus = 1
	// unclaimable claimable
	RewardAccountState_CLAIM_STATUS_CLAIMABLE RewardAccountState_ClaimStatus = 2
	// unclaimable claimed
	RewardAccountState_CLAIM_STATUS_CLAIMED RewardAccountState_ClaimStatus = 3
	// unclaimable expired
	RewardAccountState_CLAIM_STATUS_EXPIRED RewardAccountState_ClaimStatus = 4
)

var RewardAccountState_ClaimStatus_name = map[int32]string{
	0: "CLAIM_STATUS_UNSPECIFIED",
	1: "CLAIM_STATUS_UNCLAIMABLE",
	2: "CLAIM_STATUS_CLAIMABLE",
	3: "CLAIM_STATUS_CLAIMED",
	4: "CLAIM_STATUS_EXPIRED",
}

var RewardAccountState_ClaimStatus_value = map[string]int32{
	"CLAIM_STATUS_UNSPECIFIED": 0,
	"CLAIM_STATUS_UNCLAIMABLE": 1,
	"CLAIM_STATUS_CLAIMABLE":   2,
	"CLAIM_STATUS_CLAIMED":     3,
	"CLAIM_STATUS_EXPIRED":     4,
}

func (x RewardAccountState_ClaimStatus) String() string {
	return proto.EnumName(RewardAccountState_ClaimStatus_name, int32(x))
}

func (RewardAccountState_ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3, 0}
}

// RewardProgram
type RewardProgram struct {
	// An integer to uniquely identify the reward program.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name to help identify the Reward Program.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Short summary describing the Reward Program.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Community pool for now (who provides the money).
	DistributeFromAddress string `protobuf:"bytes,4,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	// The total amount of funding given to the RewardProgram.
	TotalRewardPool types.Coin `protobuf:"bytes,5,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool"`
	// The remaining funds available to distribute.
	RemainingPoolBalance types.Coin `protobuf:"bytes,6,opt,name=remaining_pool_balance,json=remainingPoolBalance,proto3" json:"remaining_pool_balance"`
	// The total amount of funds claimed by participants.
	ClaimedAmount types.Coin `protobuf:"bytes,7,opt,name=claimed_amount,json=claimedAmount,proto3" json:"claimed_amount"`
	// Maximum reward per claim per address.
	MaxRewardByAddress types.Coin `protobuf:"bytes,8,opt,name=max_reward_by_address,json=maxRewardByAddress,proto3" json:"max_reward_by_address"`
	// Minimum amount of coins for a program to rollover.
	MinimumRolloverAmount types.Coin `protobuf:"bytes,9,opt,name=minimum_rollover_amount,json=minimumRolloverAmount,proto3" json:"minimum_rollover_amount"`
	// Number of seconds that a claim period lasts.
	ClaimPeriodSeconds uint64 `protobuf:"varint,10,opt,name=claim_period_seconds,json=claimPeriodSeconds,proto3" json:"claim_period_seconds,omitempty"`
	// Time that a RewardProgram should start and switch to STARTED state.
	ProgramStartTime time.Time `protobuf:"bytes,11,opt,name=program_start_time,json=programStartTime,proto3,stdtime" json:"program_start_time,omitempty" yaml:"program_start_time,omitempty"`
	// Time that a RewardProgram MUST end.
	ExpectedProgramEndTime time.Time `protobuf:"bytes,12,opt,name=expected_program_end_time,json=expectedProgramEndTime,proto3,stdtime" json:"expected_program_end_time,omitempty" yaml:"expected_program_end_time,omitempty"`
	// Time that a RewardProgram MUST end.
	ProgramEndTimeMax time.Time `protobuf:"bytes,13,opt,name=program_end_time_max,json=programEndTimeMax,proto3,stdtime" json:"program_end_time_max,omitempty" yaml:"program_end_time_max,omitempty"`
	// Used internally to calculate and track the current claim period's ending time.
	ClaimPeriodEndTime time.Time `protobuf:"bytes,14,opt,name=claim_period_end_time,json=claimPeriodEndTime,proto3,stdtime" json:"claim_period_end_time,omitempty" yaml:"claim_period_end_time,omitempty"`
	// Time the RewardProgram switched to FINISHED state. Initially set as empty.
	ActualProgramEndTime time.Time `protobuf:"bytes,15,opt,name=actual_program_end_time,json=actualProgramEndTime,proto3,stdtime" json:"finished_time,omitempty" yaml:"finished_time,omitempty"`
	// Number of claim periods this program will run for.
	ClaimPeriods uint64 `protobuf:"varint,16,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	// Current claim period of the RewardProgram. Uses 1-based indexing.
	CurrentClaimPeriod uint64 `protobuf:"varint,17,opt,name=current_claim_period,json=currentClaimPeriod,proto3" json:"current_claim_period,omitempty"`
	// maximum number of claim periods a reward program can rollover.
	MaxRolloverClaimPeriods uint64 `protobuf:"varint,18,opt,name=max_rollover_claim_periods,json=maxRolloverClaimPeriods,proto3" json:"max_rollover_claim_periods,omitempty"`
	// Current state of the RewardProgram.
	State RewardProgram_State `protobuf:"varint,19,opt,name=state,proto3,enum=provenance.reward.v1.RewardProgram_State" json:"state,omitempty"`
	// Grace period after a RewardProgram FINISHED. It is the number of seconds until a RewardProgram enters the EXPIRED
	// state.
	ExpirationOffset uint64 `protobuf:"varint,20,opt,name=expiration_offset,json=expirationOffset,proto3" json:"expiration_offset,omitempty"`
	// Actions that count towards the reward.
	QualifyingActions []QualifyingAction `protobuf:"bytes,21,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *RewardProgram) Reset()      { *m = RewardProgram{} }
func (*RewardProgram) ProtoMessage() {}
func (*RewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0}
}
func (m *RewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgram.Merge(m, src)
}
func (m *RewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgram proto.InternalMessageInfo

func (m *RewardProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardProgram) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RewardProgram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *RewardProgram) GetTotalRewardPool() types.Coin {
	if m != nil {
		return m.TotalRewardPool
	}
	return types.Coin{}
}

func (m *RewardProgram) GetRemainingPoolBalance() types.Coin {
	if m != nil {
		return m.RemainingPoolBalance
	}
	return types.Coin{}
}

func (m *RewardProgram) GetClaimedAmount() types.Coin {
	if m != nil {
		return m.ClaimedAmount
	}
	return types.Coin{}
}

func (m *RewardProgram) GetMaxRewardByAddress() types.Coin {
	if m != nil {
		return m.MaxRewardByAddress
	}
	return types.Coin{}
}

func (m *RewardProgram) GetMinimumRolloverAmount() types.Coin {
	if m != nil {
		return m.MinimumRolloverAmount
	}
	return types.Coin{}
}

func (m *RewardProgram) GetClaimPeriodSeconds() uint64 {
	if m != nil {
		return m.ClaimPeriodSeconds
	}
	return 0
}

func (m *RewardProgram) GetProgramStartTime() time.Time {
	if m != nil {
		return m.ProgramStartTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetExpectedProgramEndTime() time.Time {
	if m != nil {
		return m.ExpectedProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetProgramEndTimeMax() time.Time {
	if m != nil {
		return m.ProgramEndTimeMax
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriodEndTime() time.Time {
	if m != nil {
		return m.ClaimPeriodEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetActualProgramEndTime() time.Time {
	if m != nil {
		return m.ActualProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriods() uint64 {
	if m != nil {
		return m.ClaimPeriods
	}
	return 0
}

func (m *RewardProgram) GetCurrentClaimPeriod() uint64 {
	if m != nil {
		return m.CurrentClaimPeriod
	}
	return 0
}

func (m *RewardProgram) GetMaxRolloverClaimPeriods() uint64 {
	if m != nil {
		return m.MaxRolloverClaimPeriods
	}
	return 0
}

func (m *RewardProgram) GetState() RewardProgram_State {
	if m != nil {
		return m.State
	}
	return RewardProgram_STATE_UNSPECIFIED
}

func (m *RewardProgram) GetExpirationOffset() uint64 {
	if m != nil {
		return m.ExpirationOffset
	}
	return 0
}

func (m *RewardProgram) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// EventSetRewardProgram event emitted when a reward program is is updated
type EventSetRewardProgram struct {
	// An integer to uniquely identify the reward program.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name to help identify the Reward Program.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Short summary describing the Reward Program.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Community pool for now (who provides the money).
	DistributeFromAddress string `protobuf:"bytes,4,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	// The total amount of funding given to the RewardProgram.
	TotalRewardPool string `protobuf:"bytes,5,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool,omitempty"`
	// Maximum reward per claim per address.
	MaxRewardByAddress string `protobuf:"bytes,6,opt,name=max_reward_by_address,json=maxRewardByAddress,proto3" json:"max_reward_by_address,omitempty"`
	// Minimum amount of coins for a program to rollover.
	MinimumRolloverAmount string `protobuf:"bytes,7,opt,name=minimum_rollover_amount,json=minimumRolloverAmount,proto3" json:"minimum_rollover_amount,omitempty"`
	// Number of seconds that a claim period lasts.
	ClaimPeriodSeconds uint64 `protobuf:"varint,8,opt,name=claim_period_seconds,json=claimPeriodSeconds,proto3" json:"claim_period_seconds,omitempty"`
	// Time that a RewardProgram should start and switch to STARTED state.
	ProgramStartTime string `protobuf:"bytes,9,opt,name=program_start_time,json=programStartTime,proto3" json:"program_start_time,omitempty"`
	// Time that a RewardProgram MUST end.
	ExpectedProgramEndTime string `protobuf:"bytes,10,opt,name=expected_program_end_time,json=expectedProgramEndTime,proto3" json:"expected_program_end_time,omitempty"`
	// Used internally to calculate and track the current claim period's ending time.
	ClaimPeriodEndTime string `protobuf:"bytes,11,opt,name=claim_period_end_time,json=claimPeriodEndTime,proto3" json:"claim_period_end_time,omitempty"`
	// Number of claim periods this program will run for.
	ClaimPeriods string `protobuf:"bytes,12,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	// Current state of the RewardProgram.
	State string `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	// Grace period after a RewardProgram FINISHED. It is the number of seconds until a RewardProgram enters the EXPIRED
	// state.
	ExpirationOffset string `protobuf:"bytes,14,opt,name=expiration_offset,json=expirationOffset,proto3" json:"expiration_offset,omitempty"`
	// Actions that count towards the reward
	QualifyingActions string `protobuf:"bytes,15,opt,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions,omitempty"`
}

func (m *EventSetRewardProgram) Reset()         { *m = EventSetRewardProgram{} }
func (m *EventSetRewardProgram) String() string { return proto.CompactTextString(m) }
func (*EventSetRewardProgram) ProtoMessage()    {}
func (*EventSetRewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{1}
}
func (m *EventSetRewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetRewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetRewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetRewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetRewardProgram.Merge(m, src)
}
func (m *EventSetRewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *EventSetRewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetRewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetRewardProgram proto.InternalMessageInfo

func (m *EventSetRewardProgram) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventSetRewardProgram) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventSetRewardProgram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EventSetRewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *EventSetRewardProgram) GetTotalRewardPool() string {
	if m != nil {
		return m.TotalRewardPool
	}
	return ""
}

func (m *EventSetRewardProgram) GetMaxRewardByAddress() string {
	if m != nil {
		return m.MaxRewardByAddress
	}
	return ""
}

func (m *EventSetRewardProgram) GetMinimumRolloverAmount() string {
	if m != nil {
		return m.MinimumRolloverAmount
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriodSeconds() uint64 {
	if m != nil {
		return m.ClaimPeriodSeconds
	}
	return 0
}

func (m *EventSetRewardProgram) GetProgramStartTime() string {
	if m != nil {
		return m.ProgramStartTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetExpectedProgramEndTime() string {
	if m != nil {
		return m.ExpectedProgramEndTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriodEndTime() string {
	if m != nil {
		return m.ClaimPeriodEndTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriods() string {
	if m != nil {
		return m.ClaimPeriods
	}
	return ""
}

func (m *EventSetRewardProgram) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EventSetRewardProgram) GetExpirationOffset() string {
	if m != nil {
		return m.ExpirationOffset
	}
	return ""
}

func (m *EventSetRewardProgram) GetQualifyingActions() string {
	if m != nil {
		return m.QualifyingActions
	}
	return ""
}

// ClaimPeriodRewardDistribution, this will updated at the end of every claim period.
type ClaimPeriodRewardDistribution struct {
	// The id of the claim period that this reward belongs to.
	ClaimPeriodId uint64 `protobuf:"varint,1,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	// The id of the reward program that this reward belongs to.
	RewardProgramId uint64 `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	// The sum of all the granted rewards for this claim period.
	TotalRewardsPoolForClaimPeriod types.Coin `protobuf:"bytes,3,opt,name=total_rewards_pool_for_claim_period,json=totalRewardsPoolForClaimPeriod,proto3" json:"total_rewards_pool_for_claim_period" yaml:"total_rewards_pool"`
	// The allocated rewards for this claim period.
	RewardsPool types.Coin `protobuf:"bytes,4,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool" yaml:"rewards_pool"`
	// The total number of granted shares for this claim period.
	TotalShares int64 `protobuf:"varint,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// A flag representing if the claim period for this reward has ended.
	ClaimPeriodEnded bool `protobuf:"varint,6,opt,name=claim_period_ended,json=claimPeriodEnded,proto3" json:"claim_period_ended,omitempty"`
}

func (m *ClaimPeriodRewardDistribution) Reset()      { *m = ClaimPeriodRewardDistribution{} }
func (*ClaimPeriodRewardDistribution) ProtoMessage() {}
func (*ClaimPeriodRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{2}
}
func (m *ClaimPeriodRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPeriodRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPeriodRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPeriodRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPeriodRewardDistribution.Merge(m, src)
}
func (m *ClaimPeriodRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPeriodRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPeriodRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPeriodRewardDistribution proto.InternalMessageInfo

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetTotalRewardsPoolForClaimPeriod() types.Coin {
	if m != nil {
		return m.TotalRewardsPoolForClaimPeriod
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetRewardsPool() types.Coin {
	if m != nil {
		return m.RewardsPool
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodEnded() bool {
	if m != nil {
		return m.ClaimPeriodEnded
	}
	return false
}

// RewardAccountState contains state at the claim period level for a specific address.
type RewardAccountState struct {
	// The id of the reward program that this share belongs to.
	RewardProgramId uint64 `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	// The id of the claim period that the share belongs to.
	ClaimPeriodId uint64 `protobuf:"varint,2,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	// Owner of the reward account state.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	// The number of actions done by this account.
	ActionCounter map[string]uint64 `protobuf:"bytes,4,rep,name=action_counter,json=actionCounter,proto3" json:"action_counter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The amount of granted shares for the address in the reward program's claim period.
	SharesEarned uint64 `protobuf:"varint,5,opt,name=shares_earned,json=sharesEarned,proto3" json:"shares_earned,omitempty"`
	// The status of the claim.
	ClaimStatus RewardAccountState_ClaimStatus `protobuf:"varint,6,opt,name=claim_status,json=claimStatus,proto3,enum=provenance.reward.v1.RewardAccountState_ClaimStatus" json:"claim_status,omitempty"`
}

func (m *RewardAccountState) Reset()      { *m = RewardAccountState{} }
func (*RewardAccountState) ProtoMessage() {}
func (*RewardAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3}
}
func (m *RewardAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAccountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAccountState.Merge(m, src)
}
func (m *RewardAccountState) XXX_Size() int {
	return m.Size()
}
func (m *RewardAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAccountState proto.InternalMessageInfo

func (m *RewardAccountState) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardAccountState) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *RewardAccountState) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardAccountState) GetActionCounter() map[string]uint64 {
	if m != nil {
		return m.ActionCounter
	}
	return nil
}

func (m *RewardAccountState) GetSharesEarned() uint64 {
	if m != nil {
		return m.SharesEarned
	}
	return 0
}

func (m *RewardAccountState) GetClaimStatus() RewardAccountState_ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return RewardAccountState_CLAIM_STATUS_UNSPECIFIED
}

// QualifyingAction can be one of many action types.
type QualifyingAction struct {
	// type of action to process
	//
	// Types that are valid to be assigned to Type:
	//	*QualifyingAction_Delegate
	//	*QualifyingAction_Transfer
	//	*QualifyingAction_Vote
	Type isQualifyingAction_Type `protobuf_oneof:"type"`
}

func (m *QualifyingAction) Reset()         { *m = QualifyingAction{} }
func (m *QualifyingAction) String() string { return proto.CompactTextString(m) }
func (*QualifyingAction) ProtoMessage()    {}
func (*QualifyingAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{4}
}
func (m *QualifyingAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualifyingAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualifyingAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualifyingAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyingAction.Merge(m, src)
}
func (m *QualifyingAction) XXX_Size() int {
	return m.Size()
}
func (m *QualifyingAction) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyingAction.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyingAction proto.InternalMessageInfo

type isQualifyingAction_Type interface {
	isQualifyingAction_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QualifyingAction_Delegate struct {
	Delegate *ActionDelegate `protobuf:"bytes,1,opt,name=delegate,proto3,oneof" json:"delegate,omitempty"`
}
type QualifyingAction_Transfer struct {
	Transfer *ActionTransfer `protobuf:"bytes,2,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}
type QualifyingAction_Vote struct {
	Vote *ActionVote `protobuf:"bytes,3,opt,name=vote,proto3,oneof" json:"vote,omitempty"`
}

func (*QualifyingAction_Delegate) isQualifyingAction_Type() {}
func (*QualifyingAction_Transfer) isQualifyingAction_Type() {}
func (*QualifyingAction_Vote) isQualifyingAction_Type()     {}

func (m *QualifyingAction) GetType() isQualifyingAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *QualifyingAction) GetDelegate() *ActionDelegate {
	if x, ok := m.GetType().(*QualifyingAction_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (m *QualifyingAction) GetTransfer() *ActionTransfer {
	if x, ok := m.GetType().(*QualifyingAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *QualifyingAction) GetVote() *ActionVote {
	if x, ok := m.GetType().(*QualifyingAction_Vote); ok {
		return x.Vote
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QualifyingAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QualifyingAction_Delegate)(nil),
		(*QualifyingAction_Transfer)(nil),
		(*QualifyingAction_Vote)(nil),
	}
}

// QualifyingActions contains a list of QualifyingActions.
type QualifyingActions struct {
	// The actions that count towards the reward.
	QualifyingActions []QualifyingAction `protobuf:"bytes,1,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *QualifyingActions) Reset()         { *m = QualifyingActions{} }
func (m *QualifyingActions) String() string { return proto.CompactTextString(m) }
func (*QualifyingActions) ProtoMessage()    {}
func (*QualifyingActions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{5}
}
func (m *QualifyingActions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualifyingActions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualifyingActions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualifyingActions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyingActions.Merge(m, src)
}
func (m *QualifyingActions) XXX_Size() int {
	return m.Size()
}
func (m *QualifyingActions) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyingActions.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyingActions proto.InternalMessageInfo

func (m *QualifyingActions) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// ActionDelegate represents the delegate action and its required eligibility criteria.
type ActionDelegate struct {
	// Minimum number of successful delegates.
	MinimumActions uint64 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	// Maximum number of successful delegates.
	MaximumActions uint64 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	// Minimum amount that the user must have currently delegated on the validator.
	MinimumDelegationAmount *types.Coin `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount,omitempty"`
	// Maximum amount that the user must have currently delegated on the validator.
	MaximumDelegationAmount *types.Coin `protobuf:"bytes,4,opt,name=maximum_delegation_amount,json=maximumDelegationAmount,proto3" json:"maximum_delegation_amount,omitempty"`
	// Minimum percentile that can be below the validator's power ranking.
	MinimumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=minimum_active_stake_percentile,json=minimumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_active_stake_percentile"`
	// Maximum percentile that can be below the validator's power ranking.
	MaximumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=maximum_active_stake_percentile,json=maximumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_active_stake_percentile"`
}

func (m *ActionDelegate) Reset()      { *m = ActionDelegate{} }
func (*ActionDelegate) ProtoMessage() {}
func (*ActionDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{6}
}
func (m *ActionDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDelegate.Merge(m, src)
}
func (m *ActionDelegate) XXX_Size() int {
	return m.Size()
}
func (m *ActionDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDelegate proto.InternalMessageInfo

func (m *ActionDelegate) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionDelegate) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionDelegate) GetMinimumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return nil
}

func (m *ActionDelegate) GetMaximumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MaximumDelegationAmount
	}
	return nil
}

// ActionTransfer represents the transfer action and its required eligibility criteria.
type ActionTransfer struct {
	// Minimum number of successful delegates.
	MinimumActions uint64 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	// Maximum number of successful delegates.
	MaximumActions uint64 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	// Minimum delegation amount the account must have across all validators.
	MinimumDelegationAmount types.Coin `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount" yaml:"minimum_delegation_amount"`
}

func (m *ActionTransfer) Reset()      { *m = ActionTransfer{} }
func (*ActionTransfer) ProtoMessage() {}
func (*ActionTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{7}
}
func (m *ActionTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionTransfer.Merge(m, src)
}
func (m *ActionTransfer) XXX_Size() int {
	return m.Size()
}
func (m *ActionTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_ActionTransfer proto.InternalMessageInfo

func (m *ActionTransfer) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionTransfer) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionTransfer) GetMinimumDelegationAmount() types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return types.Coin{}
}

// ActionTransfer represents the voting action and its required eligibility criteria.
type ActionVote struct {
	// Minimum number of successful delegates.
	MinimumActions uint64 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	// Maximum number of successful delegates.
	MaximumActions uint64 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	// Minimum delegation amount the account must have across all validators.
	MinimumDelegationAmount types.Coin `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount" yaml:"minimum_delegation_amount"`
}

func (m *ActionVote) Reset()      { *m = ActionVote{} }
func (*ActionVote) ProtoMessage() {}
func (*ActionVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{8}
}
func (m *ActionVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionVote.Merge(m, src)
}
func (m *ActionVote) XXX_Size() int {
	return m.Size()
}
func (m *ActionVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionVote.DiscardUnknown(m)
}

var xxx_messageInfo_ActionVote proto.InternalMessageInfo

func (m *ActionVote) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionVote) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionVote) GetMinimumDelegationAmount() types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("provenance.reward.v1.RewardProgram_State", RewardProgram_State_name, RewardProgram_State_value)
	proto.RegisterEnum("provenance.reward.v1.RewardAccountState_ClaimStatus", RewardAccountState_ClaimStatus_name, RewardAccountState_ClaimStatus_value)
	proto.RegisterType((*RewardProgram)(nil), "provenance.reward.v1.RewardProgram")
	proto.RegisterType((*EventSetRewardProgram)(nil), "provenance.reward.v1.EventSetRewardProgram")
	proto.RegisterType((*ClaimPeriodRewardDistribution)(nil), "provenance.reward.v1.ClaimPeriodRewardDistribution")
	proto.RegisterType((*RewardAccountState)(nil), "provenance.reward.v1.RewardAccountState")
	proto.RegisterMapType((map[string]uint64)(nil), "provenance.reward.v1.RewardAccountState.ActionCounterEntry")
	proto.RegisterType((*QualifyingAction)(nil), "provenance.reward.v1.QualifyingAction")
	proto.RegisterType((*QualifyingActions)(nil), "provenance.reward.v1.QualifyingActions")
	proto.RegisterType((*ActionDelegate)(nil), "provenance.reward.v1.ActionDelegate")
	proto.RegisterType((*ActionTransfer)(nil), "provenance.reward.v1.ActionTransfer")
	proto.RegisterType((*ActionVote)(nil), "provenance.reward.v1.ActionVote")
}

func init() { proto.RegisterFile("provenance/reward/v1/reward.proto", fileDescriptor_0c3894741a216575) }

var fileDescriptor_0c3894741a216575 = []byte{
	// 1696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xd7, 0x52, 0x94, 0x2c, 0x0d, 0x45, 0x8a, 0x1c, 0x53, 0xd6, 0x4a, 0x75, 0x49, 0x9a, 0x6a,
	0x55, 0xd5, 0xb5, 0x97, 0x95, 0x5a, 0x18, 0xad, 0x7d, 0x68, 0x49, 0x91, 0xaa, 0x89, 0xda, 0xb2,
	0xba, 0x94, 0xea, 0xb6, 0x40, 0xb1, 0x58, 0x72, 0x87, 0xf4, 0x42, 0xdc, 0x1d, 0x7a, 0x77, 0x48,
	0x93, 0xa7, 0x5e, 0x7a, 0x68, 0x81, 0x1c, 0x0c, 0xe4, 0x62, 0xdf, 0x7c, 0xc8, 0x47, 0x48, 0xbe,
	0x83, 0x8f, 0x3e, 0x06, 0x39, 0x28, 0x86, 0x9d, 0x43, 0x12, 0x20, 0x17, 0x7f, 0x82, 0x60, 0xfe,
	0x2c, 0xb9, 0x4b, 0x2e, 0x45, 0x25, 0x81, 0x11, 0x20, 0x27, 0xed, 0xce, 0xfb, 0xf7, 0x7b, 0x6f,
	0x7e, 0xef, 0xbd, 0x15, 0xc1, 0xb5, 0x8e, 0x83, 0x7b, 0xc8, 0xd6, 0xed, 0x06, 0x2a, 0x38, 0xe8,
	0x89, 0xee, 0x18, 0x85, 0xde, 0xae, 0x78, 0x52, 0x3a, 0x0e, 0x26, 0x18, 0xa6, 0x47, 0x2a, 0x8a,
	0x10, 0xf4, 0x76, 0x37, 0xd3, 0x2d, 0xdc, 0xc2, 0x4c, 0xa1, 0x40, 0x9f, 0xb8, 0xee, 0x66, 0xb6,
	0x85, 0x71, 0xab, 0x8d, 0x0a, 0xec, 0xad, 0xde, 0x6d, 0x16, 0x88, 0x69, 0x21, 0x97, 0xe8, 0x56,
	0x47, 0x28, 0x64, 0x1a, 0xd8, 0xb5, 0xb0, 0x5b, 0xa8, 0xeb, 0x2e, 0x2a, 0xf4, 0x76, 0xeb, 0x88,
	0xe8, 0xbb, 0x85, 0x06, 0x36, 0x6d, 0x2e, 0xcf, 0xff, 0x77, 0x15, 0xc4, 0x55, 0x16, 0xe4, 0xc8,
	0xc1, 0x2d, 0x47, 0xb7, 0x60, 0x02, 0x44, 0x4c, 0x43, 0x96, 0x72, 0xd2, 0x4e, 0x54, 0x8d, 0x98,
	0x06, 0x4c, 0x83, 0x05, 0x62, 0x92, 0x36, 0x92, 0x23, 0x39, 0x69, 0x67, 0x59, 0xe5, 0x2f, 0x30,
	0x07, 0x62, 0x06, 0x72, 0x1b, 0x8e, 0xd9, 0x21, 0x26, 0xb6, 0xe5, 0x79, 0x26, 0xf3, 0x1f, 0xc1,
	0x5b, 0x60, 0xdd, 0x30, 0x5d, 0xe2, 0x98, 0xf5, 0x2e, 0x41, 0x5a, 0xd3, 0xc1, 0x96, 0xa6, 0x1b,
	0x86, 0x83, 0x5c, 0x57, 0x8e, 0x32, 0xed, 0xb5, 0x91, 0xf8, 0xc0, 0xc1, 0x56, 0x91, 0x0b, 0xe1,
	0x5f, 0x41, 0x8a, 0x60, 0xa2, 0xb7, 0x35, 0x9e, 0xbb, 0xd6, 0xc1, 0xb8, 0x2d, 0x2f, 0xe4, 0xa4,
	0x9d, 0xd8, 0xde, 0x86, 0xc2, 0xb3, 0x51, 0x68, 0x36, 0x8a, 0xc8, 0x46, 0xd9, 0xc7, 0xa6, 0x5d,
	0x8a, 0xbe, 0x3c, 0xcb, 0xce, 0xa9, 0xab, 0xcc, 0x52, 0xe4, 0x83, 0x71, 0x1b, 0x9e, 0x80, 0x2b,
	0x0e, 0xb2, 0x74, 0xd3, 0x36, 0xed, 0x16, 0xf3, 0xa4, 0xd5, 0xf5, 0x36, 0xad, 0xac, 0xbc, 0x78,
	0x31, 0x8f, 0xe9, 0xa1, 0x39, 0xf5, 0x57, 0xe2, 0xc6, 0xf0, 0x00, 0x24, 0x1a, 0x6d, 0xdd, 0xb4,
	0x90, 0xa1, 0xe9, 0x16, 0xee, 0xda, 0x44, 0xbe, 0x74, 0x31, 0x77, 0x71, 0x61, 0x56, 0x64, 0x56,
	0x50, 0x05, 0x6b, 0x96, 0xde, 0xf7, 0x32, 0xad, 0x0f, 0x86, 0x15, 0x5a, 0xba, 0x98, 0x3b, 0x68,
	0xe9, 0x7d, 0x9e, 0x6d, 0x69, 0xe0, 0xd5, 0xef, 0x21, 0x58, 0xb7, 0x4c, 0xdb, 0xb4, 0xba, 0x96,
	0xe6, 0xe0, 0x76, 0x1b, 0xf7, 0x90, 0xe3, 0x81, 0x5c, 0xbe, 0x98, 0xd7, 0x35, 0x61, 0xaf, 0x0a,
	0x73, 0x01, 0xf6, 0xb7, 0x20, 0xcd, 0xd0, 0x6b, 0x1d, 0xe4, 0x98, 0xd8, 0xd0, 0x5c, 0xd4, 0xc0,
	0xb6, 0xe1, 0xca, 0x80, 0x51, 0x05, 0x32, 0xd9, 0x11, 0x13, 0xd5, 0xb8, 0x04, 0x3e, 0x97, 0x00,
	0xec, 0x70, 0x5a, 0x69, 0x2e, 0xd1, 0x1d, 0xa2, 0x51, 0x7a, 0xca, 0x31, 0x06, 0x63, 0x53, 0xe1,
	0xdc, 0x55, 0x3c, 0xee, 0x2a, 0xc7, 0x1e, 0x77, 0x4b, 0x0f, 0x28, 0x8e, 0xaf, 0xcf, 0xb2, 0x57,
	0x27, 0xad, 0x6f, 0x60, 0xcb, 0x24, 0xc8, 0xea, 0x90, 0xc1, 0xbb, 0xb3, 0xec, 0xd6, 0x40, 0xb7,
	0xda, 0xb7, 0xf3, 0xe7, 0x69, 0xe5, 0x9f, 0x7e, 0x9e, 0x95, 0xd4, 0xa4, 0x50, 0xa9, 0x51, 0x0d,
	0x1a, 0x07, 0x7e, 0x2c, 0x81, 0x0d, 0xd4, 0xef, 0xa0, 0x06, 0x41, 0x86, 0xe6, 0x39, 0x40, 0xb6,
	0xc1, 0x21, 0xae, 0xcc, 0x84, 0xf8, 0x6f, 0x01, 0x71, 0x6b, 0xaa, 0x93, 0x00, 0xd2, 0xeb, 0x1c,
	0xe9, 0x05, 0x94, 0x39, 0xe0, 0x2b, 0x9e, 0xa6, 0x68, 0xcb, 0x8a, 0x6d, 0x30, 0xd8, 0x2f, 0x24,
	0x90, 0x1e, 0xb7, 0xd5, 0x2c, 0xbd, 0x2f, 0xc7, 0x67, 0x22, 0xae, 0x09, 0xc4, 0x99, 0x30, 0xfb,
	0x00, 0xd8, 0x5f, 0x06, 0xcb, 0x1a, 0xae, 0xc7, 0x71, 0xa6, 0x3a, 0x01, 0x7c, 0xf7, 0xf5, 0x3e,
	0xfc, 0x48, 0x02, 0x6b, 0x01, 0xa2, 0x0c, 0xab, 0x9a, 0x98, 0x89, 0xf1, 0x44, 0x60, 0xcc, 0x86,
	0x3a, 0x08, 0x80, 0xdc, 0xe6, 0x20, 0x67, 0x28, 0x72, 0x94, 0x7e, 0x72, 0x7a, 0x95, 0x7c, 0x26,
	0x81, 0x75, 0xbd, 0x41, 0xba, 0x7a, 0x7b, 0xf2, 0xfa, 0x57, 0x67, 0x02, 0xad, 0x08, 0xa0, 0xeb,
	0x4d, 0xd3, 0x36, 0xdd, 0x47, 0x28, 0x04, 0x60, 0x86, 0x03, 0x9c, 0xa2, 0xc0, 0x81, 0xa5, 0x39,
	0x82, 0xb1, 0x4b, 0xde, 0x02, 0x71, 0x7f, 0x5a, 0xae, 0x9c, 0x64, 0x2d, 0xb6, 0xe2, 0xcb, 0xc2,
	0x65, 0xed, 0xd8, 0x75, 0x1c, 0x64, 0x13, 0xcd, 0xaf, 0x2c, 0xa7, 0x44, 0x3b, 0x72, 0xd9, 0xfe,
	0xc8, 0x04, 0xde, 0x01, 0x9b, 0x6c, 0xda, 0x78, 0x53, 0x21, 0x18, 0x03, 0x32, 0xbb, 0x75, 0x3a,
	0x51, 0x84, 0xc2, 0xbe, 0x3f, 0xdc, 0x9f, 0xc0, 0x82, 0x4b, 0x74, 0x82, 0xe4, 0xcb, 0x39, 0x69,
	0x27, 0xb1, 0xf7, 0x6b, 0x25, 0x6c, 0x4b, 0x29, 0x81, 0x55, 0xa2, 0xd4, 0xa8, 0x81, 0xca, 0xed,
	0xe0, 0x6f, 0x40, 0x0a, 0xf5, 0x3b, 0xa6, 0xa3, 0xd3, 0xed, 0xa0, 0xe1, 0x66, 0xd3, 0x45, 0x44,
	0x4e, 0xb3, 0xa0, 0xc9, 0x91, 0xe0, 0x01, 0x3b, 0x87, 0x4f, 0x00, 0x7c, 0xdc, 0xd5, 0xdb, 0x66,
	0x73, 0x40, 0x07, 0xb7, 0xde, 0xa0, 0x22, 0x57, 0x5e, 0xcb, 0xcd, 0xef, 0xc4, 0xf6, 0xb6, 0xc3,
	0x43, 0xff, 0x6d, 0xa8, 0x5f, 0x64, 0xea, 0xa5, 0x1c, 0xbd, 0xa2, 0x77, 0x67, 0x59, 0x99, 0xdf,
	0xc3, 0xa4, 0x3f, 0x35, 0xf5, 0x78, 0xcc, 0xc6, 0xcd, 0x9f, 0x82, 0x05, 0x86, 0x1a, 0xae, 0x81,
	0x54, 0xed, 0xb8, 0x78, 0x5c, 0xd1, 0x4e, 0x0e, 0x6b, 0x47, 0x95, 0xfd, 0xea, 0x41, 0xb5, 0x52,
	0x4e, 0xce, 0xc1, 0x14, 0x88, 0xf3, 0xe3, 0xa3, 0xca, 0x61, 0xb9, 0x7a, 0xf8, 0x97, 0xa4, 0x34,
	0x3a, 0xaa, 0x1d, 0x17, 0xd5, 0xe3, 0x4a, 0x39, 0x19, 0x81, 0x10, 0x24, 0xf8, 0xd1, 0x41, 0xf5,
	0xb0, 0x5a, 0xbb, 0x5b, 0x29, 0x27, 0xe7, 0x47, 0x6a, 0x95, 0x7f, 0x1c, 0x55, 0xd5, 0x4a, 0x39,
	0x19, 0xbd, 0xbd, 0xf4, 0xec, 0x45, 0x76, 0xee, 0xcb, 0x17, 0x59, 0x29, 0xff, 0xe1, 0x02, 0x58,
	0xab, 0xf4, 0x90, 0x4d, 0x6a, 0x88, 0x4c, 0x5b, 0xc7, 0xcb, 0x3f, 0xca, 0x3a, 0xbe, 0x3e, 0x6d,
	0x1d, 0x2f, 0x4f, 0x6e, 0xdb, 0xdd, 0x69, 0xeb, 0x6c, 0x91, 0xe9, 0x87, 0x6d, 0xab, 0x5b, 0xd3,
	0xb7, 0xd5, 0x25, 0x0e, 0xeb, 0xbb, 0x2d, 0xa3, 0xa5, 0xa9, 0xcb, 0xe8, 0x46, 0xe8, 0x2e, 0x5a,
	0x66, 0x41, 0x26, 0xd7, 0xc3, 0x1f, 0xcf, 0xdb, 0x0e, 0x80, 0x19, 0x4d, 0x1b, 0xd1, 0xbb, 0xd3,
	0xc6, 0x5f, 0x8c, 0x57, 0x21, 0x64, 0x16, 0x4d, 0x34, 0xfc, 0x0a, 0x53, 0x0d, 0x36, 0x7c, 0xda,
	0xeb, 0xc0, 0x38, 0xbf, 0xf9, 0x73, 0xda, 0x2a, 0xc1, 0xb3, 0x9a, 0x68, 0xab, 0x9b, 0xa1, 0x6d,
	0xb5, 0xca, 0xb4, 0x43, 0x9a, 0xe1, 0x93, 0x79, 0xf0, 0x73, 0xdf, 0x10, 0xe0, 0x77, 0x57, 0xf6,
	0x68, 0x42, 0x59, 0xb5, 0x0d, 0x56, 0x03, 0xb9, 0x0e, 0xbf, 0x1c, 0xe3, 0x3e, 0xe8, 0x55, 0x83,
	0xb2, 0xc8, 0xe3, 0x8f, 0x28, 0xa6, 0x69, 0x30, 0x06, 0x47, 0xd5, 0x55, 0xc7, 0xcf, 0xf7, 0xaa,
	0x01, 0xff, 0x2f, 0x81, 0x2d, 0x3f, 0xe5, 0x5c, 0xfe, 0xe1, 0xd6, 0xc4, 0xc1, 0x89, 0xc5, 0x48,
	0x7e, 0xee, 0xd7, 0xcc, 0x35, 0x31, 0x00, 0x36, 0xf8, 0x00, 0x98, 0xf4, 0x99, 0x57, 0x33, 0x3e,
	0x0a, 0xbb, 0x94, 0xc3, 0x07, 0xd8, 0x3f, 0xf6, 0xe0, 0x3f, 0xc1, 0x8a, 0xdf, 0x80, 0xb5, 0xca,
	0xb9, 0x31, 0x7f, 0x26, 0x62, 0x5e, 0xe6, 0x31, 0x83, 0xd1, 0x62, 0xce, 0x28, 0x10, 0xbc, 0x06,
	0x56, 0x38, 0x22, 0xf7, 0x91, 0xee, 0x20, 0x97, 0xf5, 0xd4, 0xbc, 0x1a, 0x63, 0x67, 0x35, 0x76,
	0x44, 0x29, 0x3b, 0xce, 0x24, 0x64, 0xb0, 0x66, 0x5a, 0x52, 0x93, 0x41, 0x1a, 0x21, 0xc3, 0x37,
	0x4d, 0x5e, 0x47, 0x01, 0xe4, 0x39, 0x15, 0x1b, 0x0d, 0xda, 0x2e, 0x7c, 0xa4, 0x85, 0x5e, 0x82,
	0x14, 0x7e, 0x09, 0x21, 0x17, 0x1b, 0x09, 0xbb, 0xd8, 0x1b, 0xe0, 0x92, 0xd7, 0xe4, 0x6c, 0xe8,
	0x94, 0xe0, 0xbb, 0xb3, 0x6c, 0x82, 0x27, 0x2f, 0x04, 0x79, 0xd5, 0x53, 0x81, 0x75, 0x90, 0xe0,
	0xa4, 0xd3, 0x18, 0x2c, 0xe4, 0xc8, 0x51, 0x36, 0xd2, 0xef, 0x9c, 0xb7, 0x4d, 0xfc, 0x39, 0x28,
	0x9c, 0x9a, 0xfb, 0xdc, 0xba, 0x62, 0x13, 0x67, 0xa0, 0xc6, 0x75, 0xff, 0x19, 0xed, 0x25, 0x5e,
	0x51, 0x0d, 0xe9, 0x8e, 0x8d, 0x0c, 0x56, 0xd8, 0xa8, 0xba, 0xc2, 0x0f, 0x2b, 0xec, 0x0c, 0x3e,
	0x04, 0xbc, 0xb7, 0xe8, 0x28, 0x20, 0x5d, 0x3e, 0xa0, 0x12, 0x7b, 0xbf, 0xbf, 0x30, 0x0c, 0xc6,
	0x91, 0x1a, 0xb3, 0x55, 0x63, 0x8d, 0xd1, 0xcb, 0xe6, 0x9f, 0x01, 0x9c, 0x84, 0x08, 0x93, 0x60,
	0xfe, 0x14, 0x0d, 0xc4, 0x14, 0xa7, 0x8f, 0xb4, 0x99, 0x7b, 0x7a, 0xbb, 0x8b, 0x44, 0x55, 0xf9,
	0xcb, 0xed, 0xc8, 0x1f, 0xa4, 0xfc, 0x73, 0x09, 0xc4, 0x7c, 0xee, 0xe1, 0x55, 0x20, 0xef, 0xdf,
	0x2b, 0x56, 0xef, 0xd3, 0xf5, 0x72, 0x7c, 0x52, 0x1b, 0xdb, 0x47, 0x93, 0x52, 0xf6, 0x5a, 0x2c,
	0xdd, 0xab, 0x24, 0x25, 0xb8, 0x09, 0xae, 0x04, 0xa4, 0x23, 0x59, 0x04, 0xca, 0x20, 0x3d, 0x29,
	0x63, 0x9b, 0x6a, 0x5c, 0x12, 0xb6, 0xb0, 0xbe, 0x90, 0x40, 0x72, 0x7c, 0xe3, 0xc2, 0x12, 0x58,
	0x32, 0x50, 0x1b, 0xb5, 0xe8, 0x90, 0x92, 0x58, 0xa7, 0xfc, 0x22, 0xbc, 0xa2, 0x5c, 0xbf, 0x2c,
	0x74, 0xef, 0xce, 0xa9, 0x43, 0x3b, 0xea, 0x83, 0x38, 0xba, 0xed, 0x36, 0x91, 0xc3, 0x6a, 0x33,
	0xc3, 0xc7, 0xb1, 0xd0, 0xa5, 0x3e, 0x3c, 0x3b, 0x78, 0x0b, 0x44, 0x7b, 0x98, 0x20, 0x31, 0x21,
	0x72, 0xe7, 0xd9, 0xff, 0x1d, 0xb3, 0xf8, 0x4c, 0x9f, 0xa5, 0x27, 0xd1, 0xf4, 0x4a, 0x8b, 0x20,
	0x4a, 0x06, 0x1d, 0x94, 0xff, 0x40, 0x02, 0xa9, 0xf1, 0x34, 0xdd, 0x29, 0x5f, 0x27, 0xd2, 0xfb,
	0xff, 0x3a, 0xf9, 0x5f, 0x14, 0x24, 0x82, 0xb5, 0x83, 0xbf, 0x02, 0xab, 0xde, 0x02, 0x1d, 0x01,
	0xa1, 0x94, 0x4a, 0x88, 0x63, 0x0f, 0x34, 0x55, 0xd4, 0xfb, 0x01, 0xc5, 0x88, 0x50, 0xe4, 0xc7,
	0x9e, 0xe2, 0x09, 0xd8, 0xf0, 0x3c, 0x8a, 0x5b, 0xa1, 0x0d, 0x2b, 0x96, 0xf2, 0xac, 0xa1, 0xab,
	0x7a, 0xeb, 0xbc, 0x3c, 0x34, 0x15, 0x1b, 0x9b, 0xba, 0x15, 0xf1, 0x27, 0xdd, 0x46, 0x67, 0xbb,
	0xe5, 0xb6, 0x13, 0x6e, 0xbb, 0x20, 0xeb, 0xcf, 0xbf, 0x87, 0x68, 0x4b, 0x9f, 0x22, 0x3a, 0xb7,
	0x1a, 0xc8, 0x26, 0x66, 0x1b, 0xf1, 0xaf, 0x95, 0x92, 0x42, 0x0b, 0xfe, 0xd9, 0x59, 0x76, 0xbb,
	0x65, 0x92, 0x47, 0xdd, 0xba, 0xd2, 0xc0, 0x56, 0x41, 0xfc, 0x38, 0xc2, 0xff, 0xdc, 0x74, 0x8d,
	0xd3, 0x02, 0xbd, 0x75, 0x57, 0x29, 0xa3, 0x86, 0x7a, 0xd5, 0x57, 0xbf, 0x1e, 0xaa, 0x51, 0xa7,
	0x47, 0x43, 0x9f, 0x2c, 0xac, 0xaf, 0x9a, 0x61, 0x61, 0x17, 0xbf, 0x67, 0xd8, 0xd1, 0x6d, 0x4c,
	0x84, 0xf5, 0x35, 0xe0, 0x37, 0x92, 0x47, 0x05, 0xaf, 0x05, 0xde, 0x03, 0x15, 0xfe, 0xf3, 0x43,
	0xa8, 0x50, 0xda, 0x11, 0x14, 0xcf, 0x71, 0x8a, 0x4f, 0xf5, 0x94, 0x9f, 0x4a, 0x1a, 0x5f, 0xbe,
	0x5f, 0x49, 0x00, 0x8c, 0x5a, 0xf6, 0x27, 0x9d, 0x6b, 0xa9, 0xf5, 0xf2, 0x4d, 0x46, 0x7a, 0xf5,
	0x26, 0x23, 0xbd, 0x7e, 0x93, 0x91, 0x9e, 0xbe, 0xcd, 0xcc, 0xbd, 0x7a, 0x9b, 0x99, 0xfb, 0xf4,
	0x6d, 0x66, 0x0e, 0xac, 0x9b, 0x38, 0x74, 0xbe, 0x1c, 0x49, 0xff, 0xda, 0xf3, 0x11, 0x6c, 0xa4,
	0x72, 0xd3, 0xc4, 0xbe, 0xb7, 0x42, 0xdf, 0xfb, 0xd1, 0x91, 0x11, 0xae, 0xbe, 0xc8, 0xfe, 0xb3,
	0xfd, 0xdd, 0xb7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x6f, 0xed, 0x33, 0x96, 0x14, 0x00, 0x00,
}

func (this *RewardProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgram)
	if !ok {
		that2, ok := that.(RewardProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DistributeFromAddress != that1.DistributeFromAddress {
		return false
	}
	if !this.TotalRewardPool.Equal(&that1.TotalRewardPool) {
		return false
	}
	if !this.RemainingPoolBalance.Equal(&that1.RemainingPoolBalance) {
		return false
	}
	if !this.ClaimedAmount.Equal(&that1.ClaimedAmount) {
		return false
	}
	if !this.MaxRewardByAddress.Equal(&that1.MaxRewardByAddress) {
		return false
	}
	if !this.MinimumRolloverAmount.Equal(&that1.MinimumRolloverAmount) {
		return false
	}
	if this.ClaimPeriodSeconds != that1.ClaimPeriodSeconds {
		return false
	}
	if !this.ProgramStartTime.Equal(that1.ProgramStartTime) {
		return false
	}
	if !this.ExpectedProgramEndTime.Equal(that1.ExpectedProgramEndTime) {
		return false
	}
	if !this.ProgramEndTimeMax.Equal(that1.ProgramEndTimeMax) {
		return false
	}
	if !this.ClaimPeriodEndTime.Equal(that1.ClaimPeriodEndTime) {
		return false
	}
	if !this.ActualProgramEndTime.Equal(that1.ActualProgramEndTime) {
		return false
	}
	if this.ClaimPeriods != that1.ClaimPeriods {
		return false
	}
	if this.CurrentClaimPeriod != that1.CurrentClaimPeriod {
		return false
	}
	if this.MaxRolloverClaimPeriods != that1.MaxRolloverClaimPeriods {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.ExpirationOffset != that1.ExpirationOffset {
		return false
	}
	if len(this.QualifyingActions) != len(that1.QualifyingActions) {
		return false
	}
	for i := range this.QualifyingActions {
		if !this.QualifyingActions[i].Equal(&that1.QualifyingActions[i]) {
			return false
		}
	}
	return true
}
func (this *ClaimPeriodRewardDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimPeriodRewardDistribution)
	if !ok {
		that2, ok := that.(ClaimPeriodRewardDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardsPoolForClaimPeriod.Equal(&that1.TotalRewardsPoolForClaimPeriod) {
		return false
	}
	if !this.RewardsPool.Equal(&that1.RewardsPool) {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if this.ClaimPeriodEnded != that1.ClaimPeriodEnded {
		return false
	}
	return true
}
func (this *RewardAccountState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardAccountState)
	if !ok {
		that2, ok := that.(RewardAccountState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.ActionCounter) != len(that1.ActionCounter) {
		return false
	}
	for i := range this.ActionCounter {
		if this.ActionCounter[i] != that1.ActionCounter[i] {
			return false
		}
	}
	if this.SharesEarned != that1.SharesEarned {
		return false
	}
	if this.ClaimStatus != that1.ClaimStatus {
		return false
	}
	return true
}
func (this *QualifyingAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction)
	if !ok {
		that2, ok := that.(QualifyingAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *QualifyingAction_Delegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Delegate)
	if !ok {
		that2, ok := that.(QualifyingAction_Delegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delegate.Equal(that1.Delegate) {
		return false
	}
	return true
}
func (this *QualifyingAction_Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Transfer)
	if !ok {
		that2, ok := that.(QualifyingAction_Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transfer.Equal(that1.Transfer) {
		return false
	}
	return true
}
func (this *QualifyingAction_Vote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Vote)
	if !ok {
		that2, ok := that.(QualifyingAction_Vote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vote.Equal(that1.Vote) {
		return false
	}
	return true
}
func (this *ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionDelegate)
	if !ok {
		that2, ok := that.(ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(that1.MinimumDelegationAmount) {
		return false
	}
	if !this.MaximumDelegationAmount.Equal(that1.MaximumDelegationAmount) {
		return false
	}
	if !this.MinimumActiveStakePercentile.Equal(that1.MinimumActiveStakePercentile) {
		return false
	}
	if !this.MaximumActiveStakePercentile.Equal(that1.MaximumActiveStakePercentile) {
		return false
	}
	return true
}
func (this *ActionTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionTransfer)
	if !ok {
		that2, ok := that.(ActionTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(&that1.MinimumDelegationAmount) {
		return false
	}
	return true
}
func (this *ActionVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionVote)
	if !ok {
		that2, ok := that.(ActionVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(&that1.MinimumDelegationAmount) {
		return false
	}
	return true
}
func (m *RewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.ExpirationOffset != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ExpirationOffset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.State != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MaxRolloverClaimPeriods != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaxRolloverClaimPeriods))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CurrentClaimPeriod != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.CurrentClaimPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ClaimPeriods != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriods))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ActualProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintReward(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x7a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClaimPeriodEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintReward(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x72
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramEndTimeMax, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramEndTimeMax):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintReward(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x6a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpectedProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintReward(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x62
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintReward(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x5a
	if m.ClaimPeriodSeconds != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodSeconds))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.MinimumRolloverAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.MaxRewardByAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ClaimedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.RemainingPoolBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalRewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSetRewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetRewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetRewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		i -= len(m.QualifyingActions)
		copy(dAtA[i:], m.QualifyingActions)
		i = encodeVarintReward(dAtA, i, uint64(len(m.QualifyingActions)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ExpirationOffset) > 0 {
		i -= len(m.ExpirationOffset)
		copy(dAtA[i:], m.ExpirationOffset)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ExpirationOffset)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintReward(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ClaimPeriods) > 0 {
		i -= len(m.ClaimPeriods)
		copy(dAtA[i:], m.ClaimPeriods)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ClaimPeriods)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ClaimPeriodEndTime) > 0 {
		i -= len(m.ClaimPeriodEndTime)
		copy(dAtA[i:], m.ClaimPeriodEndTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ClaimPeriodEndTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ExpectedProgramEndTime) > 0 {
		i -= len(m.ExpectedProgramEndTime)
		copy(dAtA[i:], m.ExpectedProgramEndTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ExpectedProgramEndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProgramStartTime) > 0 {
		i -= len(m.ProgramStartTime)
		copy(dAtA[i:], m.ProgramStartTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ProgramStartTime)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ClaimPeriodSeconds != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodSeconds))
		i--
		dAtA[i] = 0x40
	}
	if len(m.MinimumRolloverAmount) > 0 {
		i -= len(m.MinimumRolloverAmount)
		copy(dAtA[i:], m.MinimumRolloverAmount)
		i = encodeVarintReward(dAtA, i, uint64(len(m.MinimumRolloverAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxRewardByAddress) > 0 {
		i -= len(m.MaxRewardByAddress)
		copy(dAtA[i:], m.MaxRewardByAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.MaxRewardByAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalRewardPool) > 0 {
		i -= len(m.TotalRewardPool)
		copy(dAtA[i:], m.TotalRewardPool)
		i = encodeVarintReward(dAtA, i, uint64(len(m.TotalRewardPool)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPeriodRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPeriodRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPeriodRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimPeriodEnded {
		i--
		if m.ClaimPeriodEnded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.RewardsPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TotalRewardsPoolForClaimPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimStatus != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.SharesEarned != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.SharesEarned))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActionCounter) > 0 {
		for k := range m.ActionCounter {
			v := m.ActionCounter[k]
			baseI := i
			i = encodeVarintReward(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReward(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReward(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualifyingAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Delegate != nil {
		{
			size, err := m.Delegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingAction_Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingAction_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingActions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualifyingActions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingActions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaximumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MaximumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinimumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MinimumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaximumDelegationAmount != nil {
		{
			size, err := m.MaximumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinimumDelegationAmount != nil {
		{
			size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReward(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.TotalRewardPool.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.RemainingPoolBalance.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaxRewardByAddress.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MinimumRolloverAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriodSeconds != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodSeconds))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramEndTimeMax)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriods != 0 {
		n += 2 + sovReward(uint64(m.ClaimPeriods))
	}
	if m.CurrentClaimPeriod != 0 {
		n += 2 + sovReward(uint64(m.CurrentClaimPeriod))
	}
	if m.MaxRolloverClaimPeriods != 0 {
		n += 2 + sovReward(uint64(m.MaxRolloverClaimPeriods))
	}
	if m.State != 0 {
		n += 2 + sovReward(uint64(m.State))
	}
	if m.ExpirationOffset != 0 {
		n += 2 + sovReward(uint64(m.ExpirationOffset))
	}
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 2 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *EventSetRewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.TotalRewardPool)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.MaxRewardByAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.MinimumRolloverAmount)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.ClaimPeriodSeconds != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodSeconds))
	}
	l = len(m.ProgramStartTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ExpectedProgramEndTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ClaimPeriodEndTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ClaimPeriods)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ExpirationOffset)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.QualifyingActions)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *ClaimPeriodRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimPeriodId != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodId))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardsPoolForClaimPeriod.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.RewardsPool.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	if m.ClaimPeriodEnded {
		n += 2
	}
	return n
}

func (m *RewardAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.ClaimPeriodId != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if len(m.ActionCounter) > 0 {
		for k, v := range m.ActionCounter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReward(uint64(len(k))) + 1 + sovReward(uint64(v))
			n += mapEntrySize + 1 + sovReward(uint64(mapEntrySize))
		}
	}
	if m.SharesEarned != 0 {
		n += 1 + sovReward(uint64(m.SharesEarned))
	}
	if m.ClaimStatus != 0 {
		n += 1 + sovReward(uint64(m.ClaimStatus))
	}
	return n
}

func (m *QualifyingAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *QualifyingAction_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate != nil {
		l = m.Delegate.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingAction_Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingAction_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingActions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 1 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	if m.MinimumDelegationAmount != nil {
		l = m.MinimumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	if m.MaximumDelegationAmount != nil {
		l = m.MaximumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.MinimumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaximumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	l = m.MinimumDelegationAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	l = m.MinimumDelegationAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingPoolBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingPoolBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRewardByAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRolloverAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumRolloverAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodSeconds", wireType)
			}
			m.ClaimPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpectedProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramEndTimeMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramEndTimeMax, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClaimPeriodEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ActualProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			m.ClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentClaimPeriod", wireType)
			}
			m.CurrentClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRolloverClaimPeriods", wireType)
			}
			m.MaxRolloverClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRolloverClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RewardProgram_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationOffset", wireType)
			}
			m.ExpirationOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetRewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetRewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetRewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRewardPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardByAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRewardByAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRolloverAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumRolloverAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodSeconds", wireType)
			}
			m.ClaimPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProgramEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedProgramEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriodEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriods = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPeriodRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardsPoolForClaimPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardsPoolForClaimPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEnded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimPeriodEnded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionCounter == nil {
				m.ActionCounter = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReward
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReward
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReward
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReward(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthReward
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActionCounter[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesEarned", wireType)
			}
			m.SharesEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharesEarned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= RewardAccountState_ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualifyingAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualifyingAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualifyingAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Delegate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Transfer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Vote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualifyingActions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualifyingActions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualifyingActions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumDelegationAmount == nil {
				m.MinimumDelegationAmount = &types.Coin{}
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaximumDelegationAmount == nil {
				m.MaximumDelegationAmount = &types.Coin{}
			}
			if err := m.MaximumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
