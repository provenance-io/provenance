// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/reward.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardProgram_State int32

const (
	RewardProgram_PENDING  RewardProgram_State = 0
	RewardProgram_STARTED  RewardProgram_State = 1
	RewardProgram_FINISHED RewardProgram_State = 2
	RewardProgram_EXPIRED  RewardProgram_State = 3
)

var RewardProgram_State_name = map[int32]string{
	0: "PENDING",
	1: "STARTED",
	2: "FINISHED",
	3: "EXPIRED",
}

var RewardProgram_State_value = map[string]int32{
	"PENDING":  0,
	"STARTED":  1,
	"FINISHED": 2,
	"EXPIRED":  3,
}

func (x RewardProgram_State) String() string {
	return proto.EnumName(RewardProgram_State_name, int32(x))
}

func (RewardProgram_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0, 0}
}

type RewardAccountState_ClaimStatus int32

const (
	RewardAccountState_UNCLAIMABLE RewardAccountState_ClaimStatus = 0
	RewardAccountState_CLAIMABLE   RewardAccountState_ClaimStatus = 1
	RewardAccountState_CLAIMED     RewardAccountState_ClaimStatus = 2
	RewardAccountState_EXPIRED     RewardAccountState_ClaimStatus = 3
)

var RewardAccountState_ClaimStatus_name = map[int32]string{
	0: "UNCLAIMABLE",
	1: "CLAIMABLE",
	2: "CLAIMED",
	3: "EXPIRED",
}

var RewardAccountState_ClaimStatus_value = map[string]int32{
	"UNCLAIMABLE": 0,
	"CLAIMABLE":   1,
	"CLAIMED":     2,
	"EXPIRED":     3,
}

func (x RewardAccountState_ClaimStatus) String() string {
	return proto.EnumName(RewardAccountState_ClaimStatus_name, int32(x))
}

func (RewardAccountState_ClaimStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3, 0}
}

// RewardProgram
type RewardProgram struct {
	Id                      uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                   string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description             string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DistributeFromAddress   string              `protobuf:"bytes,4,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	TotalRewardPool         types.Coin          `protobuf:"bytes,5,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool"`
	RemainingPoolBalance    types.Coin          `protobuf:"bytes,6,opt,name=remaining_pool_balance,json=remainingPoolBalance,proto3" json:"remaining_pool_balance"`
	ClaimedAmount           types.Coin          `protobuf:"bytes,7,opt,name=claimed_amount,json=claimedAmount,proto3" json:"claimed_amount"`
	MaxRewardByAddress      types.Coin          `protobuf:"bytes,8,opt,name=max_reward_by_address,json=maxRewardByAddress,proto3" json:"max_reward_by_address"`
	MinimumRolloverAmount   types.Coin          `protobuf:"bytes,9,opt,name=minimum_rollover_amount,json=minimumRolloverAmount,proto3" json:"minimum_rollover_amount"`
	ClaimPeriodSeconds      uint64              `protobuf:"varint,10,opt,name=claim_period_seconds,json=claimPeriodSeconds,proto3" json:"claim_period_seconds,omitempty"`
	ProgramStartTime        time.Time           `protobuf:"bytes,11,opt,name=program_start_time,json=programStartTime,proto3,stdtime" json:"program_start_time,omitempty" yaml:"program_start_time,omitempty"`
	ExpectedProgramEndTime  time.Time           `protobuf:"bytes,12,opt,name=expected_program_end_time,json=expectedProgramEndTime,proto3,stdtime" json:"expected_program_end_time,omitempty" yaml:"expected_program_end_time,omitempty"`
	ProgramEndTimeMax       time.Time           `protobuf:"bytes,13,opt,name=program_end_time_max,json=programEndTimeMax,proto3,stdtime" json:"program_end_time_max,omitempty" yaml:"program_end_time_max,omitempty"`
	ClaimPeriodEndTime      time.Time           `protobuf:"bytes,14,opt,name=claim_period_end_time,json=claimPeriodEndTime,proto3,stdtime" json:"claim_period_end_time,omitempty" yaml:"claim_period_end_time,omitempty"`
	ActualProgramEndTime    time.Time           `protobuf:"bytes,15,opt,name=actual_program_end_time,json=actualProgramEndTime,proto3,stdtime" json:"finished_time,omitempty" yaml:"finished_time,omitempty"`
	ClaimPeriods            uint64              `protobuf:"varint,16,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	CurrentClaimPeriod      uint64              `protobuf:"varint,17,opt,name=current_claim_period,json=currentClaimPeriod,proto3" json:"current_claim_period,omitempty"`
	MaxRolloverClaimPeriods uint64              `protobuf:"varint,18,opt,name=max_rollover_claim_periods,json=maxRolloverClaimPeriods,proto3" json:"max_rollover_claim_periods,omitempty"`
	State                   RewardProgram_State `protobuf:"varint,19,opt,name=state,proto3,enum=provenance.reward.v1.RewardProgram_State" json:"state,omitempty"`
	ExpirationOffset        uint64              `protobuf:"varint,20,opt,name=expiration_offset,json=expirationOffset,proto3" json:"expiration_offset,omitempty"`
	QualifyingActions       []QualifyingAction  `protobuf:"bytes,21,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *RewardProgram) Reset()      { *m = RewardProgram{} }
func (*RewardProgram) ProtoMessage() {}
func (*RewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{0}
}
func (m *RewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardProgram.Merge(m, src)
}
func (m *RewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *RewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_RewardProgram proto.InternalMessageInfo

func (m *RewardProgram) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RewardProgram) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RewardProgram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *RewardProgram) GetTotalRewardPool() types.Coin {
	if m != nil {
		return m.TotalRewardPool
	}
	return types.Coin{}
}

func (m *RewardProgram) GetRemainingPoolBalance() types.Coin {
	if m != nil {
		return m.RemainingPoolBalance
	}
	return types.Coin{}
}

func (m *RewardProgram) GetClaimedAmount() types.Coin {
	if m != nil {
		return m.ClaimedAmount
	}
	return types.Coin{}
}

func (m *RewardProgram) GetMaxRewardByAddress() types.Coin {
	if m != nil {
		return m.MaxRewardByAddress
	}
	return types.Coin{}
}

func (m *RewardProgram) GetMinimumRolloverAmount() types.Coin {
	if m != nil {
		return m.MinimumRolloverAmount
	}
	return types.Coin{}
}

func (m *RewardProgram) GetClaimPeriodSeconds() uint64 {
	if m != nil {
		return m.ClaimPeriodSeconds
	}
	return 0
}

func (m *RewardProgram) GetProgramStartTime() time.Time {
	if m != nil {
		return m.ProgramStartTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetExpectedProgramEndTime() time.Time {
	if m != nil {
		return m.ExpectedProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetProgramEndTimeMax() time.Time {
	if m != nil {
		return m.ProgramEndTimeMax
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriodEndTime() time.Time {
	if m != nil {
		return m.ClaimPeriodEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetActualProgramEndTime() time.Time {
	if m != nil {
		return m.ActualProgramEndTime
	}
	return time.Time{}
}

func (m *RewardProgram) GetClaimPeriods() uint64 {
	if m != nil {
		return m.ClaimPeriods
	}
	return 0
}

func (m *RewardProgram) GetCurrentClaimPeriod() uint64 {
	if m != nil {
		return m.CurrentClaimPeriod
	}
	return 0
}

func (m *RewardProgram) GetMaxRolloverClaimPeriods() uint64 {
	if m != nil {
		return m.MaxRolloverClaimPeriods
	}
	return 0
}

func (m *RewardProgram) GetState() RewardProgram_State {
	if m != nil {
		return m.State
	}
	return RewardProgram_PENDING
}

func (m *RewardProgram) GetExpirationOffset() uint64 {
	if m != nil {
		return m.ExpirationOffset
	}
	return 0
}

func (m *RewardProgram) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// EventSetRewardProgram event emitted when a reward program is is updated
type EventSetRewardProgram struct {
	Id                     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description            string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DistributeFromAddress  string `protobuf:"bytes,4,opt,name=distribute_from_address,json=distributeFromAddress,proto3" json:"distribute_from_address,omitempty"`
	TotalRewardPool        string `protobuf:"bytes,5,opt,name=total_reward_pool,json=totalRewardPool,proto3" json:"total_reward_pool,omitempty"`
	MaxRewardByAddress     string `protobuf:"bytes,6,opt,name=max_reward_by_address,json=maxRewardByAddress,proto3" json:"max_reward_by_address,omitempty"`
	MinimumRolloverAmount  string `protobuf:"bytes,7,opt,name=minimum_rollover_amount,json=minimumRolloverAmount,proto3" json:"minimum_rollover_amount,omitempty"`
	ClaimPeriodSeconds     uint64 `protobuf:"varint,8,opt,name=claim_period_seconds,json=claimPeriodSeconds,proto3" json:"claim_period_seconds,omitempty"`
	ProgramStartTime       string `protobuf:"bytes,9,opt,name=program_start_time,json=programStartTime,proto3" json:"program_start_time,omitempty"`
	ExpectedProgramEndTime string `protobuf:"bytes,10,opt,name=expected_program_end_time,json=expectedProgramEndTime,proto3" json:"expected_program_end_time,omitempty"`
	ClaimPeriodEndTime     string `protobuf:"bytes,11,opt,name=claim_period_end_time,json=claimPeriodEndTime,proto3" json:"claim_period_end_time,omitempty"`
	ClaimPeriods           string `protobuf:"bytes,12,opt,name=claim_periods,json=claimPeriods,proto3" json:"claim_periods,omitempty"`
	State                  string `protobuf:"bytes,13,opt,name=state,proto3" json:"state,omitempty"`
	ExpirationOffset       string `protobuf:"bytes,14,opt,name=expiration_offset,json=expirationOffset,proto3" json:"expiration_offset,omitempty"`
	QualifyingActions      string `protobuf:"bytes,15,opt,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions,omitempty"`
}

func (m *EventSetRewardProgram) Reset()         { *m = EventSetRewardProgram{} }
func (m *EventSetRewardProgram) String() string { return proto.CompactTextString(m) }
func (*EventSetRewardProgram) ProtoMessage()    {}
func (*EventSetRewardProgram) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{1}
}
func (m *EventSetRewardProgram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetRewardProgram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetRewardProgram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetRewardProgram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetRewardProgram.Merge(m, src)
}
func (m *EventSetRewardProgram) XXX_Size() int {
	return m.Size()
}
func (m *EventSetRewardProgram) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetRewardProgram.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetRewardProgram proto.InternalMessageInfo

func (m *EventSetRewardProgram) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventSetRewardProgram) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventSetRewardProgram) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *EventSetRewardProgram) GetDistributeFromAddress() string {
	if m != nil {
		return m.DistributeFromAddress
	}
	return ""
}

func (m *EventSetRewardProgram) GetTotalRewardPool() string {
	if m != nil {
		return m.TotalRewardPool
	}
	return ""
}

func (m *EventSetRewardProgram) GetMaxRewardByAddress() string {
	if m != nil {
		return m.MaxRewardByAddress
	}
	return ""
}

func (m *EventSetRewardProgram) GetMinimumRolloverAmount() string {
	if m != nil {
		return m.MinimumRolloverAmount
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriodSeconds() uint64 {
	if m != nil {
		return m.ClaimPeriodSeconds
	}
	return 0
}

func (m *EventSetRewardProgram) GetProgramStartTime() string {
	if m != nil {
		return m.ProgramStartTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetExpectedProgramEndTime() string {
	if m != nil {
		return m.ExpectedProgramEndTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriodEndTime() string {
	if m != nil {
		return m.ClaimPeriodEndTime
	}
	return ""
}

func (m *EventSetRewardProgram) GetClaimPeriods() string {
	if m != nil {
		return m.ClaimPeriods
	}
	return ""
}

func (m *EventSetRewardProgram) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *EventSetRewardProgram) GetExpirationOffset() string {
	if m != nil {
		return m.ExpirationOffset
	}
	return ""
}

func (m *EventSetRewardProgram) GetQualifyingActions() string {
	if m != nil {
		return m.QualifyingActions
	}
	return ""
}

// ClaimPeriodRewardDistribution, this will updated at the end of every claim period
// Reward Program Id + Claim Period Id
type ClaimPeriodRewardDistribution struct {
	ClaimPeriodId                  uint64     `protobuf:"varint,1,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	RewardProgramId                uint64     `protobuf:"varint,2,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	TotalRewardsPoolForClaimPeriod types.Coin `protobuf:"bytes,3,opt,name=total_rewards_pool_for_claim_period,json=totalRewardsPoolForClaimPeriod,proto3" json:"total_rewards_pool_for_claim_period" yaml:"total_rewards_pool"`
	RewardsPool                    types.Coin `protobuf:"bytes,4,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool" yaml:"rewards_pool"`
	TotalShares                    int64      `protobuf:"varint,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	ClaimPeriodEnded               bool       `protobuf:"varint,6,opt,name=claim_period_ended,json=claimPeriodEnded,proto3" json:"claim_period_ended,omitempty"`
}

func (m *ClaimPeriodRewardDistribution) Reset()      { *m = ClaimPeriodRewardDistribution{} }
func (*ClaimPeriodRewardDistribution) ProtoMessage() {}
func (*ClaimPeriodRewardDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{2}
}
func (m *ClaimPeriodRewardDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimPeriodRewardDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimPeriodRewardDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimPeriodRewardDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimPeriodRewardDistribution.Merge(m, src)
}
func (m *ClaimPeriodRewardDistribution) XXX_Size() int {
	return m.Size()
}
func (m *ClaimPeriodRewardDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimPeriodRewardDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimPeriodRewardDistribution proto.InternalMessageInfo

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetTotalRewardsPoolForClaimPeriod() types.Coin {
	if m != nil {
		return m.TotalRewardsPoolForClaimPeriod
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetRewardsPool() types.Coin {
	if m != nil {
		return m.RewardsPool
	}
	return types.Coin{}
}

func (m *ClaimPeriodRewardDistribution) GetTotalShares() int64 {
	if m != nil {
		return m.TotalShares
	}
	return 0
}

func (m *ClaimPeriodRewardDistribution) GetClaimPeriodEnded() bool {
	if m != nil {
		return m.ClaimPeriodEnded
	}
	return false
}

type RewardAccountState struct {
	RewardProgramId uint64                         `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	ClaimPeriodId   uint64                         `protobuf:"varint,2,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
	Address         string                         `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	ActionCounter   map[string]uint64              `protobuf:"bytes,4,rep,name=action_counter,json=actionCounter,proto3" json:"action_counter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SharesEarned    uint64                         `protobuf:"varint,5,opt,name=shares_earned,json=sharesEarned,proto3" json:"shares_earned,omitempty"`
	ClaimStatus     RewardAccountState_ClaimStatus `protobuf:"varint,6,opt,name=claim_status,json=claimStatus,proto3,enum=provenance.reward.v1.RewardAccountState_ClaimStatus" json:"claim_status,omitempty"`
}

func (m *RewardAccountState) Reset()      { *m = RewardAccountState{} }
func (*RewardAccountState) ProtoMessage() {}
func (*RewardAccountState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{3}
}
func (m *RewardAccountState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAccountState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAccountState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAccountState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAccountState.Merge(m, src)
}
func (m *RewardAccountState) XXX_Size() int {
	return m.Size()
}
func (m *RewardAccountState) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAccountState.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAccountState proto.InternalMessageInfo

func (m *RewardAccountState) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardAccountState) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

func (m *RewardAccountState) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RewardAccountState) GetActionCounter() map[string]uint64 {
	if m != nil {
		return m.ActionCounter
	}
	return nil
}

func (m *RewardAccountState) GetSharesEarned() uint64 {
	if m != nil {
		return m.SharesEarned
	}
	return 0
}

func (m *RewardAccountState) GetClaimStatus() RewardAccountState_ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return RewardAccountState_UNCLAIMABLE
}

type QualifyingAction struct {
	// Types that are valid to be assigned to Type:
	//	*QualifyingAction_Delegate
	//	*QualifyingAction_Transfer
	//	*QualifyingAction_Vote
	Type isQualifyingAction_Type `protobuf_oneof:"type"`
}

func (m *QualifyingAction) Reset()         { *m = QualifyingAction{} }
func (m *QualifyingAction) String() string { return proto.CompactTextString(m) }
func (*QualifyingAction) ProtoMessage()    {}
func (*QualifyingAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{4}
}
func (m *QualifyingAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualifyingAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualifyingAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualifyingAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyingAction.Merge(m, src)
}
func (m *QualifyingAction) XXX_Size() int {
	return m.Size()
}
func (m *QualifyingAction) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyingAction.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyingAction proto.InternalMessageInfo

type isQualifyingAction_Type interface {
	isQualifyingAction_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type QualifyingAction_Delegate struct {
	Delegate *ActionDelegate `protobuf:"bytes,1,opt,name=delegate,proto3,oneof" json:"delegate,omitempty"`
}
type QualifyingAction_Transfer struct {
	Transfer *ActionTransfer `protobuf:"bytes,2,opt,name=transfer,proto3,oneof" json:"transfer,omitempty"`
}
type QualifyingAction_Vote struct {
	Vote *ActionVote `protobuf:"bytes,3,opt,name=vote,proto3,oneof" json:"vote,omitempty"`
}

func (*QualifyingAction_Delegate) isQualifyingAction_Type() {}
func (*QualifyingAction_Transfer) isQualifyingAction_Type() {}
func (*QualifyingAction_Vote) isQualifyingAction_Type()     {}

func (m *QualifyingAction) GetType() isQualifyingAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *QualifyingAction) GetDelegate() *ActionDelegate {
	if x, ok := m.GetType().(*QualifyingAction_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (m *QualifyingAction) GetTransfer() *ActionTransfer {
	if x, ok := m.GetType().(*QualifyingAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (m *QualifyingAction) GetVote() *ActionVote {
	if x, ok := m.GetType().(*QualifyingAction_Vote); ok {
		return x.Vote
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QualifyingAction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QualifyingAction_Delegate)(nil),
		(*QualifyingAction_Transfer)(nil),
		(*QualifyingAction_Vote)(nil),
	}
}

type QualifyingActions struct {
	QualifyingActions []QualifyingAction `protobuf:"bytes,1,rep,name=qualifying_actions,json=qualifyingActions,proto3" json:"qualifying_actions" yaml:"qualifying_actions`
}

func (m *QualifyingActions) Reset()         { *m = QualifyingActions{} }
func (m *QualifyingActions) String() string { return proto.CompactTextString(m) }
func (*QualifyingActions) ProtoMessage()    {}
func (*QualifyingActions) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{5}
}
func (m *QualifyingActions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualifyingActions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualifyingActions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualifyingActions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualifyingActions.Merge(m, src)
}
func (m *QualifyingActions) XXX_Size() int {
	return m.Size()
}
func (m *QualifyingActions) XXX_DiscardUnknown() {
	xxx_messageInfo_QualifyingActions.DiscardUnknown(m)
}

var xxx_messageInfo_QualifyingActions proto.InternalMessageInfo

func (m *QualifyingActions) GetQualifyingActions() []QualifyingAction {
	if m != nil {
		return m.QualifyingActions
	}
	return nil
}

// ActionDelegate, accounts that have delegated in an epoch period.
// rule: ActionDelegate " when account delegates in epoch period,
// if above min and below max, increase shares earned for rewards pool by 1.
type ActionDelegate struct {
	MinimumActions               uint64                                 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	MaximumActions               uint64                                 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	MinimumDelegationAmount      *types.Coin                            `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount,omitempty"`
	MaximumDelegationAmount      *types.Coin                            `protobuf:"bytes,4,opt,name=maximum_delegation_amount,json=maximumDelegationAmount,proto3" json:"maximum_delegation_amount,omitempty"`
	MinimumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=minimum_active_stake_percentile,json=minimumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"minimum_active_stake_percentile"`
	MaximumActiveStakePercentile github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=maximum_active_stake_percentile,json=maximumActiveStakePercentile,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"maximum_active_stake_percentile"`
}

func (m *ActionDelegate) Reset()      { *m = ActionDelegate{} }
func (*ActionDelegate) ProtoMessage() {}
func (*ActionDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{6}
}
func (m *ActionDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionDelegate.Merge(m, src)
}
func (m *ActionDelegate) XXX_Size() int {
	return m.Size()
}
func (m *ActionDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_ActionDelegate proto.InternalMessageInfo

func (m *ActionDelegate) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionDelegate) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionDelegate) GetMinimumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return nil
}

func (m *ActionDelegate) GetMaximumDelegationAmount() *types.Coin {
	if m != nil {
		return m.MaximumDelegationAmount
	}
	return nil
}

// accounts that have made transfers, from accounts that have active delegations
// rule: ActionTransfer "When transfer has occurred and the account has an active delegation,
// give it a share of the rewards pool, assuming it has not gone over max value and is above a min value" {
type ActionTransfer struct {
	MinimumActions uint64 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	MaximumActions uint64 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	// minimum_delegation_amount when set to a coin amount greater than zero will only reward accounts with delegations
	// equal or greater than amount, if minimum_delegation_amount is zero then every send will be elegible for reward
	MinimumDelegationAmount types.Coin `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount" yaml:"minimum_delegation_amount"`
}

func (m *ActionTransfer) Reset()      { *m = ActionTransfer{} }
func (*ActionTransfer) ProtoMessage() {}
func (*ActionTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{7}
}
func (m *ActionTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionTransfer.Merge(m, src)
}
func (m *ActionTransfer) XXX_Size() int {
	return m.Size()
}
func (m *ActionTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_ActionTransfer proto.InternalMessageInfo

func (m *ActionTransfer) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionTransfer) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionTransfer) GetMinimumDelegationAmount() types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return types.Coin{}
}

// ActionVote reward, participants for voting on provenance gov proposals.
type ActionVote struct {
	MinimumActions uint64 `protobuf:"varint,1,opt,name=minimum_actions,json=minimumActions,proto3" json:"minimum_actions,omitempty"`
	MaximumActions uint64 `protobuf:"varint,2,opt,name=maximum_actions,json=maximumActions,proto3" json:"maximum_actions,omitempty"`
	// votes from only account that have delegations will be tallied hence this rule will enforce that .
	MinimumDelegationAmount types.Coin `protobuf:"bytes,3,opt,name=minimum_delegation_amount,json=minimumDelegationAmount,proto3" json:"minimum_delegation_amount" yaml:"minimum_delegation_amount"`
}

func (m *ActionVote) Reset()      { *m = ActionVote{} }
func (*ActionVote) ProtoMessage() {}
func (*ActionVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c3894741a216575, []int{8}
}
func (m *ActionVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionVote.Merge(m, src)
}
func (m *ActionVote) XXX_Size() int {
	return m.Size()
}
func (m *ActionVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionVote.DiscardUnknown(m)
}

var xxx_messageInfo_ActionVote proto.InternalMessageInfo

func (m *ActionVote) GetMinimumActions() uint64 {
	if m != nil {
		return m.MinimumActions
	}
	return 0
}

func (m *ActionVote) GetMaximumActions() uint64 {
	if m != nil {
		return m.MaximumActions
	}
	return 0
}

func (m *ActionVote) GetMinimumDelegationAmount() types.Coin {
	if m != nil {
		return m.MinimumDelegationAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("provenance.reward.v1.RewardProgram_State", RewardProgram_State_name, RewardProgram_State_value)
	proto.RegisterEnum("provenance.reward.v1.RewardAccountState_ClaimStatus", RewardAccountState_ClaimStatus_name, RewardAccountState_ClaimStatus_value)
	proto.RegisterType((*RewardProgram)(nil), "provenance.reward.v1.RewardProgram")
	proto.RegisterType((*EventSetRewardProgram)(nil), "provenance.reward.v1.EventSetRewardProgram")
	proto.RegisterType((*ClaimPeriodRewardDistribution)(nil), "provenance.reward.v1.ClaimPeriodRewardDistribution")
	proto.RegisterType((*RewardAccountState)(nil), "provenance.reward.v1.RewardAccountState")
	proto.RegisterMapType((map[string]uint64)(nil), "provenance.reward.v1.RewardAccountState.ActionCounterEntry")
	proto.RegisterType((*QualifyingAction)(nil), "provenance.reward.v1.QualifyingAction")
	proto.RegisterType((*QualifyingActions)(nil), "provenance.reward.v1.QualifyingActions")
	proto.RegisterType((*ActionDelegate)(nil), "provenance.reward.v1.ActionDelegate")
	proto.RegisterType((*ActionTransfer)(nil), "provenance.reward.v1.ActionTransfer")
	proto.RegisterType((*ActionVote)(nil), "provenance.reward.v1.ActionVote")
}

func init() { proto.RegisterFile("provenance/reward/v1/reward.proto", fileDescriptor_0c3894741a216575) }

var fileDescriptor_0c3894741a216575 = []byte{
	// 1665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0xf6, 0x26, 0xce, 0xd7, 0x38, 0x76, 0x9c, 0xa9, 0xd3, 0x6c, 0xf2, 0xf6, 0xb5, 0x5d, 0xe7,
	0x7d, 0x43, 0x28, 0xad, 0x4d, 0x02, 0xaa, 0xa0, 0x45, 0x82, 0x38, 0x76, 0xda, 0x88, 0x36, 0x0d,
	0xeb, 0x84, 0x02, 0x12, 0x5a, 0x8d, 0xbd, 0x63, 0x77, 0x55, 0xef, 0x8e, 0xbb, 0x3b, 0x76, 0xed,
	0x2b, 0x6e, 0x41, 0x02, 0xa9, 0x12, 0x37, 0xe5, 0xae, 0x17, 0xfc, 0x04, 0xf8, 0x0f, 0xbd, 0xec,
	0x0d, 0x12, 0xe2, 0x22, 0xa0, 0x96, 0x0b, 0x40, 0xe2, 0xa6, 0xbf, 0x00, 0xcd, 0xc7, 0xda, 0xeb,
	0x78, 0x6d, 0x07, 0x50, 0x85, 0xc4, 0x55, 0x3d, 0x33, 0xcf, 0x39, 0xe7, 0x39, 0x33, 0xcf, 0x39,
	0x67, 0x1b, 0x70, 0xbe, 0xe1, 0x90, 0x16, 0xb6, 0x91, 0x5d, 0xc1, 0x39, 0x07, 0xdf, 0x47, 0x8e,
	0x91, 0x6b, 0x6d, 0xca, 0x5f, 0xd9, 0x86, 0x43, 0x28, 0x81, 0x89, 0x1e, 0x24, 0x2b, 0x0f, 0x5a,
	0x9b, 0xab, 0x89, 0x1a, 0xa9, 0x11, 0x0e, 0xc8, 0xb1, 0x5f, 0x02, 0xbb, 0x9a, 0xaa, 0x11, 0x52,
	0xab, 0xe3, 0x1c, 0x5f, 0x95, 0x9b, 0xd5, 0x1c, 0x35, 0x2d, 0xec, 0x52, 0x64, 0x35, 0x24, 0x60,
	0xe5, 0x24, 0x00, 0xd9, 0x1d, 0x79, 0x94, 0xac, 0x10, 0xd7, 0x22, 0x6e, 0xae, 0x8c, 0x5c, 0x9c,
	0x6b, 0x6d, 0x96, 0x31, 0x45, 0x9b, 0xb9, 0x0a, 0x31, 0x6d, 0xcf, 0x54, 0x9c, 0xeb, 0x22, 0xa8,
	0x58, 0x88, 0xa3, 0xcc, 0x77, 0x31, 0x10, 0xd5, 0x38, 0xb5, 0x03, 0x87, 0xd4, 0x1c, 0x64, 0xc1,
	0x18, 0x98, 0x30, 0x0d, 0x55, 0x49, 0x2b, 0x1b, 0x61, 0x6d, 0xc2, 0x34, 0x60, 0x02, 0x4c, 0x51,
	0x93, 0xd6, 0xb1, 0x3a, 0x91, 0x56, 0x36, 0xe6, 0x34, 0xb1, 0x80, 0x69, 0x10, 0x31, 0xb0, 0x5b,
	0x71, 0xcc, 0x06, 0x35, 0x89, 0xad, 0x4e, 0xf2, 0x33, 0xff, 0x16, 0xbc, 0x0c, 0x96, 0x0d, 0xd3,
	0xa5, 0x8e, 0x59, 0x6e, 0x52, 0xac, 0x57, 0x1d, 0x62, 0xe9, 0xc8, 0x30, 0x1c, 0xec, 0xba, 0x6a,
	0x98, 0xa3, 0x97, 0x7a, 0xc7, 0xbb, 0x0e, 0xb1, 0xb6, 0xc5, 0x21, 0x7c, 0x17, 0x2c, 0x52, 0x42,
	0x51, 0x5d, 0x17, 0x37, 0xa6, 0x37, 0x08, 0xa9, 0xab, 0x53, 0x69, 0x65, 0x23, 0xb2, 0xb5, 0x92,
	0x95, 0xdc, 0x59, 0xa2, 0x59, 0x99, 0x68, 0x76, 0x87, 0x98, 0x76, 0x3e, 0xfc, 0xf8, 0x38, 0x15,
	0xd2, 0x16, 0xb8, 0xa5, 0xcc, 0x87, 0x90, 0x3a, 0x3c, 0x02, 0x67, 0x1d, 0x6c, 0x21, 0xd3, 0x36,
	0xed, 0x1a, 0xf7, 0xa4, 0x97, 0x51, 0x9d, 0xbd, 0x87, 0x3a, 0x7d, 0x3a, 0x8f, 0x89, 0xae, 0x39,
	0xf3, 0x97, 0x17, 0xc6, 0x70, 0x17, 0xc4, 0x2a, 0x75, 0x64, 0x5a, 0xd8, 0xd0, 0x91, 0x45, 0x9a,
	0x36, 0x55, 0x67, 0x4e, 0xe7, 0x2e, 0x2a, 0xcd, 0xb6, 0xb9, 0x15, 0xd4, 0xc0, 0x92, 0x85, 0xda,
	0x5e, 0xa6, 0xe5, 0x4e, 0xf7, 0x86, 0x66, 0x4f, 0xe7, 0x0e, 0x5a, 0xa8, 0x2d, 0xb2, 0xcd, 0x77,
	0xbc, 0xfb, 0xbb, 0x0d, 0x96, 0x2d, 0xd3, 0x36, 0xad, 0xa6, 0xa5, 0x3b, 0xa4, 0x5e, 0x27, 0x2d,
	0xec, 0x78, 0x24, 0xe7, 0x4e, 0xe7, 0x75, 0x49, 0xda, 0x6b, 0xd2, 0x5c, 0x92, 0x7d, 0x15, 0x24,
	0x38, 0x7b, 0xbd, 0x81, 0x1d, 0x93, 0x18, 0xba, 0x8b, 0x2b, 0xc4, 0x36, 0x5c, 0x15, 0x70, 0xa9,
	0x40, 0x7e, 0x76, 0xc0, 0x8f, 0x4a, 0xe2, 0x04, 0x7e, 0xa5, 0x00, 0xd8, 0x10, 0xb2, 0xd2, 0x5d,
	0x8a, 0x1c, 0xaa, 0x33, 0x51, 0xab, 0x11, 0x4e, 0x63, 0x35, 0x2b, 0x04, 0x9d, 0xf5, 0x04, 0x9d,
	0x3d, 0xf4, 0x14, 0x9f, 0xbf, 0xc5, 0x78, 0xfc, 0x76, 0x9c, 0x3a, 0x37, 0x68, 0x7d, 0x91, 0x58,
	0x26, 0xc5, 0x56, 0x83, 0x76, 0x9e, 0x1f, 0xa7, 0xd6, 0x3a, 0xc8, 0xaa, 0x5f, 0xc9, 0x8c, 0x42,
	0x65, 0x1e, 0xfc, 0x98, 0x52, 0xb4, 0xb8, 0x84, 0x94, 0x18, 0x82, 0xc5, 0x81, 0xdf, 0x28, 0x60,
	0x05, 0xb7, 0x1b, 0xb8, 0x42, 0xb1, 0xa1, 0x7b, 0x0e, 0xb0, 0x6d, 0x08, 0x8a, 0xf3, 0x63, 0x29,
	0x7e, 0x2c, 0x29, 0xae, 0x0d, 0x75, 0xd2, 0xc7, 0xf4, 0x82, 0x60, 0x7a, 0x0a, 0xb0, 0x20, 0x7c,
	0xd6, 0x43, 0xca, 0xb2, 0x2c, 0xda, 0x06, 0xa7, 0xfd, 0x48, 0x01, 0x89, 0x93, 0xb6, 0xba, 0x85,
	0xda, 0x6a, 0x74, 0x2c, 0xe3, 0x92, 0x64, 0x9c, 0x0c, 0xb2, 0xef, 0x23, 0xfb, 0xff, 0xfe, 0x6b,
	0x0d, 0xc6, 0x09, 0x9e, 0x8b, 0x8d, 0x3e, 0x7e, 0x37, 0x51, 0x1b, 0x7e, 0xad, 0x80, 0xa5, 0x3e,
	0xa1, 0x74, 0x6f, 0x35, 0x36, 0x96, 0xe3, 0x91, 0xe4, 0x98, 0x0a, 0x74, 0xd0, 0x47, 0x72, 0x5d,
	0x90, 0x1c, 0x03, 0x14, 0x2c, 0xfd, 0xe2, 0xf4, 0x6e, 0xf2, 0xa1, 0x02, 0x96, 0x51, 0x85, 0x36,
	0x51, 0x7d, 0xf0, 0xf9, 0x17, 0xc6, 0x12, 0x2d, 0x4a, 0xa2, 0xcb, 0x55, 0xd3, 0x36, 0xdd, 0x3b,
	0x38, 0x80, 0x60, 0x52, 0x10, 0x1c, 0x02, 0x10, 0xc4, 0x12, 0x82, 0xc1, 0x89, 0x47, 0x5e, 0x03,
	0x51, 0x7f, 0x5a, 0xae, 0x1a, 0xe7, 0x25, 0x36, 0xef, 0xcb, 0xc2, 0xe5, 0xe5, 0xd8, 0x74, 0x1c,
	0x6c, 0x53, 0xdd, 0x0f, 0x56, 0x17, 0x65, 0x39, 0x8a, 0xb3, 0x9d, 0x9e, 0x09, 0xbc, 0x0a, 0x56,
	0x79, 0xb7, 0xf1, 0xba, 0x42, 0x7f, 0x0c, 0xc8, 0xed, 0x96, 0x59, 0x47, 0x91, 0x80, 0x1d, 0x7f,
	0xb8, 0xb7, 0xc1, 0x94, 0x4b, 0x11, 0xc5, 0xea, 0x99, 0xb4, 0xb2, 0x11, 0xdb, 0x7a, 0x39, 0x1b,
	0x34, 0xdb, 0xb2, 0x7d, 0xa3, 0x24, 0x5b, 0x62, 0x06, 0x9a, 0xb0, 0x83, 0xaf, 0x80, 0x45, 0xdc,
	0x6e, 0x98, 0x0e, 0x62, 0xd3, 0x41, 0x27, 0xd5, 0xaa, 0x8b, 0xa9, 0x9a, 0xe0, 0x41, 0xe3, 0xbd,
	0x83, 0x5b, 0x7c, 0x1f, 0xde, 0x07, 0xf0, 0x5e, 0x13, 0xd5, 0xcd, 0x6a, 0x87, 0x35, 0x6e, 0x54,
	0x61, 0x47, 0xae, 0xba, 0x94, 0x9e, 0xdc, 0x88, 0x6c, 0xad, 0x07, 0x87, 0x7e, 0xaf, 0x8b, 0xdf,
	0xe6, 0xf0, 0x7c, 0x9a, 0x3d, 0xd1, 0xf3, 0xe3, 0x94, 0x2a, 0xde, 0x61, 0xd0, 0x9f, 0xb6, 0x78,
	0xef, 0x84, 0x8d, 0x9b, 0x79, 0x0b, 0x4c, 0x71, 0xd6, 0x30, 0x02, 0x66, 0x0e, 0x8a, 0xfb, 0x85,
	0xbd, 0xfd, 0x6b, 0xf1, 0x10, 0x5b, 0x94, 0x0e, 0xb7, 0xb5, 0xc3, 0x62, 0x21, 0xae, 0xc0, 0x79,
	0x30, 0xbb, 0xbb, 0xb7, 0xbf, 0x57, 0xba, 0x5e, 0x2c, 0xc4, 0x27, 0xd8, 0x51, 0xf1, 0x83, 0x83,
	0x3d, 0xad, 0x58, 0x88, 0x4f, 0x5e, 0x99, 0x7d, 0xf8, 0x28, 0x15, 0xfa, 0xe5, 0x51, 0x4a, 0xc9,
	0x7c, 0x39, 0x05, 0x96, 0x8a, 0x2d, 0x6c, 0xd3, 0x12, 0xa6, 0xc3, 0xe6, 0xeb, 0xdc, 0x3f, 0x32,
	0x5f, 0x2f, 0x0c, 0x9b, 0xaf, 0x73, 0x83, 0xe3, 0x73, 0x73, 0xd8, 0x7c, 0x9a, 0xe6, 0xf8, 0xa0,
	0xf1, 0x73, 0x79, 0xf8, 0xf8, 0x99, 0x11, 0xb4, 0xfe, 0xdc, 0x74, 0x99, 0x1d, 0x3a, 0x5d, 0x2e,
	0x06, 0x0e, 0x97, 0x39, 0x1e, 0x64, 0xb0, 0xdf, 0xbf, 0x39, 0xaa, 0xdd, 0x03, 0x6e, 0x34, 0xac,
	0xe7, 0x6e, 0x0e, 0xeb, 0x67, 0x11, 0x71, 0x0b, 0x01, 0xcd, 0x65, 0xa0, 0x82, 0xe7, 0x39, 0xb4,
	0xbf, 0x82, 0x13, 0x5e, 0x49, 0x45, 0xc5, 0xcb, 0x8f, 0xa8, 0x93, 0x98, 0xc8, 0x6a, 0xa0, 0x4e,
	0x2e, 0x05, 0xd6, 0xc9, 0x02, 0x47, 0x07, 0xa8, 0xfb, 0xdb, 0x49, 0xf0, 0x5f, 0x5f, 0x55, 0x8b,
	0xb7, 0x2b, 0x78, 0x32, 0x61, 0xaa, 0x5a, 0x07, 0x0b, 0x7d, 0xb9, 0x76, 0x3f, 0x05, 0xa3, 0x3e,
	0xea, 0x7b, 0x06, 0x53, 0x91, 0xa7, 0x1f, 0x79, 0x99, 0xa6, 0xc1, 0x15, 0x1c, 0xd6, 0x16, 0x1c,
	0xbf, 0xde, 0xf7, 0x0c, 0xf8, 0x99, 0x02, 0xd6, 0xfc, 0x92, 0x73, 0xc5, 0x97, 0x58, 0x95, 0xf4,
	0xb7, 0x20, 0x2e, 0xf2, 0x91, 0x9f, 0x27, 0xe7, 0x65, 0x45, 0xaf, 0x88, 0x8a, 0x1e, 0xf4, 0x99,
	0xd1, 0x92, 0x3e, 0x09, 0xbb, 0x4c, 0xc3, 0xbb, 0xc4, 0xdf, 0xc7, 0xe0, 0x87, 0x60, 0xde, 0x6f,
	0xc0, 0x4b, 0x65, 0x64, 0xcc, 0xff, 0xc8, 0x98, 0x67, 0x44, 0xcc, 0xfe, 0x68, 0x11, 0xa7, 0x17,
	0x08, 0x9e, 0x07, 0xf3, 0x82, 0x91, 0x7b, 0x07, 0x39, 0xd8, 0xe5, 0x35, 0x35, 0xa9, 0x45, 0xf8,
	0x5e, 0x89, 0x6f, 0x31, 0xc9, 0x9e, 0x54, 0x12, 0x36, 0x78, 0x31, 0xcd, 0x6a, 0xf1, 0x7e, 0x19,
	0x61, 0xc3, 0xd7, 0x4d, 0xbe, 0x08, 0x03, 0x28, 0x72, 0xda, 0xae, 0x54, 0x58, 0xb9, 0x88, 0x1e,
	0x15, 0xf8, 0x08, 0x4a, 0xf0, 0x23, 0x04, 0x3c, 0xec, 0x44, 0xd0, 0xc3, 0x5e, 0x04, 0x33, 0x5e,
	0x91, 0xf3, 0xa6, 0x93, 0x87, 0xcf, 0x8f, 0x53, 0x31, 0x91, 0xbc, 0x3c, 0xc8, 0x68, 0x1e, 0x04,
	0x96, 0x41, 0x4c, 0x88, 0x4e, 0xe7, 0xb4, 0xb0, 0xa3, 0x86, 0x79, 0x8f, 0xbe, 0x3a, 0x6a, 0x3c,
	0xf8, 0x73, 0xc8, 0x0a, 0x69, 0xee, 0x08, 0xeb, 0xa2, 0x4d, 0x9d, 0x8e, 0x16, 0x45, 0xfe, 0x3d,
	0x56, 0x4b, 0xe2, 0x46, 0x75, 0x8c, 0x1c, 0x1b, 0x1b, 0xfc, 0x62, 0xc3, 0xda, 0xbc, 0xd8, 0x2c,
	0xf2, 0x3d, 0x78, 0x1b, 0x88, 0xda, 0x62, 0xad, 0x80, 0x36, 0x45, 0x83, 0x8a, 0x6d, 0xbd, 0x7e,
	0x6a, 0x1a, 0x5c, 0x23, 0x25, 0x6e, 0xab, 0x45, 0x2a, 0xbd, 0xc5, 0xea, 0x3b, 0x00, 0x0e, 0x52,
	0x84, 0x71, 0x30, 0x79, 0x17, 0x77, 0x64, 0x17, 0x67, 0x3f, 0x59, 0x31, 0xb7, 0x50, 0xbd, 0x89,
	0xe5, 0xad, 0x8a, 0xc5, 0x95, 0x89, 0x37, 0x94, 0xcc, 0x35, 0x10, 0xf1, 0x79, 0x87, 0x0b, 0x20,
	0x72, 0xb4, 0xbf, 0x73, 0x63, 0x7b, 0xef, 0xe6, 0x76, 0xfe, 0x46, 0x31, 0x1e, 0x82, 0x51, 0x30,
	0xd7, 0x5b, 0x2a, 0x6c, 0xa0, 0xf0, 0xe5, 0xa8, 0xe9, 0xf2, 0xb3, 0x02, 0xe2, 0x27, 0xe7, 0x1d,
	0xcc, 0x83, 0x59, 0x03, 0xd7, 0x71, 0x8d, 0x75, 0x14, 0x85, 0xcb, 0xfa, 0x7f, 0xc1, 0xe9, 0x0b,
	0x7c, 0x41, 0x62, 0xaf, 0x87, 0xb4, 0xae, 0x1d, 0xf3, 0x41, 0x1d, 0x64, 0xbb, 0x55, 0xec, 0xf0,
	0x44, 0xc6, 0xf8, 0x38, 0x94, 0x58, 0xe6, 0xc3, 0xb3, 0x83, 0x97, 0x41, 0xb8, 0x45, 0x28, 0x96,
	0xe5, 0x9c, 0x1e, 0x65, 0xff, 0x3e, 0xe1, 0xf1, 0x39, 0x9e, 0xa7, 0xa7, 0xb0, 0xf4, 0xf2, 0xd3,
	0x20, 0x4c, 0x3b, 0x0d, 0x9c, 0xf9, 0x5c, 0x01, 0x8b, 0x27, 0xd3, 0x74, 0x87, 0x7c, 0x1b, 0x28,
	0x2f, 0xfe, 0xdb, 0xe0, 0xd3, 0x30, 0x88, 0xf5, 0xdf, 0x1d, 0x7c, 0x09, 0x2c, 0x78, 0xd3, 0xae,
	0x47, 0x84, 0xbd, 0x7f, 0x4c, 0x6e, 0x7b, 0xa4, 0x19, 0x10, 0xb5, 0xfb, 0x80, 0x13, 0x12, 0x28,
	0xb6, 0x3d, 0xe0, 0x11, 0x58, 0xf1, 0x3c, 0xca, 0x57, 0x61, 0xd5, 0x25, 0x27, 0xe8, 0xb8, 0x0e,
	0xa9, 0x79, 0xb3, 0xb7, 0xd0, 0x35, 0x95, 0xe3, 0x95, 0xb9, 0x95, 0xf1, 0x07, 0xdd, 0x86, 0xc7,
	0xbb, 0x15, 0xb6, 0x03, 0x6e, 0x9b, 0x20, 0xe5, 0xcf, 0xbf, 0x85, 0x59, 0xfd, 0xdd, 0xc5, 0xac,
	0xc9, 0x54, 0xb0, 0x4d, 0xcd, 0x3a, 0x16, 0x9f, 0x16, 0xf9, 0x2c, 0xbb, 0xf0, 0x1f, 0x8e, 0x53,
	0xeb, 0x35, 0x93, 0xde, 0x69, 0x96, 0xb3, 0x15, 0x62, 0xc9, 0x3f, 0x44, 0xc8, 0x7f, 0x2e, 0xb9,
	0xc6, 0xdd, 0x1c, 0x7b, 0x75, 0x37, 0x5b, 0xc0, 0x15, 0xed, 0x9c, 0xef, 0xfe, 0x5a, 0xb8, 0xc4,
	0x9c, 0x1e, 0x74, 0x7d, 0xf2, 0xb0, 0xbe, 0xdb, 0x0c, 0x0a, 0x3b, 0xfd, 0x17, 0xc3, 0xf6, 0x5e,
	0x63, 0x20, 0xac, 0xaf, 0x00, 0x7f, 0x57, 0x3c, 0x29, 0x78, 0x25, 0xf0, 0x02, 0xa4, 0xf0, 0xc9,
	0xdf, 0x91, 0x42, 0x7e, 0x43, 0x4a, 0x3c, 0x2d, 0x24, 0x3e, 0xd4, 0x53, 0x66, 0xa8, 0x68, 0x7c,
	0xf9, 0xfe, 0xaa, 0x00, 0xd0, 0x2b, 0xd9, 0x7f, 0x75, 0xae, 0xf9, 0xda, 0xe3, 0xa7, 0x49, 0xe5,
	0xc9, 0xd3, 0xa4, 0xf2, 0xd3, 0xd3, 0xa4, 0xf2, 0xe0, 0x59, 0x32, 0xf4, 0xe4, 0x59, 0x32, 0xf4,
	0xfd, 0xb3, 0x64, 0x08, 0x2c, 0x9b, 0x24, 0xb0, 0xbf, 0x1c, 0x28, 0x1f, 0x6d, 0xf9, 0x04, 0xd6,
	0x83, 0x5c, 0x32, 0x89, 0x6f, 0x95, 0x6b, 0x7b, 0x7f, 0x28, 0xe4, 0x82, 0x2b, 0x4f, 0xf3, 0xff,
	0x57, 0xbe, 0xf6, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x0d, 0x3d, 0x70, 0x4a, 0x14, 0x00,
	0x00,
}

func (this *RewardProgram) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardProgram)
	if !ok {
		that2, ok := that.(RewardProgram)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DistributeFromAddress != that1.DistributeFromAddress {
		return false
	}
	if !this.TotalRewardPool.Equal(&that1.TotalRewardPool) {
		return false
	}
	if !this.RemainingPoolBalance.Equal(&that1.RemainingPoolBalance) {
		return false
	}
	if !this.ClaimedAmount.Equal(&that1.ClaimedAmount) {
		return false
	}
	if !this.MaxRewardByAddress.Equal(&that1.MaxRewardByAddress) {
		return false
	}
	if !this.MinimumRolloverAmount.Equal(&that1.MinimumRolloverAmount) {
		return false
	}
	if this.ClaimPeriodSeconds != that1.ClaimPeriodSeconds {
		return false
	}
	if !this.ProgramStartTime.Equal(that1.ProgramStartTime) {
		return false
	}
	if !this.ExpectedProgramEndTime.Equal(that1.ExpectedProgramEndTime) {
		return false
	}
	if !this.ProgramEndTimeMax.Equal(that1.ProgramEndTimeMax) {
		return false
	}
	if !this.ClaimPeriodEndTime.Equal(that1.ClaimPeriodEndTime) {
		return false
	}
	if !this.ActualProgramEndTime.Equal(that1.ActualProgramEndTime) {
		return false
	}
	if this.ClaimPeriods != that1.ClaimPeriods {
		return false
	}
	if this.CurrentClaimPeriod != that1.CurrentClaimPeriod {
		return false
	}
	if this.MaxRolloverClaimPeriods != that1.MaxRolloverClaimPeriods {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.ExpirationOffset != that1.ExpirationOffset {
		return false
	}
	if len(this.QualifyingActions) != len(that1.QualifyingActions) {
		return false
	}
	for i := range this.QualifyingActions {
		if !this.QualifyingActions[i].Equal(&that1.QualifyingActions[i]) {
			return false
		}
	}
	return true
}
func (this *ClaimPeriodRewardDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimPeriodRewardDistribution)
	if !ok {
		that2, ok := that.(ClaimPeriodRewardDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardsPoolForClaimPeriod.Equal(&that1.TotalRewardsPoolForClaimPeriod) {
		return false
	}
	if !this.RewardsPool.Equal(&that1.RewardsPool) {
		return false
	}
	if this.TotalShares != that1.TotalShares {
		return false
	}
	if this.ClaimPeriodEnded != that1.ClaimPeriodEnded {
		return false
	}
	return true
}
func (this *RewardAccountState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardAccountState)
	if !ok {
		that2, ok := that.(RewardAccountState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if this.ClaimPeriodId != that1.ClaimPeriodId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if len(this.ActionCounter) != len(that1.ActionCounter) {
		return false
	}
	for i := range this.ActionCounter {
		if this.ActionCounter[i] != that1.ActionCounter[i] {
			return false
		}
	}
	if this.SharesEarned != that1.SharesEarned {
		return false
	}
	if this.ClaimStatus != that1.ClaimStatus {
		return false
	}
	return true
}
func (this *QualifyingAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction)
	if !ok {
		that2, ok := that.(QualifyingAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *QualifyingAction_Delegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Delegate)
	if !ok {
		that2, ok := that.(QualifyingAction_Delegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delegate.Equal(that1.Delegate) {
		return false
	}
	return true
}
func (this *QualifyingAction_Transfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Transfer)
	if !ok {
		that2, ok := that.(QualifyingAction_Transfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transfer.Equal(that1.Transfer) {
		return false
	}
	return true
}
func (this *QualifyingAction_Vote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QualifyingAction_Vote)
	if !ok {
		that2, ok := that.(QualifyingAction_Vote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vote.Equal(that1.Vote) {
		return false
	}
	return true
}
func (this *ActionDelegate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionDelegate)
	if !ok {
		that2, ok := that.(ActionDelegate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(that1.MinimumDelegationAmount) {
		return false
	}
	if !this.MaximumDelegationAmount.Equal(that1.MaximumDelegationAmount) {
		return false
	}
	if !this.MinimumActiveStakePercentile.Equal(that1.MinimumActiveStakePercentile) {
		return false
	}
	if !this.MaximumActiveStakePercentile.Equal(that1.MaximumActiveStakePercentile) {
		return false
	}
	return true
}
func (this *ActionTransfer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionTransfer)
	if !ok {
		that2, ok := that.(ActionTransfer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(&that1.MinimumDelegationAmount) {
		return false
	}
	return true
}
func (this *ActionVote) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionVote)
	if !ok {
		that2, ok := that.(ActionVote)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinimumActions != that1.MinimumActions {
		return false
	}
	if this.MaximumActions != that1.MaximumActions {
		return false
	}
	if !this.MinimumDelegationAmount.Equal(&that1.MinimumDelegationAmount) {
		return false
	}
	return true
}
func (m *RewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if m.ExpirationOffset != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ExpirationOffset))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.State != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MaxRolloverClaimPeriods != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaxRolloverClaimPeriods))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CurrentClaimPeriod != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.CurrentClaimPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.ClaimPeriods != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriods))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ActualProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintReward(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x7a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ClaimPeriodEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintReward(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x72
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramEndTimeMax, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramEndTimeMax):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintReward(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x6a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpectedProgramEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintReward(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x62
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProgramStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintReward(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x5a
	if m.ClaimPeriodSeconds != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodSeconds))
		i--
		dAtA[i] = 0x50
	}
	{
		size, err := m.MinimumRolloverAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.MaxRewardByAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ClaimedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.RemainingPoolBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.TotalRewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSetRewardProgram) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetRewardProgram) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetRewardProgram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		i -= len(m.QualifyingActions)
		copy(dAtA[i:], m.QualifyingActions)
		i = encodeVarintReward(dAtA, i, uint64(len(m.QualifyingActions)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ExpirationOffset) > 0 {
		i -= len(m.ExpirationOffset)
		copy(dAtA[i:], m.ExpirationOffset)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ExpirationOffset)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintReward(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ClaimPeriods) > 0 {
		i -= len(m.ClaimPeriods)
		copy(dAtA[i:], m.ClaimPeriods)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ClaimPeriods)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ClaimPeriodEndTime) > 0 {
		i -= len(m.ClaimPeriodEndTime)
		copy(dAtA[i:], m.ClaimPeriodEndTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ClaimPeriodEndTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ExpectedProgramEndTime) > 0 {
		i -= len(m.ExpectedProgramEndTime)
		copy(dAtA[i:], m.ExpectedProgramEndTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ExpectedProgramEndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ProgramStartTime) > 0 {
		i -= len(m.ProgramStartTime)
		copy(dAtA[i:], m.ProgramStartTime)
		i = encodeVarintReward(dAtA, i, uint64(len(m.ProgramStartTime)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ClaimPeriodSeconds != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodSeconds))
		i--
		dAtA[i] = 0x40
	}
	if len(m.MinimumRolloverAmount) > 0 {
		i -= len(m.MinimumRolloverAmount)
		copy(dAtA[i:], m.MinimumRolloverAmount)
		i = encodeVarintReward(dAtA, i, uint64(len(m.MinimumRolloverAmount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxRewardByAddress) > 0 {
		i -= len(m.MaxRewardByAddress)
		copy(dAtA[i:], m.MaxRewardByAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.MaxRewardByAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotalRewardPool) > 0 {
		i -= len(m.TotalRewardPool)
		copy(dAtA[i:], m.TotalRewardPool)
		i = encodeVarintReward(dAtA, i, uint64(len(m.TotalRewardPool)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DistributeFromAddress) > 0 {
		i -= len(m.DistributeFromAddress)
		copy(dAtA[i:], m.DistributeFromAddress)
		i = encodeVarintReward(dAtA, i, uint64(len(m.DistributeFromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimPeriodRewardDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimPeriodRewardDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimPeriodRewardDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimPeriodEnded {
		i--
		if m.ClaimPeriodEnded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.TotalShares != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.TotalShares))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.RewardsPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.TotalRewardsPoolForClaimPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x10
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardAccountState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAccountState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAccountState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimStatus != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x30
	}
	if m.SharesEarned != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.SharesEarned))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ActionCounter) > 0 {
		for k := range m.ActionCounter {
			v := m.ActionCounter[k]
			baseI := i
			i = encodeVarintReward(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintReward(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintReward(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintReward(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ClaimPeriodId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardProgramId != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualifyingAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QualifyingAction_Delegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Delegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Delegate != nil {
		{
			size, err := m.Delegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingAction_Transfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Transfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Transfer != nil {
		{
			size, err := m.Transfer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingAction_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingAction_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QualifyingActions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualifyingActions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualifyingActions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for iNdEx := len(m.QualifyingActions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QualifyingActions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ActionDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaximumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MaximumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinimumActiveStakePercentile.Size()
		i -= size
		if _, err := m.MinimumActiveStakePercentile.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaximumDelegationAmount != nil {
		{
			size, err := m.MaximumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinimumDelegationAmount != nil {
		{
			size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MinimumDelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintReward(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaximumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MaximumActions))
		i--
		dAtA[i] = 0x10
	}
	if m.MinimumActions != 0 {
		i = encodeVarintReward(dAtA, i, uint64(m.MinimumActions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReward(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.TotalRewardPool.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.RemainingPoolBalance.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.ClaimedAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaxRewardByAddress.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MinimumRolloverAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriodSeconds != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodSeconds))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramStartTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpectedProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProgramEndTimeMax)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ClaimPeriodEndTime)
	n += 1 + l + sovReward(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ActualProgramEndTime)
	n += 1 + l + sovReward(uint64(l))
	if m.ClaimPeriods != 0 {
		n += 2 + sovReward(uint64(m.ClaimPeriods))
	}
	if m.CurrentClaimPeriod != 0 {
		n += 2 + sovReward(uint64(m.CurrentClaimPeriod))
	}
	if m.MaxRolloverClaimPeriods != 0 {
		n += 2 + sovReward(uint64(m.MaxRolloverClaimPeriods))
	}
	if m.State != 0 {
		n += 2 + sovReward(uint64(m.State))
	}
	if m.ExpirationOffset != 0 {
		n += 2 + sovReward(uint64(m.ExpirationOffset))
	}
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 2 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *EventSetRewardProgram) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.DistributeFromAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.TotalRewardPool)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.MaxRewardByAddress)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.MinimumRolloverAmount)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if m.ClaimPeriodSeconds != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodSeconds))
	}
	l = len(m.ProgramStartTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ExpectedProgramEndTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ClaimPeriodEndTime)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ClaimPeriods)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.ExpirationOffset)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	l = len(m.QualifyingActions)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}

func (m *ClaimPeriodRewardDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimPeriodId != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodId))
	}
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardsPoolForClaimPeriod.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.RewardsPool.Size()
	n += 1 + l + sovReward(uint64(l))
	if m.TotalShares != 0 {
		n += 1 + sovReward(uint64(m.TotalShares))
	}
	if m.ClaimPeriodEnded {
		n += 2
	}
	return n
}

func (m *RewardAccountState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovReward(uint64(m.RewardProgramId))
	}
	if m.ClaimPeriodId != 0 {
		n += 1 + sovReward(uint64(m.ClaimPeriodId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovReward(uint64(l))
	}
	if len(m.ActionCounter) > 0 {
		for k, v := range m.ActionCounter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovReward(uint64(len(k))) + 1 + sovReward(uint64(v))
			n += mapEntrySize + 1 + sovReward(uint64(mapEntrySize))
		}
	}
	if m.SharesEarned != 0 {
		n += 1 + sovReward(uint64(m.SharesEarned))
	}
	if m.ClaimStatus != 0 {
		n += 1 + sovReward(uint64(m.ClaimStatus))
	}
	return n
}

func (m *QualifyingAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *QualifyingAction_Delegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delegate != nil {
		l = m.Delegate.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingAction_Transfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transfer != nil {
		l = m.Transfer.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingAction_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	return n
}
func (m *QualifyingActions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QualifyingActions) > 0 {
		for _, e := range m.QualifyingActions {
			l = e.Size()
			n += 1 + l + sovReward(uint64(l))
		}
	}
	return n
}

func (m *ActionDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	if m.MinimumDelegationAmount != nil {
		l = m.MinimumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	if m.MaximumDelegationAmount != nil {
		l = m.MaximumDelegationAmount.Size()
		n += 1 + l + sovReward(uint64(l))
	}
	l = m.MinimumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	l = m.MaximumActiveStakePercentile.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	l = m.MinimumDelegationAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func (m *ActionVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinimumActions != 0 {
		n += 1 + sovReward(uint64(m.MinimumActions))
	}
	if m.MaximumActions != 0 {
		n += 1 + sovReward(uint64(m.MaximumActions))
	}
	l = m.MinimumDelegationAmount.Size()
	n += 1 + l + sovReward(uint64(l))
	return n
}

func sovReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReward(x uint64) (n int) {
	return sovReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingPoolBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingPoolBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardByAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxRewardByAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRolloverAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumRolloverAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodSeconds", wireType)
			}
			m.ClaimPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpectedProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramEndTimeMax", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProgramEndTimeMax, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ClaimPeriodEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActualProgramEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ActualProgramEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			m.ClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentClaimPeriod", wireType)
			}
			m.CurrentClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRolloverClaimPeriods", wireType)
			}
			m.MaxRolloverClaimPeriods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRolloverClaimPeriods |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= RewardProgram_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationOffset", wireType)
			}
			m.ExpirationOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetRewardProgram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetRewardProgram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetRewardProgram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributeFromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRewardPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardByAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxRewardByAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumRolloverAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumRolloverAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodSeconds", wireType)
			}
			m.ClaimPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProgramStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedProgramEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedProgramEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriodEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriods = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimPeriodRewardDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimPeriodRewardDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardsPoolForClaimPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardsPoolForClaimPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			m.TotalShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodEnded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimPeriodEnded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAccountState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAccountState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAccountState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionCounter == nil {
				m.ActionCounter = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReward
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthReward
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthReward
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReward
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReward(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthReward
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActionCounter[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesEarned", wireType)
			}
			m.SharesEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharesEarned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= RewardAccountState_ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualifyingAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualifyingAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualifyingAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Delegate{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionTransfer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Transfer{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionVote{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &QualifyingAction_Vote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualifyingActions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualifyingActions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualifyingActions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifyingActions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifyingActions = append(m.QualifyingActions, QualifyingAction{})
			if err := m.QualifyingActions[len(m.QualifyingActions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumDelegationAmount == nil {
				m.MinimumDelegationAmount = &types.Coin{}
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaximumDelegationAmount == nil {
				m.MaximumDelegationAmount = &types.Coin{}
			}
			if err := m.MaximumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActiveStakePercentile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumActiveStakePercentile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumActions", wireType)
			}
			m.MinimumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumActions", wireType)
			}
			m.MaximumActions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaximumActions |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReward = fmt.Errorf("proto: unexpected end of group")
)
