// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/reward/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryType is the state of reward program to query
type QueryRewardProgramsRequest_QueryType int32

const (
	// unspecified type
	QueryRewardProgramsRequest_QUERY_TYPE_UNSPECIFIED QueryRewardProgramsRequest_QueryType = 0
	// all reward programs states
	QueryRewardProgramsRequest_QUERY_TYPE_ALL QueryRewardProgramsRequest_QueryType = 1
	// pending reward program state=
	QueryRewardProgramsRequest_QUERY_TYPE_PENDING QueryRewardProgramsRequest_QueryType = 2
	// active reward program state
	QueryRewardProgramsRequest_QUERY_TYPE_ACTIVE QueryRewardProgramsRequest_QueryType = 3
	// pending and active reward program states
	QueryRewardProgramsRequest_QUERY_TYPE_OUTSTANDING QueryRewardProgramsRequest_QueryType = 4
	// finished reward program state
	QueryRewardProgramsRequest_QUERY_TYPE_FINISHED QueryRewardProgramsRequest_QueryType = 5
)

var QueryRewardProgramsRequest_QueryType_name = map[int32]string{
	0: "QUERY_TYPE_UNSPECIFIED",
	1: "QUERY_TYPE_ALL",
	2: "QUERY_TYPE_PENDING",
	3: "QUERY_TYPE_ACTIVE",
	4: "QUERY_TYPE_OUTSTANDING",
	5: "QUERY_TYPE_FINISHED",
}

var QueryRewardProgramsRequest_QueryType_value = map[string]int32{
	"QUERY_TYPE_UNSPECIFIED": 0,
	"QUERY_TYPE_ALL":         1,
	"QUERY_TYPE_PENDING":     2,
	"QUERY_TYPE_ACTIVE":      3,
	"QUERY_TYPE_OUTSTANDING": 4,
	"QUERY_TYPE_FINISHED":    5,
}

func (x QueryRewardProgramsRequest_QueryType) String() string {
	return proto.EnumName(QueryRewardProgramsRequest_QueryType_name, int32(x))
}

func (QueryRewardProgramsRequest_QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{2, 0}
}

// QueryRewardProgramByIDRequest queries for the Reward Program with an identifier of id
type QueryRewardProgramByIDRequest struct {
	// The id of the reward program to query.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRewardProgramByIDRequest) Reset()         { *m = QueryRewardProgramByIDRequest{} }
func (m *QueryRewardProgramByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramByIDRequest) ProtoMessage()    {}
func (*QueryRewardProgramByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{0}
}
func (m *QueryRewardProgramByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramByIDRequest.Merge(m, src)
}
func (m *QueryRewardProgramByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramByIDRequest proto.InternalMessageInfo

func (m *QueryRewardProgramByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryRewardProgramByIDResponse contains the requested RewardProgram
type QueryRewardProgramByIDResponse struct {
	// The reward program object that was queried for.
	RewardProgram *RewardProgram `protobuf:"bytes,1,opt,name=reward_program,json=rewardProgram,proto3" json:"reward_program,omitempty"`
}

func (m *QueryRewardProgramByIDResponse) Reset()         { *m = QueryRewardProgramByIDResponse{} }
func (m *QueryRewardProgramByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramByIDResponse) ProtoMessage()    {}
func (*QueryRewardProgramByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{1}
}
func (m *QueryRewardProgramByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramByIDResponse.Merge(m, src)
}
func (m *QueryRewardProgramByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramByIDResponse proto.InternalMessageInfo

func (m *QueryRewardProgramByIDResponse) GetRewardProgram() *RewardProgram {
	if m != nil {
		return m.RewardProgram
	}
	return nil
}

// QueryRewardProgramsRequest queries for all reward programs matching the query_type
type QueryRewardProgramsRequest struct {
	// A filter on the types of reward programs.
	QueryType QueryRewardProgramsRequest_QueryType `protobuf:"varint,1,opt,name=query_type,json=queryType,proto3,enum=provenance.reward.v1.QueryRewardProgramsRequest_QueryType" json:"query_type,omitempty"`
}

func (m *QueryRewardProgramsRequest) Reset()         { *m = QueryRewardProgramsRequest{} }
func (m *QueryRewardProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramsRequest) ProtoMessage()    {}
func (*QueryRewardProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{2}
}
func (m *QueryRewardProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramsRequest.Merge(m, src)
}
func (m *QueryRewardProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramsRequest proto.InternalMessageInfo

func (m *QueryRewardProgramsRequest) GetQueryType() QueryRewardProgramsRequest_QueryType {
	if m != nil {
		return m.QueryType
	}
	return QueryRewardProgramsRequest_QUERY_TYPE_UNSPECIFIED
}

// QueryRewardProgramsResponse contains the list of RewardPrograms matching the query
type QueryRewardProgramsResponse struct {
	// List of RewardProgram objects matching the query_type.
	RewardPrograms []RewardProgram `protobuf:"bytes,1,rep,name=reward_programs,json=rewardPrograms,proto3" json:"reward_programs"`
}

func (m *QueryRewardProgramsResponse) Reset()         { *m = QueryRewardProgramsResponse{} }
func (m *QueryRewardProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramsResponse) ProtoMessage()    {}
func (*QueryRewardProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{3}
}
func (m *QueryRewardProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramsResponse.Merge(m, src)
}
func (m *QueryRewardProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramsResponse proto.InternalMessageInfo

func (m *QueryRewardProgramsResponse) GetRewardPrograms() []RewardProgram {
	if m != nil {
		return m.RewardPrograms
	}
	return nil
}

// QueryClaimPeriodRewardDistributionsRequest queries for all the ClaimPeriodRewardDistributions with pagination.
type QueryClaimPeriodRewardDistributionsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClaimPeriodRewardDistributionsRequest) Reset() {
	*m = QueryClaimPeriodRewardDistributionsRequest{}
}
func (m *QueryClaimPeriodRewardDistributionsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryClaimPeriodRewardDistributionsRequest) ProtoMessage() {}
func (*QueryClaimPeriodRewardDistributionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{4}
}
func (m *QueryClaimPeriodRewardDistributionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimPeriodRewardDistributionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimPeriodRewardDistributionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimPeriodRewardDistributionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsRequest.Merge(m, src)
}
func (m *QueryClaimPeriodRewardDistributionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimPeriodRewardDistributionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimPeriodRewardDistributionsRequest proto.InternalMessageInfo

func (m *QueryClaimPeriodRewardDistributionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClaimPeriodRewardDistributionsResponse returns the list of paginated ClaimPeriodRewardDistributions
type QueryClaimPeriodRewardDistributionsResponse struct {
	// List of all ClaimPeriodRewardDistribution objects queried for.
	ClaimPeriodRewardDistributions []ClaimPeriodRewardDistribution `protobuf:"bytes,1,rep,name=claim_period_reward_distributions,json=claimPeriodRewardDistributions,proto3" json:"claim_period_reward_distributions"`
	// pagination defines an optional pagination for the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryClaimPeriodRewardDistributionsResponse) Reset() {
	*m = QueryClaimPeriodRewardDistributionsResponse{}
}
func (m *QueryClaimPeriodRewardDistributionsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryClaimPeriodRewardDistributionsResponse) ProtoMessage() {}
func (*QueryClaimPeriodRewardDistributionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{5}
}
func (m *QueryClaimPeriodRewardDistributionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimPeriodRewardDistributionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimPeriodRewardDistributionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimPeriodRewardDistributionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsResponse.Merge(m, src)
}
func (m *QueryClaimPeriodRewardDistributionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimPeriodRewardDistributionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimPeriodRewardDistributionsResponse proto.InternalMessageInfo

func (m *QueryClaimPeriodRewardDistributionsResponse) GetClaimPeriodRewardDistributions() []ClaimPeriodRewardDistribution {
	if m != nil {
		return m.ClaimPeriodRewardDistributions
	}
	return nil
}

func (m *QueryClaimPeriodRewardDistributionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryClaimPeriodRewardDistributionsByIDRequest queries for a single ClaimPeriodRewardDistribution
type QueryClaimPeriodRewardDistributionsByIDRequest struct {
	// The reward program that the claim period reward distribution belongs to.
	RewardId uint64 `protobuf:"varint,1,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// The claim period that the claim period reward distribution was created for.
	ClaimPeriodId uint64 `protobuf:"varint,2,opt,name=claim_period_id,json=claimPeriodId,proto3" json:"claim_period_id,omitempty"`
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) Reset() {
	*m = QueryClaimPeriodRewardDistributionsByIDRequest{}
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryClaimPeriodRewardDistributionsByIDRequest) ProtoMessage() {}
func (*QueryClaimPeriodRewardDistributionsByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{6}
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDRequest.Merge(m, src)
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDRequest proto.InternalMessageInfo

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) GetRewardId() uint64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) GetClaimPeriodId() uint64 {
	if m != nil {
		return m.ClaimPeriodId
	}
	return 0
}

// QueryClaimPeriodRewardDistributionsByIDResponse returns the requested ClaimPeriodRewardDistribution
type QueryClaimPeriodRewardDistributionsByIDResponse struct {
	// The ClaimPeriodRewardDistribution object that was queried for.
	ClaimPeriodRewardDistribution *ClaimPeriodRewardDistribution `protobuf:"bytes,1,opt,name=claim_period_reward_distribution,json=claimPeriodRewardDistribution,proto3" json:"claim_period_reward_distribution,omitempty"`
}

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) Reset() {
	*m = QueryClaimPeriodRewardDistributionsByIDResponse{}
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryClaimPeriodRewardDistributionsByIDResponse) ProtoMessage() {}
func (*QueryClaimPeriodRewardDistributionsByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{7}
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDResponse.Merge(m, src)
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimPeriodRewardDistributionsByIDResponse proto.InternalMessageInfo

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) GetClaimPeriodRewardDistribution() *ClaimPeriodRewardDistribution {
	if m != nil {
		return m.ClaimPeriodRewardDistribution
	}
	return nil
}

// QueryRewardDistributionsByAddressRequest queries for reward claims by address that match the claim_status.
type QueryRewardDistributionsByAddressRequest struct {
	// The address that the claim belongs to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The status that the reward account must have.
	ClaimStatus RewardAccountState_ClaimStatus `protobuf:"varint,2,opt,name=claim_status,json=claimStatus,proto3,enum=provenance.reward.v1.RewardAccountState_ClaimStatus" json:"claim_status,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardDistributionsByAddressRequest) Reset() {
	*m = QueryRewardDistributionsByAddressRequest{}
}
func (m *QueryRewardDistributionsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardDistributionsByAddressRequest) ProtoMessage()    {}
func (*QueryRewardDistributionsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{8}
}
func (m *QueryRewardDistributionsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardDistributionsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardDistributionsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardDistributionsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardDistributionsByAddressRequest.Merge(m, src)
}
func (m *QueryRewardDistributionsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardDistributionsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardDistributionsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardDistributionsByAddressRequest proto.InternalMessageInfo

func (m *QueryRewardDistributionsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRewardDistributionsByAddressRequest) GetClaimStatus() RewardAccountState_ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return RewardAccountState_CLAIM_STATUS_UNSPECIFIED
}

func (m *QueryRewardDistributionsByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardDistributionsByAddressResponse returns the reward claims for an address that match the claim_status.
type QueryRewardDistributionsByAddressResponse struct {
	// The address that the reward account belongs to.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// List of RewardAccounts queried for.
	RewardAccountState []RewardAccountResponse `protobuf:"bytes,2,rep,name=reward_account_state,json=rewardAccountState,proto3" json:"reward_account_state"`
	// pagination defines an optional pagination for the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardDistributionsByAddressResponse) Reset() {
	*m = QueryRewardDistributionsByAddressResponse{}
}
func (m *QueryRewardDistributionsByAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryRewardDistributionsByAddressResponse) ProtoMessage() {}
func (*QueryRewardDistributionsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{9}
}
func (m *QueryRewardDistributionsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardDistributionsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardDistributionsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardDistributionsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardDistributionsByAddressResponse.Merge(m, src)
}
func (m *QueryRewardDistributionsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardDistributionsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardDistributionsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardDistributionsByAddressResponse proto.InternalMessageInfo

func (m *QueryRewardDistributionsByAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRewardDistributionsByAddressResponse) GetRewardAccountState() []RewardAccountResponse {
	if m != nil {
		return m.RewardAccountState
	}
	return nil
}

func (m *QueryRewardDistributionsByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RewardAccountResponse is an address' reward claim for a reward program's claim period.
type RewardAccountResponse struct {
	// The id of the reward program that this claim belongs to.
	RewardProgramId uint64 `protobuf:"varint,1,opt,name=reward_program_id,json=rewardProgramId,proto3" json:"reward_program_id,omitempty"`
	// total rewards claimed for all eligible claim periods in program.
	TotalRewardClaim types.Coin `protobuf:"bytes,2,opt,name=total_reward_claim,json=totalRewardClaim,proto3" json:"total_reward_claim"`
	// The status of the claim.
	ClaimStatus RewardAccountState_ClaimStatus `protobuf:"varint,3,opt,name=claim_status,json=claimStatus,proto3,enum=provenance.reward.v1.RewardAccountState_ClaimStatus" json:"claim_status,omitempty"`
	// The claim period that the claim belongs to.
	ClaimId uint64 `protobuf:"varint,4,opt,name=claim_id,json=claimId,proto3" json:"claim_id,omitempty"`
}

func (m *RewardAccountResponse) Reset()         { *m = RewardAccountResponse{} }
func (m *RewardAccountResponse) String() string { return proto.CompactTextString(m) }
func (*RewardAccountResponse) ProtoMessage()    {}
func (*RewardAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_89e47dd1c3e4febf, []int{10}
}
func (m *RewardAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAccountResponse.Merge(m, src)
}
func (m *RewardAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *RewardAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAccountResponse proto.InternalMessageInfo

func (m *RewardAccountResponse) GetRewardProgramId() uint64 {
	if m != nil {
		return m.RewardProgramId
	}
	return 0
}

func (m *RewardAccountResponse) GetTotalRewardClaim() types.Coin {
	if m != nil {
		return m.TotalRewardClaim
	}
	return types.Coin{}
}

func (m *RewardAccountResponse) GetClaimStatus() RewardAccountState_ClaimStatus {
	if m != nil {
		return m.ClaimStatus
	}
	return RewardAccountState_CLAIM_STATUS_UNSPECIFIED
}

func (m *RewardAccountResponse) GetClaimId() uint64 {
	if m != nil {
		return m.ClaimId
	}
	return 0
}

func init() {
	proto.RegisterEnum("provenance.reward.v1.QueryRewardProgramsRequest_QueryType", QueryRewardProgramsRequest_QueryType_name, QueryRewardProgramsRequest_QueryType_value)
	proto.RegisterType((*QueryRewardProgramByIDRequest)(nil), "provenance.reward.v1.QueryRewardProgramByIDRequest")
	proto.RegisterType((*QueryRewardProgramByIDResponse)(nil), "provenance.reward.v1.QueryRewardProgramByIDResponse")
	proto.RegisterType((*QueryRewardProgramsRequest)(nil), "provenance.reward.v1.QueryRewardProgramsRequest")
	proto.RegisterType((*QueryRewardProgramsResponse)(nil), "provenance.reward.v1.QueryRewardProgramsResponse")
	proto.RegisterType((*QueryClaimPeriodRewardDistributionsRequest)(nil), "provenance.reward.v1.QueryClaimPeriodRewardDistributionsRequest")
	proto.RegisterType((*QueryClaimPeriodRewardDistributionsResponse)(nil), "provenance.reward.v1.QueryClaimPeriodRewardDistributionsResponse")
	proto.RegisterType((*QueryClaimPeriodRewardDistributionsByIDRequest)(nil), "provenance.reward.v1.QueryClaimPeriodRewardDistributionsByIDRequest")
	proto.RegisterType((*QueryClaimPeriodRewardDistributionsByIDResponse)(nil), "provenance.reward.v1.QueryClaimPeriodRewardDistributionsByIDResponse")
	proto.RegisterType((*QueryRewardDistributionsByAddressRequest)(nil), "provenance.reward.v1.QueryRewardDistributionsByAddressRequest")
	proto.RegisterType((*QueryRewardDistributionsByAddressResponse)(nil), "provenance.reward.v1.QueryRewardDistributionsByAddressResponse")
	proto.RegisterType((*RewardAccountResponse)(nil), "provenance.reward.v1.RewardAccountResponse")
}

func init() { proto.RegisterFile("provenance/reward/v1/query.proto", fileDescriptor_89e47dd1c3e4febf) }

var fileDescriptor_89e47dd1c3e4febf = []byte{
	// 1034 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x38, 0x29, 0x4d, 0x5e, 0xa8, 0xe3, 0x0c, 0x69, 0xeb, 0xba, 0xed, 0x26, 0x5d, 0xa4,
	0x10, 0x12, 0x75, 0xb7, 0x76, 0x2a, 0x84, 0x72, 0x80, 0x3a, 0xb1, 0x53, 0x16, 0x95, 0xe0, 0xae,
	0x1d, 0x50, 0xb8, 0x58, 0xeb, 0xdd, 0xc5, 0xac, 0xe4, 0x78, 0x9c, 0x9d, 0x75, 0x20, 0x0a, 0xb9,
	0x20, 0x3e, 0x40, 0x25, 0x2e, 0x70, 0x6a, 0x2f, 0x9c, 0x39, 0xf0, 0x25, 0x2a, 0x71, 0xa9, 0xc4,
	0x01, 0x4e, 0x08, 0x25, 0x20, 0xb8, 0x73, 0x46, 0xaa, 0x3c, 0x33, 0x6b, 0xef, 0xc6, 0xce, 0x7a,
	0x93, 0xe6, 0xe6, 0x99, 0xf7, 0xef, 0xf7, 0x7b, 0x7f, 0xe6, 0xad, 0x61, 0xbe, 0xed, 0x92, 0x3d,
	0xbb, 0x65, 0xb4, 0x4c, 0x5b, 0x75, 0xed, 0x2f, 0x0d, 0xd7, 0x52, 0xf7, 0x72, 0xea, 0x6e, 0xc7,
	0x76, 0xf7, 0x95, 0xb6, 0x4b, 0x3c, 0x82, 0x67, 0xfb, 0x1a, 0x0a, 0xd7, 0x50, 0xf6, 0x72, 0xd9,
	0xd9, 0x06, 0x69, 0x10, 0xa6, 0xa0, 0x76, 0x7f, 0x71, 0xdd, 0xec, 0xad, 0x06, 0x21, 0x8d, 0xa6,
	0xad, 0x1a, 0x6d, 0x47, 0x35, 0x5a, 0x2d, 0xe2, 0x19, 0x9e, 0x43, 0x5a, 0x54, 0x48, 0x25, 0x93,
	0xd0, 0x1d, 0x42, 0xd5, 0xba, 0x41, 0x6d, 0x75, 0x2f, 0x57, 0xb7, 0x3d, 0x23, 0xa7, 0x9a, 0xc4,
	0x69, 0x09, 0xf9, 0x52, 0x50, 0xce, 0x20, 0xf4, 0xb4, 0xda, 0x46, 0xc3, 0x69, 0x31, 0x67, 0x42,
	0xf7, 0xce, 0x50, 0xdc, 0x02, 0x1f, 0x53, 0x91, 0x55, 0xb8, 0xfd, 0xb8, 0xeb, 0x44, 0x67, 0x97,
	0x65, 0x97, 0x34, 0x5c, 0x63, 0x67, 0x6d, 0x5f, 0x2b, 0xea, 0xf6, 0x6e, 0xc7, 0xa6, 0x1e, 0x4e,
	0x41, 0xd2, 0xb1, 0x32, 0x68, 0x1e, 0x2d, 0x8e, 0xeb, 0x49, 0xc7, 0x92, 0x9b, 0x20, 0x9d, 0x66,
	0x40, 0xdb, 0xa4, 0x45, 0x6d, 0xfc, 0x21, 0xa4, 0x78, 0x88, 0x5a, 0x9b, 0x4b, 0x99, 0xf5, 0x54,
	0xfe, 0x4d, 0x65, 0x58, 0x92, 0x94, 0x90, 0x23, 0xfd, 0x8a, 0x1b, 0x3c, 0xca, 0x3f, 0x24, 0x21,
	0x3b, 0x18, 0x8e, 0xfa, 0xe0, 0xb6, 0x01, 0x58, 0x0a, 0x6a, 0xde, 0x7e, 0xdb, 0x66, 0x61, 0x52,
	0xf9, 0xd5, 0xe1, 0x61, 0x4e, 0xf7, 0xc2, 0x45, 0xd5, 0xfd, 0xb6, 0xad, 0x4f, 0xee, 0xfa, 0x3f,
	0xe5, 0xa7, 0x08, 0x26, 0x7b, 0x02, 0x9c, 0x85, 0x6b, 0x8f, 0xb7, 0x4a, 0xfa, 0x76, 0xad, 0xba,
	0x5d, 0x2e, 0xd5, 0xb6, 0x36, 0x2b, 0xe5, 0xd2, 0xba, 0xb6, 0xa1, 0x95, 0x8a, 0xe9, 0x04, 0xc6,
	0x90, 0x0a, 0xc8, 0x0a, 0x8f, 0x1e, 0xa5, 0x11, 0xbe, 0x06, 0x38, 0x70, 0x57, 0x2e, 0x6d, 0x16,
	0xb5, 0xcd, 0x87, 0xe9, 0x24, 0xbe, 0x0a, 0x33, 0x41, 0xdd, 0xf5, 0xaa, 0xf6, 0x49, 0x29, 0x3d,
	0x76, 0xc2, 0xfd, 0xc7, 0x5b, 0xd5, 0x4a, 0xb5, 0xc0, 0x4d, 0xc6, 0xf1, 0x75, 0x78, 0x23, 0x20,
	0xdb, 0xd0, 0x36, 0xb5, 0xca, 0x07, 0xa5, 0x62, 0xfa, 0x92, 0xbc, 0x0b, 0x37, 0x87, 0x92, 0x12,
	0x65, 0xd0, 0x61, 0x3a, 0x5c, 0x06, 0x9a, 0x41, 0xf3, 0x63, 0x31, 0xeb, 0xb0, 0x36, 0xfe, 0xfc,
	0x8f, 0xb9, 0x84, 0x9e, 0x0a, 0x55, 0x83, 0xca, 0x1e, 0x2c, 0xb1, 0x90, 0xeb, 0x4d, 0xc3, 0xd9,
	0x29, 0xdb, 0xae, 0x43, 0x2c, 0x6e, 0x56, 0x74, 0xa8, 0xe7, 0x3a, 0xf5, 0x0e, 0xeb, 0x64, 0xbf,
	0x3a, 0x1b, 0x00, 0xfd, 0x96, 0xcc, 0x98, 0xac, 0x09, 0x16, 0x14, 0xde, 0xbf, 0x4a, 0xb7, 0x7f,
	0x15, 0x3e, 0x42, 0xa2, 0x7f, 0x95, 0xb2, 0xd1, 0xb0, 0x85, 0xad, 0x1e, 0xb0, 0x94, 0xff, 0x47,
	0xb0, 0x1c, 0x2b, 0xac, 0x60, 0xfe, 0x2d, 0x82, 0x3b, 0x66, 0x57, 0xb5, 0xd6, 0x66, 0xba, 0x35,
	0x91, 0x07, 0x2b, 0xa8, 0x2d, 0x92, 0xb1, 0x32, 0x3c, 0x19, 0x91, 0x91, 0x44, 0x72, 0x24, 0x33,
	0x12, 0x0e, 0x7e, 0x38, 0x84, 0xfe, 0x5b, 0x23, 0xe9, 0x73, 0x0e, 0x21, 0xfe, 0x1d, 0x50, 0x62,
	0xd0, 0x0f, 0x0e, 0xed, 0x4d, 0x98, 0x14, 0x9c, 0x7b, 0xb3, 0x3b, 0xc1, 0x2f, 0x34, 0x0b, 0x2f,
	0xc0, 0x74, 0x28, 0x3b, 0x8e, 0x95, 0x49, 0x32, 0x95, 0x2b, 0x01, 0x42, 0x9a, 0x25, 0xff, 0x84,
	0x40, 0x8d, 0x1d, 0x57, 0xa4, 0xfe, 0x6b, 0x98, 0x1f, 0x95, 0x79, 0xf1, 0x1a, 0x9c, 0x27, 0xf1,
	0xfa, 0xed, 0xc8, 0x94, 0xcb, 0x7f, 0x23, 0x58, 0x0c, 0x8c, 0xc4, 0x09, 0x98, 0x05, 0xcb, 0x72,
	0x6d, 0xda, 0xeb, 0xce, 0x0c, 0x5c, 0x36, 0xf8, 0x0d, 0x43, 0x34, 0xa9, 0xfb, 0x47, 0xfc, 0x29,
	0xbc, 0xce, 0x49, 0x50, 0xcf, 0xf0, 0x3a, 0x94, 0x65, 0x27, 0x95, 0xbf, 0x1f, 0x35, 0x36, 0x05,
	0xd3, 0x24, 0x9d, 0x96, 0x57, 0xf1, 0x0c, 0xcf, 0xe6, 0x1c, 0x2a, 0xcc, 0x56, 0x9f, 0x32, 0xfb,
	0x87, 0x0b, 0x1b, 0x88, 0xff, 0x10, 0xbc, 0x1d, 0x83, 0xa7, 0xa8, 0xc9, 0xe9, 0x44, 0x4d, 0x98,
	0x15, 0x05, 0x32, 0x38, 0x7e, 0xc6, 0xd8, 0xce, 0x24, 0xd9, 0x68, 0x2c, 0xc7, 0x20, 0xec, 0x07,
	0x11, 0x23, 0x81, 0xdd, 0x81, 0x6c, 0x5c, 0xdc, 0x18, 0x3c, 0x49, 0xc2, 0xd5, 0xa1, 0xc1, 0xf1,
	0x12, 0xcc, 0x84, 0x9f, 0xba, 0x7e, 0xdb, 0x4f, 0x87, 0x5e, 0x30, 0xcd, 0xc2, 0x1f, 0x01, 0xf6,
	0x88, 0x67, 0x34, 0xfd, 0xd6, 0x64, 0xf5, 0x61, 0x25, 0x9e, 0xca, 0xdf, 0x08, 0xc1, 0xf2, 0x01,
	0xad, 0x13, 0xc7, 0x1f, 0xf9, 0x34, 0x33, 0xe5, 0x20, 0x58, 0x95, 0x07, 0x7a, 0x65, 0xec, 0xa2,
	0x7a, 0xe5, 0x06, 0x4c, 0x70, 0xc7, 0x8e, 0x95, 0x19, 0x67, 0x54, 0x2e, 0xb3, 0xb3, 0x66, 0xad,
	0x4e, 0x7c, 0xff, 0x6c, 0x0e, 0xfd, 0xfb, 0x6c, 0x0e, 0xe5, 0x7f, 0x99, 0x80, 0x4b, 0xac, 0x11,
	0xf0, 0xcf, 0x08, 0x66, 0x06, 0x56, 0x32, 0x5e, 0x89, 0xbb, 0x0b, 0x03, 0x8f, 0x47, 0xf6, 0xfe,
	0xd9, 0x8c, 0x78, 0x0d, 0xe4, 0x95, 0x6f, 0x7e, 0xfd, 0xeb, 0xbb, 0xe4, 0x5d, 0xbc, 0xac, 0x0e,
	0x7c, 0x74, 0xd0, 0xfe, 0x57, 0x47, 0x6f, 0x17, 0xa9, 0x07, 0x8e, 0x75, 0x88, 0x7f, 0x44, 0x90,
	0x0a, 0xaf, 0x2f, 0x7c, 0xef, 0xac, 0xeb, 0x3b, 0x9b, 0x3b, 0x83, 0x85, 0x00, 0xab, 0x30, 0xb0,
	0x8b, 0x78, 0x21, 0x1e, 0x58, 0xfc, 0x0f, 0x02, 0x29, 0xfa, 0x15, 0xc4, 0x0f, 0x22, 0x50, 0xc4,
	0x5a, 0x97, 0xd9, 0xc2, 0x2b, 0x78, 0x10, 0xbc, 0x1e, 0x30, 0x5e, 0xab, 0xf8, 0xdd, 0x53, 0x78,
	0x8d, 0xdc, 0x8a, 0xf8, 0x69, 0x12, 0xe4, 0xd1, 0xef, 0x3d, 0x2e, 0x9e, 0x1b, 0x6b, 0xb0, 0xd3,
	0x4a, 0xaf, 0xe8, 0x45, 0xb0, 0x6e, 0x32, 0xd6, 0x9f, 0x63, 0xeb, 0xbc, 0xac, 0xd5, 0x83, 0xde,
	0xb6, 0x3c, 0x0c, 0x69, 0x53, 0xf5, 0xe0, 0xc4, 0xaa, 0x3c, 0xc4, 0xbf, 0x21, 0xb8, 0x15, 0xf5,
	0xee, 0xe2, 0xf7, 0x46, 0xf6, 0x63, 0xe4, 0x62, 0xca, 0xbe, 0x7f, 0x6e, 0x7b, 0x91, 0x8f, 0x77,
	0x58, 0x3e, 0xee, 0x61, 0x25, 0xba, 0xbb, 0x19, 0x33, 0xaa, 0x1e, 0x88, 0x6d, 0x70, 0xb8, 0xd6,
	0x78, 0x7e, 0x24, 0xa1, 0x17, 0x47, 0x12, 0xfa, 0xf3, 0x48, 0x42, 0x4f, 0x8e, 0xa5, 0xc4, 0x8b,
	0x63, 0x29, 0xf1, 0xfb, 0xb1, 0x94, 0x80, 0xeb, 0x0e, 0x19, 0x0a, 0xaa, 0x8c, 0x3e, 0xcb, 0x37,
	0x1c, 0xef, 0x8b, 0x4e, 0x5d, 0x31, 0xc9, 0x4e, 0x20, 0xdc, 0x5d, 0x87, 0x04, 0x83, 0x7f, 0xe5,
	0xff, 0xfd, 0xe8, 0x7e, 0xa7, 0xd3, 0xfa, 0x6b, 0xec, 0xbf, 0xc7, 0xca, 0xcb, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0xcd, 0x69, 0xe2, 0x58, 0x0d, 0x00, 0x00,
}

func (this *RewardAccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardAccountResponse)
	if !ok {
		that2, ok := that.(RewardAccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RewardProgramId != that1.RewardProgramId {
		return false
	}
	if !this.TotalRewardClaim.Equal(&that1.TotalRewardClaim) {
		return false
	}
	if this.ClaimStatus != that1.ClaimStatus {
		return false
	}
	if this.ClaimId != that1.ClaimId {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// RewardProgramByID returns a reward program matching the ID.
	RewardProgramByID(ctx context.Context, in *QueryRewardProgramByIDRequest, opts ...grpc.CallOption) (*QueryRewardProgramByIDResponse, error)
	// RewardPrograms returns a list of reward programs matching the query type.
	RewardPrograms(ctx context.Context, in *QueryRewardProgramsRequest, opts ...grpc.CallOption) (*QueryRewardProgramsResponse, error)
	// ClaimPeriodRewardDistributions returns a list of claim period reward distributions matching the claim_status.
	ClaimPeriodRewardDistributions(ctx context.Context, in *QueryClaimPeriodRewardDistributionsRequest, opts ...grpc.CallOption) (*QueryClaimPeriodRewardDistributionsResponse, error)
	// ClaimPeriodRewardDistributionsByID returns a claim period reward distribution matching the ID.
	ClaimPeriodRewardDistributionsByID(ctx context.Context, in *QueryClaimPeriodRewardDistributionsByIDRequest, opts ...grpc.CallOption) (*QueryClaimPeriodRewardDistributionsByIDResponse, error)
	// RewardDistributionsByAddress returns a list of reward claims belonging to the account and matching the claim
	// status.
	RewardDistributionsByAddress(ctx context.Context, in *QueryRewardDistributionsByAddressRequest, opts ...grpc.CallOption) (*QueryRewardDistributionsByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RewardProgramByID(ctx context.Context, in *QueryRewardProgramByIDRequest, opts ...grpc.CallOption) (*QueryRewardProgramByIDResponse, error) {
	out := new(QueryRewardProgramByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardProgramByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardPrograms(ctx context.Context, in *QueryRewardProgramsRequest, opts ...grpc.CallOption) (*QueryRewardProgramsResponse, error) {
	out := new(QueryRewardProgramsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimPeriodRewardDistributions(ctx context.Context, in *QueryClaimPeriodRewardDistributionsRequest, opts ...grpc.CallOption) (*QueryClaimPeriodRewardDistributionsResponse, error) {
	out := new(QueryClaimPeriodRewardDistributionsResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/ClaimPeriodRewardDistributions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimPeriodRewardDistributionsByID(ctx context.Context, in *QueryClaimPeriodRewardDistributionsByIDRequest, opts ...grpc.CallOption) (*QueryClaimPeriodRewardDistributionsByIDResponse, error) {
	out := new(QueryClaimPeriodRewardDistributionsByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/ClaimPeriodRewardDistributionsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardDistributionsByAddress(ctx context.Context, in *QueryRewardDistributionsByAddressRequest, opts ...grpc.CallOption) (*QueryRewardDistributionsByAddressResponse, error) {
	out := new(QueryRewardDistributionsByAddressResponse)
	err := c.cc.Invoke(ctx, "/provenance.reward.v1.Query/RewardDistributionsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// RewardProgramByID returns a reward program matching the ID.
	RewardProgramByID(context.Context, *QueryRewardProgramByIDRequest) (*QueryRewardProgramByIDResponse, error)
	// RewardPrograms returns a list of reward programs matching the query type.
	RewardPrograms(context.Context, *QueryRewardProgramsRequest) (*QueryRewardProgramsResponse, error)
	// ClaimPeriodRewardDistributions returns a list of claim period reward distributions matching the claim_status.
	ClaimPeriodRewardDistributions(context.Context, *QueryClaimPeriodRewardDistributionsRequest) (*QueryClaimPeriodRewardDistributionsResponse, error)
	// ClaimPeriodRewardDistributionsByID returns a claim period reward distribution matching the ID.
	ClaimPeriodRewardDistributionsByID(context.Context, *QueryClaimPeriodRewardDistributionsByIDRequest) (*QueryClaimPeriodRewardDistributionsByIDResponse, error)
	// RewardDistributionsByAddress returns a list of reward claims belonging to the account and matching the claim
	// status.
	RewardDistributionsByAddress(context.Context, *QueryRewardDistributionsByAddressRequest) (*QueryRewardDistributionsByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RewardProgramByID(ctx context.Context, req *QueryRewardProgramByIDRequest) (*QueryRewardProgramByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardProgramByID not implemented")
}
func (*UnimplementedQueryServer) RewardPrograms(ctx context.Context, req *QueryRewardProgramsRequest) (*QueryRewardProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardPrograms not implemented")
}
func (*UnimplementedQueryServer) ClaimPeriodRewardDistributions(ctx context.Context, req *QueryClaimPeriodRewardDistributionsRequest) (*QueryClaimPeriodRewardDistributionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimPeriodRewardDistributions not implemented")
}
func (*UnimplementedQueryServer) ClaimPeriodRewardDistributionsByID(ctx context.Context, req *QueryClaimPeriodRewardDistributionsByIDRequest) (*QueryClaimPeriodRewardDistributionsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimPeriodRewardDistributionsByID not implemented")
}
func (*UnimplementedQueryServer) RewardDistributionsByAddress(ctx context.Context, req *QueryRewardDistributionsByAddressRequest) (*QueryRewardDistributionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardDistributionsByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RewardProgramByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardProgramByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardProgramByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardProgramByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardProgramByID(ctx, req.(*QueryRewardProgramByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardPrograms(ctx, req.(*QueryRewardProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimPeriodRewardDistributions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimPeriodRewardDistributionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimPeriodRewardDistributions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/ClaimPeriodRewardDistributions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimPeriodRewardDistributions(ctx, req.(*QueryClaimPeriodRewardDistributionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimPeriodRewardDistributionsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimPeriodRewardDistributionsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimPeriodRewardDistributionsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/ClaimPeriodRewardDistributionsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimPeriodRewardDistributionsByID(ctx, req.(*QueryClaimPeriodRewardDistributionsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardDistributionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardDistributionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardDistributionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.reward.v1.Query/RewardDistributionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardDistributionsByAddress(ctx, req.(*QueryRewardDistributionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.reward.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RewardProgramByID",
			Handler:    _Query_RewardProgramByID_Handler,
		},
		{
			MethodName: "RewardPrograms",
			Handler:    _Query_RewardPrograms_Handler,
		},
		{
			MethodName: "ClaimPeriodRewardDistributions",
			Handler:    _Query_ClaimPeriodRewardDistributions_Handler,
		},
		{
			MethodName: "ClaimPeriodRewardDistributionsByID",
			Handler:    _Query_ClaimPeriodRewardDistributionsByID_Handler,
		},
		{
			MethodName: "RewardDistributionsByAddress",
			Handler:    _Query_RewardDistributionsByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/reward/v1/query.proto",
}

func (m *QueryRewardProgramByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardProgramByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardProgram != nil {
		{
			size, err := m.RewardProgram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for iNdEx := len(m.RewardPrograms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPrograms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimPeriodRewardDistributionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimPeriodRewardDistributionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimPeriodRewardDistributionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimPeriodRewardDistributionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimPeriodRewardDistributionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimPeriodRewardDistributionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ClaimPeriodRewardDistributions) > 0 {
		for iNdEx := len(m.ClaimPeriodRewardDistributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimPeriodRewardDistributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimPeriodId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClaimPeriodId))
		i--
		dAtA[i] = 0x10
	}
	if m.RewardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RewardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimPeriodRewardDistribution != nil {
		{
			size, err := m.ClaimPeriodRewardDistribution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardDistributionsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardDistributionsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardDistributionsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.ClaimStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardDistributionsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardDistributionsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardDistributionsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RewardAccountState) > 0 {
		for iNdEx := len(m.RewardAccountState) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAccountState[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClaimId))
		i--
		dAtA[i] = 0x20
	}
	if m.ClaimStatus != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ClaimStatus))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.TotalRewardClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RewardProgramId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RewardProgramId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRewardProgramByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryRewardProgramByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgram != nil {
		l = m.RewardProgram.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryType != 0 {
		n += 1 + sovQuery(uint64(m.QueryType))
	}
	return n
}

func (m *QueryRewardProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardPrograms) > 0 {
		for _, e := range m.RewardPrograms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryClaimPeriodRewardDistributionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimPeriodRewardDistributionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimPeriodRewardDistributions) > 0 {
		for _, e := range m.ClaimPeriodRewardDistributions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimPeriodRewardDistributionsByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardId != 0 {
		n += 1 + sovQuery(uint64(m.RewardId))
	}
	if m.ClaimPeriodId != 0 {
		n += 1 + sovQuery(uint64(m.ClaimPeriodId))
	}
	return n
}

func (m *QueryClaimPeriodRewardDistributionsByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimPeriodRewardDistribution != nil {
		l = m.ClaimPeriodRewardDistribution.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardDistributionsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ClaimStatus != 0 {
		n += 1 + sovQuery(uint64(m.ClaimStatus))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardDistributionsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RewardAccountState) > 0 {
		for _, e := range m.RewardAccountState {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardProgramId != 0 {
		n += 1 + sovQuery(uint64(m.RewardProgramId))
	}
	l = m.TotalRewardClaim.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.ClaimStatus != 0 {
		n += 1 + sovQuery(uint64(m.ClaimStatus))
	}
	if m.ClaimId != 0 {
		n += 1 + sovQuery(uint64(m.ClaimId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRewardProgramByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardProgramByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardProgram == nil {
				m.RewardProgram = &RewardProgram{}
			}
			if err := m.RewardProgram.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryType", wireType)
			}
			m.QueryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryType |= QueryRewardProgramsRequest_QueryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPrograms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPrograms = append(m.RewardPrograms, RewardProgram{})
			if err := m.RewardPrograms[len(m.RewardPrograms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimPeriodRewardDistributionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimPeriodRewardDistributionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodRewardDistributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimPeriodRewardDistributions = append(m.ClaimPeriodRewardDistributions, ClaimPeriodRewardDistribution{})
			if err := m.ClaimPeriodRewardDistributions[len(m.ClaimPeriodRewardDistributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimPeriodRewardDistributionsByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodId", wireType)
			}
			m.ClaimPeriodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriodId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimPeriodRewardDistributionsByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimPeriodRewardDistributionsByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriodRewardDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimPeriodRewardDistribution == nil {
				m.ClaimPeriodRewardDistribution = &ClaimPeriodRewardDistribution{}
			}
			if err := m.ClaimPeriodRewardDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardDistributionsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardDistributionsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardDistributionsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= RewardAccountState_ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardDistributionsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardDistributionsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardDistributionsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAccountState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAccountState = append(m.RewardAccountState, RewardAccountResponse{})
			if err := m.RewardAccountState[len(m.RewardAccountState)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardProgramId", wireType)
			}
			m.RewardProgramId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardProgramId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewardClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalRewardClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStatus", wireType)
			}
			m.ClaimStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStatus |= RewardAccountState_ClaimStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimId", wireType)
			}
			m.ClaimId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
