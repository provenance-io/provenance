// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/flatfees/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParamsRequest is the request for the UpdateParams governance endpoint.
type MsgUpdateParamsRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params are the new param values to set.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParamsRequest) Reset()         { *m = MsgUpdateParamsRequest{} }
func (m *MsgUpdateParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsRequest) ProtoMessage()    {}
func (*MsgUpdateParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{0}
}
func (m *MsgUpdateParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsRequest.Merge(m, src)
}
func (m *MsgUpdateParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsRequest proto.InternalMessageInfo

func (m *MsgUpdateParamsRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParamsRequest) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the response for the UpdateParams governance endpoint.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUpdateConversionFactorRequest is the request for the UpdateConversionFactor governance endpoint.
type MsgUpdateConversionFactorRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// conversion_factor is the new conversion factor that should be used.
	ConversionFactor ConversionFactor `protobuf:"bytes,2,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor"`
}

func (m *MsgUpdateConversionFactorRequest) Reset()         { *m = MsgUpdateConversionFactorRequest{} }
func (m *MsgUpdateConversionFactorRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateConversionFactorRequest) ProtoMessage()    {}
func (*MsgUpdateConversionFactorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{2}
}
func (m *MsgUpdateConversionFactorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateConversionFactorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateConversionFactorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateConversionFactorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateConversionFactorRequest.Merge(m, src)
}
func (m *MsgUpdateConversionFactorRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateConversionFactorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateConversionFactorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateConversionFactorRequest proto.InternalMessageInfo

func (m *MsgUpdateConversionFactorRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateConversionFactorRequest) GetConversionFactor() ConversionFactor {
	if m != nil {
		return m.ConversionFactor
	}
	return ConversionFactor{}
}

// MsgUpdateConversionFactorResponse is the response for the UpdateConversionFactor governance endpoint.
type MsgUpdateConversionFactorResponse struct {
}

func (m *MsgUpdateConversionFactorResponse) Reset()         { *m = MsgUpdateConversionFactorResponse{} }
func (m *MsgUpdateConversionFactorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateConversionFactorResponse) ProtoMessage()    {}
func (*MsgUpdateConversionFactorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{3}
}
func (m *MsgUpdateConversionFactorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateConversionFactorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateConversionFactorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateConversionFactorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateConversionFactorResponse.Merge(m, src)
}
func (m *MsgUpdateConversionFactorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateConversionFactorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateConversionFactorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateConversionFactorResponse proto.InternalMessageInfo

// MsgUpdateMsgFeesRequest is the request for the UpdateMsgFees governance endpoint.
type MsgUpdateMsgFeesRequest struct {
	// authority should be the governance module account address.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// to_set is the list of msg fees to create and/or update.
	ToSet []*MsgFee `protobuf:"bytes,2,rep,name=to_set,json=toSet,proto3" json:"to_set,omitempty"`
	// to_unset is the list of msg-type-urls that should have their msg fee entries
	// deleted (they'll go back to using the default cost).
	ToUnset []string `protobuf:"bytes,3,rep,name=to_unset,json=toUnset,proto3" json:"to_unset,omitempty"`
}

func (m *MsgUpdateMsgFeesRequest) Reset()         { *m = MsgUpdateMsgFeesRequest{} }
func (m *MsgUpdateMsgFeesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMsgFeesRequest) ProtoMessage()    {}
func (*MsgUpdateMsgFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{4}
}
func (m *MsgUpdateMsgFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMsgFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMsgFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMsgFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMsgFeesRequest.Merge(m, src)
}
func (m *MsgUpdateMsgFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMsgFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMsgFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMsgFeesRequest proto.InternalMessageInfo

func (m *MsgUpdateMsgFeesRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateMsgFeesRequest) GetToSet() []*MsgFee {
	if m != nil {
		return m.ToSet
	}
	return nil
}

func (m *MsgUpdateMsgFeesRequest) GetToUnset() []string {
	if m != nil {
		return m.ToUnset
	}
	return nil
}

// MsgUpdateMsgFeesResponse is the response for the UpdateMsgFees governance endpoint.
type MsgUpdateMsgFeesResponse struct {
}

func (m *MsgUpdateMsgFeesResponse) Reset()         { *m = MsgUpdateMsgFeesResponse{} }
func (m *MsgUpdateMsgFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMsgFeesResponse) ProtoMessage()    {}
func (*MsgUpdateMsgFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2275393a2cb8688a, []int{5}
}
func (m *MsgUpdateMsgFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMsgFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMsgFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMsgFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMsgFeesResponse.Merge(m, src)
}
func (m *MsgUpdateMsgFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMsgFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMsgFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMsgFeesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParamsRequest)(nil), "provenance.flatfees.v1.MsgUpdateParamsRequest")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "provenance.flatfees.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpdateConversionFactorRequest)(nil), "provenance.flatfees.v1.MsgUpdateConversionFactorRequest")
	proto.RegisterType((*MsgUpdateConversionFactorResponse)(nil), "provenance.flatfees.v1.MsgUpdateConversionFactorResponse")
	proto.RegisterType((*MsgUpdateMsgFeesRequest)(nil), "provenance.flatfees.v1.MsgUpdateMsgFeesRequest")
	proto.RegisterType((*MsgUpdateMsgFeesResponse)(nil), "provenance.flatfees.v1.MsgUpdateMsgFeesResponse")
}

func init() { proto.RegisterFile("provenance/flatfees/v1/tx.proto", fileDescriptor_2275393a2cb8688a) }

var fileDescriptor_2275393a2cb8688a = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x36, 0x34, 0x90, 0xe5, 0x47, 0xb0, 0xaa, 0x52, 0xc7, 0x07, 0xd7, 0x04, 0x21, 0x45,
	0x95, 0x6a, 0xd3, 0xf2, 0x23, 0x40, 0x5c, 0x08, 0x52, 0x6f, 0x91, 0x2a, 0x57, 0xbd, 0xc0, 0x21,
	0x72, 0x9d, 0xcd, 0xd6, 0x02, 0x7b, 0xcc, 0xee, 0x24, 0x6a, 0x6f, 0xc0, 0x1d, 0x89, 0x27, 0xe0,
	0x19, 0x2a, 0xc1, 0x3b, 0xd0, 0x63, 0xc5, 0x89, 0x13, 0x42, 0xc9, 0xa1, 0xaf, 0x81, 0xe2, 0x35,
	0x71, 0xda, 0xfc, 0xb4, 0xa2, 0x37, 0x8f, 0xe7, 0x9b, 0xef, 0x67, 0x77, 0xb4, 0x74, 0x25, 0x91,
	0xd0, 0xe3, 0xb1, 0x1f, 0x07, 0xdc, 0xed, 0xbc, 0xf3, 0xb1, 0xc3, 0xb9, 0x72, 0x7b, 0xeb, 0x2e,
	0xee, 0x3b, 0x89, 0x04, 0x04, 0x56, 0xc9, 0x01, 0xce, 0x3f, 0x80, 0xd3, 0x5b, 0x37, 0x97, 0x04,
	0x08, 0x48, 0x21, 0xee, 0xf0, 0x4b, 0xa3, 0xcd, 0x6a, 0x00, 0x2a, 0x02, 0xd5, 0xd2, 0x0d, 0x5d,
	0x64, 0xad, 0x65, 0x5d, 0xb9, 0x91, 0x12, 0x43, 0x81, 0x48, 0x89, 0xac, 0x71, 0x7f, 0x86, 0x85,
	0x91, 0x5a, 0x0a, 0xab, 0x7d, 0x25, 0xb4, 0xd2, 0x54, 0x62, 0x27, 0x69, 0xfb, 0xc8, 0xb7, 0x7c,
	0xe9, 0x47, 0xca, 0xe3, 0xef, 0xbb, 0x5c, 0x21, 0x7b, 0x42, 0xcb, 0x7e, 0x17, 0xf7, 0x40, 0x86,
	0x78, 0x60, 0x10, 0x9b, 0xd4, 0xcb, 0x0d, 0xe3, 0xe7, 0xf7, 0xb5, 0xa5, 0x4c, 0xff, 0x65, 0xbb,
	0x2d, 0xb9, 0x52, 0xdb, 0x28, 0xc3, 0x58, 0x78, 0x39, 0x94, 0xbd, 0xa0, 0xa5, 0x24, 0x25, 0x32,
	0x16, 0x6c, 0x52, 0xbf, 0xbe, 0x61, 0x39, 0xd3, 0xc3, 0x3a, 0x5a, 0xae, 0x71, 0xe5, 0xe8, 0xf7,
	0x4a, 0xc1, 0xcb, 0x66, 0x9e, 0xdf, 0xfa, 0x74, 0x72, 0xb8, 0x9a, 0xb3, 0xd5, 0xaa, 0x74, 0x79,
	0xc2, 0x9f, 0x4a, 0x20, 0x56, 0xbc, 0xf6, 0x83, 0x50, 0x7b, 0xd4, 0x7b, 0x05, 0x71, 0x8f, 0x4b,
	0x15, 0x42, 0xbc, 0xe9, 0x07, 0x08, 0xf2, 0xb2, 0x29, 0xde, 0xd0, 0x3b, 0xc1, 0x88, 0xb2, 0xd5,
	0x49, 0x39, 0xb3, 0x40, 0xf5, 0x59, 0x81, 0xce, 0x7a, 0xc8, 0xa2, 0xdd, 0x0e, 0xce, 0xfc, 0x9f,
	0x08, 0x79, 0x8f, 0xde, 0x9d, 0x13, 0x24, 0x8b, 0xfb, 0x8d, 0x8c, 0x1d, 0x45, 0x53, 0x89, 0x4d,
	0xce, 0x2f, 0x7d, 0x57, 0x8f, 0x69, 0x09, 0xa1, 0xa5, 0x38, 0x1a, 0x0b, 0x76, 0x71, 0xde, 0x5d,
	0x69, 0x3d, 0x6f, 0x11, 0x61, 0x9b, 0x23, 0xab, 0xd2, 0x6b, 0x08, 0xad, 0x6e, 0x3c, 0x1c, 0x2c,
	0xda, 0xc5, 0x7a, 0xd9, 0xbb, 0x8a, 0xb0, 0x33, 0x2c, 0x27, 0xa2, 0x99, 0xd4, 0x98, 0x34, 0xad,
	0x13, 0x6d, 0x7c, 0x2c, 0xd2, 0x62, 0x53, 0x09, 0x06, 0xf4, 0xc6, 0xf8, 0x05, 0x33, 0x67, 0x8e,
	0x8b, 0x29, 0x9b, 0x6a, 0xba, 0x17, 0xc6, 0x6b, 0x61, 0xf6, 0x99, 0xd0, 0xca, 0xf4, 0xd3, 0x66,
	0x4f, 0xcf, 0xe5, 0x9a, 0xb1, 0x69, 0xe6, 0xb3, 0xff, 0x98, 0xcc, 0xfc, 0x48, 0x7a, 0xf3, 0xd4,
	0x09, 0xb1, 0xf3, 0x13, 0x9d, 0x5e, 0x00, 0xf3, 0xc1, 0xc5, 0x07, 0xb4, 0xa6, 0xb9, 0xf8, 0xe1,
	0xe4, 0x70, 0x95, 0x34, 0xde, 0x1e, 0xf5, 0x2d, 0x72, 0xdc, 0xb7, 0xc8, 0x9f, 0xbe, 0x45, 0xbe,
	0x0c, 0xac, 0xc2, 0xf1, 0xc0, 0x2a, 0xfc, 0x1a, 0x58, 0x05, 0x5a, 0x0d, 0x61, 0x06, 0xe9, 0x16,
	0x79, 0xfd, 0x48, 0x84, 0xb8, 0xd7, 0xdd, 0x75, 0x02, 0x88, 0xdc, 0x1c, 0xb4, 0x16, 0xc2, 0x58,
	0xe5, 0xee, 0xe7, 0x2f, 0x0f, 0x1e, 0x24, 0x5c, 0xed, 0x96, 0xd2, 0x47, 0xe7, 0xe1, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x67, 0xb3, 0x3b, 0x31, 0x20, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams is a governance endpoint for updating the x/flatfees params.
	UpdateParams(ctx context.Context, in *MsgUpdateParamsRequest, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpdateConversionFactor is a governance endpoint for updating just the conversion factor in the x/flatfees params.
	UpdateConversionFactor(ctx context.Context, in *MsgUpdateConversionFactorRequest, opts ...grpc.CallOption) (*MsgUpdateConversionFactorResponse, error)
	// UpdateMsgFees is a governance endpoint for updating fees for specific msgs.
	UpdateMsgFees(ctx context.Context, in *MsgUpdateMsgFeesRequest, opts ...grpc.CallOption) (*MsgUpdateMsgFeesResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParamsRequest, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateConversionFactor(ctx context.Context, in *MsgUpdateConversionFactorRequest, opts ...grpc.CallOption) (*MsgUpdateConversionFactorResponse, error) {
	out := new(MsgUpdateConversionFactorResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Msg/UpdateConversionFactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMsgFees(ctx context.Context, in *MsgUpdateMsgFeesRequest, opts ...grpc.CallOption) (*MsgUpdateMsgFeesResponse, error) {
	out := new(MsgUpdateMsgFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Msg/UpdateMsgFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams is a governance endpoint for updating the x/flatfees params.
	UpdateParams(context.Context, *MsgUpdateParamsRequest) (*MsgUpdateParamsResponse, error)
	// UpdateConversionFactor is a governance endpoint for updating just the conversion factor in the x/flatfees params.
	UpdateConversionFactor(context.Context, *MsgUpdateConversionFactorRequest) (*MsgUpdateConversionFactorResponse, error)
	// UpdateMsgFees is a governance endpoint for updating fees for specific msgs.
	UpdateMsgFees(context.Context, *MsgUpdateMsgFeesRequest) (*MsgUpdateMsgFeesResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParamsRequest) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpdateConversionFactor(ctx context.Context, req *MsgUpdateConversionFactorRequest) (*MsgUpdateConversionFactorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversionFactor not implemented")
}
func (*UnimplementedMsgServer) UpdateMsgFees(ctx context.Context, req *MsgUpdateMsgFeesRequest) (*MsgUpdateMsgFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMsgFees not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateConversionFactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateConversionFactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateConversionFactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Msg/UpdateConversionFactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateConversionFactor(ctx, req.(*MsgUpdateConversionFactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMsgFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMsgFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMsgFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Msg/UpdateMsgFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMsgFees(ctx, req.(*MsgUpdateMsgFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.flatfees.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateConversionFactor",
			Handler:    _Msg_UpdateConversionFactor_Handler,
		},
		{
			MethodName: "UpdateMsgFees",
			Handler:    _Msg_UpdateMsgFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/flatfees/v1/tx.proto",
}

func (m *MsgUpdateParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateConversionFactorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateConversionFactorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateConversionFactorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConversionFactor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateConversionFactorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateConversionFactorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateConversionFactorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMsgFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMsgFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMsgFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToUnset) > 0 {
		for iNdEx := len(m.ToUnset) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ToUnset[iNdEx])
			copy(dAtA[i:], m.ToUnset[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ToUnset[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ToSet) > 0 {
		for iNdEx := len(m.ToSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ToSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMsgFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMsgFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMsgFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateConversionFactorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ConversionFactor.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateConversionFactorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMsgFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ToSet) > 0 {
		for _, e := range m.ToSet {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ToUnset) > 0 {
		for _, s := range m.ToUnset {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateMsgFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateConversionFactorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateConversionFactorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateConversionFactorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionFactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateConversionFactorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateConversionFactorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateConversionFactorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMsgFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMsgFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMsgFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToSet = append(m.ToSet, &MsgFee{})
			if err := m.ToSet[len(m.ToSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUnset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUnset = append(m.ToUnset, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMsgFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMsgFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMsgFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
