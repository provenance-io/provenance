// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/flatfees/v1/flatfees.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the flatfees module.
type Params struct {
	// default_cost is the amount a msg costs when there is no specific msg-fee defined for it.
	// The denom used here should be the same as used to define the specific msg costs.
	// The recommended denom is musd.
	DefaultCost types.Coin `protobuf:"bytes,1,opt,name=default_cost,json=defaultCost,proto3" json:"default_cost"`
	// conversion_factor is the ratio used to convert the msg-fees from their defined amounts into the fee denomination.
	// The definition_amount should have the same denom as the default cost.
	// The denom of the converted amount should be the denom that fees are paid in, e.g. nhash.
	ConversionFactor ConversionFactor `protobuf:"bytes,3,opt,name=conversion_factor,json=conversionFactor,proto3" json:"conversion_factor"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f072ef45f916c39, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDefaultCost() types.Coin {
	if m != nil {
		return m.DefaultCost
	}
	return types.Coin{}
}

func (m *Params) GetConversionFactor() ConversionFactor {
	if m != nil {
		return m.ConversionFactor
	}
	return ConversionFactor{}
}

// ConversionFactor equates the values of two coins in different denominations.
// It is used to determine how much of the fee denomination is due.
// actual cost = defined cost * converted_amount / definition_amount (truncated to an integer).
type ConversionFactor struct {
	// definition_amount is an amount (in the denomination used to define fees) that is equal to the converted_amount.
	// This cannot have an amount of zero.
	// If this has the same denomination as the converted_amount, then the amounts must also be equal.
	// The denom of this field should be the same as the default cost, e.g. musd.
	DefinitionAmount types.Coin `protobuf:"bytes,1,opt,name=definition_amount,json=definitionAmount,proto3" json:"definition_amount"`
	// converted_amount is an amount in the fee denomination equal to the definition_amount.
	// If this is zero, all msgs will be free.
	// If this has the same denomination as the definition_amount, then the amounts must also be equal.
	// The denom of this field should be the fee denom, e.g. nhash.
	ConvertedAmount types.Coin `protobuf:"bytes,2,opt,name=converted_amount,json=convertedAmount,proto3" json:"converted_amount"`
}

func (m *ConversionFactor) Reset()      { *m = ConversionFactor{} }
func (*ConversionFactor) ProtoMessage() {}
func (*ConversionFactor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f072ef45f916c39, []int{1}
}
func (m *ConversionFactor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversionFactor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversionFactor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversionFactor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversionFactor.Merge(m, src)
}
func (m *ConversionFactor) XXX_Size() int {
	return m.Size()
}
func (m *ConversionFactor) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversionFactor.DiscardUnknown(m)
}

var xxx_messageInfo_ConversionFactor proto.InternalMessageInfo

func (m *ConversionFactor) GetDefinitionAmount() types.Coin {
	if m != nil {
		return m.DefinitionAmount
	}
	return types.Coin{}
}

func (m *ConversionFactor) GetConvertedAmount() types.Coin {
	if m != nil {
		return m.ConvertedAmount
	}
	return types.Coin{}
}

// MsgFee defines the cost to use a specific message type.
type MsgFee struct {
	// msg_type_url is the type-url of the message, e.g. "/cosmos.bank.v1beta1.MsgSend".
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	// cost is the Tx fee required for this msg_type_url.
	// It should have the same denomination as the default cost and as the conversion factor's
	// definition_amount, e.g. musdc. Any other denomination will be charged as defined.
	Cost github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=cost,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"cost"`
}

func (m *MsgFee) Reset()      { *m = MsgFee{} }
func (*MsgFee) ProtoMessage() {}
func (*MsgFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f072ef45f916c39, []int{2}
}
func (m *MsgFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFee.Merge(m, src)
}
func (m *MsgFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFee proto.InternalMessageInfo

func (m *MsgFee) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *MsgFee) GetCost() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Cost
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "provenance.flatfees.v1.Params")
	proto.RegisterType((*ConversionFactor)(nil), "provenance.flatfees.v1.ConversionFactor")
	proto.RegisterType((*MsgFee)(nil), "provenance.flatfees.v1.MsgFee")
}

func init() {
	proto.RegisterFile("provenance/flatfees/v1/flatfees.proto", fileDescriptor_5f072ef45f916c39)
}

var fileDescriptor_5f072ef45f916c39 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xcf, 0xb4, 0xcb, 0x82, 0xd3, 0x05, 0x77, 0x83, 0x48, 0xdb, 0x43, 0x76, 0x29, 0x08, 0x4b,
	0xa1, 0x33, 0xac, 0x7a, 0xea, 0xcd, 0x5d, 0xd8, 0x83, 0x28, 0x94, 0x45, 0x2f, 0x7a, 0x08, 0xb3,
	0x93, 0x49, 0x1c, 0x9a, 0xcc, 0x0b, 0x99, 0x49, 0x70, 0xbf, 0x85, 0x47, 0xf1, 0xe4, 0x4d, 0xf1,
	0x62, 0xf1, 0x53, 0xf4, 0xd8, 0xa3, 0x27, 0x95, 0xdd, 0x43, 0xfd, 0x18, 0x92, 0x49, 0x4c, 0x4a,
	0xd1, 0xd2, 0x4b, 0xf2, 0x66, 0xe6, 0xf7, 0xef, 0xf1, 0x1e, 0x7e, 0x90, 0x66, 0x50, 0x08, 0xc5,
	0x14, 0x17, 0x34, 0x8c, 0x99, 0x09, 0x85, 0xd0, 0xb4, 0x98, 0x34, 0x35, 0x49, 0x33, 0x30, 0xe0,
	0xde, 0x6f, 0x61, 0xa4, 0x79, 0x2a, 0x26, 0xfb, 0x03, 0x96, 0x48, 0x05, 0xd4, 0x7e, 0x2b, 0xe8,
	0xfe, 0xbd, 0x08, 0x22, 0xb0, 0x25, 0x2d, 0xab, 0xfa, 0xd6, 0xe3, 0xa0, 0x13, 0xd0, 0x74, 0xc9,
	0xb4, 0xa0, 0xc5, 0x64, 0x29, 0x0c, 0x9b, 0x50, 0x0e, 0x52, 0x55, 0xef, 0x07, 0x5f, 0x11, 0xee,
	0x9e, 0xb0, 0x8c, 0x25, 0xda, 0x9d, 0xe2, 0x5e, 0x20, 0x42, 0x96, 0xc7, 0xc6, 0xe7, 0xa0, 0xcd,
	0x2e, 0x1a, 0xa1, 0xf1, 0xce, 0xc3, 0x3d, 0x52, 0x29, 0x90, 0x52, 0x81, 0xd4, 0x0a, 0x64, 0x06,
	0x52, 0x4d, 0x3b, 0xe7, 0x3f, 0x86, 0xce, 0x62, 0xa7, 0x26, 0xcd, 0x40, 0x1b, 0xf7, 0x35, 0x1e,
	0x70, 0x50, 0x85, 0xc8, 0xb4, 0x04, 0xe5, 0x87, 0x8c, 0x1b, 0xc8, 0x76, 0xb7, 0xad, 0xd0, 0x98,
	0xfc, 0xbb, 0x17, 0x32, 0x6b, 0x08, 0x73, 0x8b, 0xaf, 0x75, 0xfb, 0xfc, 0xda, 0xfd, 0x71, 0xe7,
	0xf7, 0xc7, 0xa1, 0x73, 0xf0, 0x0d, 0xe1, 0xfe, 0x75, 0x8a, 0xfb, 0x0c, 0x0f, 0x02, 0x11, 0x4a,
	0x25, 0x4d, 0xe9, 0xcb, 0x12, 0xc8, 0xd5, 0xad, 0x1b, 0xe8, 0xb7, 0xcc, 0x27, 0x96, 0xe8, 0x3e,
	0xc5, 0xb5, 0xb9, 0x11, 0xc1, 0x5f, 0xb1, 0xad, 0xdb, 0x89, 0xdd, 0x6d, 0x88, 0x95, 0xd6, 0x71,
	0xe7, 0x7d, 0x19, 0xfa, 0x13, 0xc2, 0xdd, 0xe7, 0x3a, 0x9a, 0x0b, 0xe1, 0x8e, 0x70, 0x2f, 0xd1,
	0x91, 0x6f, 0x56, 0xa9, 0xf0, 0xf3, 0x2c, 0xb6, 0x29, 0xef, 0x2c, 0x70, 0xa2, 0xa3, 0x17, 0xab,
	0x54, 0xbc, 0xcc, 0x62, 0x37, 0xc7, 0x1d, 0x3b, 0x80, 0xad, 0xd1, 0xf6, 0xcd, 0x96, 0xf3, 0xd2,
	0xf2, 0xcb, 0xcf, 0xe1, 0x38, 0x92, 0xe6, 0x4d, 0xbe, 0x24, 0x1c, 0x12, 0x5a, 0xcf, 0xbb, 0xfa,
	0x1d, 0xe9, 0xe0, 0x94, 0x96, 0x4e, 0xda, 0x12, 0xf4, 0x87, 0xcb, 0xb3, 0xc3, 0x5e, 0x2c, 0x22,
	0xc6, 0x57, 0x7e, 0xb9, 0x04, 0xfa, 0xf3, 0xe5, 0xd9, 0x21, 0x5a, 0x58, 0xbb, 0x2a, 0xe9, 0xf4,
	0xf4, 0x7c, 0xed, 0xa1, 0x8b, 0xb5, 0x87, 0x7e, 0xad, 0x3d, 0xf4, 0x6e, 0xe3, 0x39, 0x17, 0x1b,
	0xcf, 0xf9, 0xbe, 0xf1, 0x1c, 0xbc, 0x27, 0xe1, 0x3f, 0x23, 0x3c, 0x41, 0xaf, 0x1e, 0x5f, 0x89,
	0xd0, 0x82, 0x8e, 0x24, 0x5c, 0x39, 0xd1, 0xb7, 0xed, 0xaa, 0xdb, 0x50, 0xcb, 0xae, 0x5d, 0xc2,
	0x47, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xe5, 0xea, 0x3d, 0x0e, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConversionFactor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlatfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.DefaultCost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlatfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConversionFactor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversionFactor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversionFactor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ConvertedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlatfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DefinitionAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFlatfees(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cost) > 0 {
		for iNdEx := len(m.Cost) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cost[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlatfees(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintFlatfees(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlatfees(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlatfees(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DefaultCost.Size()
	n += 1 + l + sovFlatfees(uint64(l))
	l = m.ConversionFactor.Size()
	n += 1 + l + sovFlatfees(uint64(l))
	return n
}

func (m *ConversionFactor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DefinitionAmount.Size()
	n += 1 + l + sovFlatfees(uint64(l))
	l = m.ConvertedAmount.Size()
	n += 1 + l + sovFlatfees(uint64(l))
	return n
}

func (m *MsgFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovFlatfees(uint64(l))
	}
	if len(m.Cost) > 0 {
		for _, e := range m.Cost {
			l = e.Size()
			n += 1 + l + sovFlatfees(uint64(l))
		}
	}
	return n
}

func sovFlatfees(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlatfees(x uint64) (n int) {
	return sovFlatfees(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlatfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionFactor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlatfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlatfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversionFactor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlatfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversionFactor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversionFactor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefinitionAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefinitionAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConvertedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlatfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlatfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlatfees
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlatfees
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlatfees
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cost = append(m.Cost, types.Coin{})
			if err := m.Cost[len(m.Cost)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlatfees(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlatfees
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlatfees(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlatfees
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlatfees
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlatfees
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlatfees
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlatfees
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlatfees        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlatfees          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlatfees = fmt.Errorf("proto: unexpected end of group")
)
