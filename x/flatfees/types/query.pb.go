// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/flatfees/v1/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Params query.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Params query.
type QueryParamsResponse struct {
	// params defines the parameters of the x/flatfees module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAllMsgFeesRequest is the request type for the AllMsgFees query.
type QueryAllMsgFeesRequest struct {
	// do_not_convert, if true, will return the fees as defined (instead of as converted).
	DoNotConvert bool `protobuf:"varint,1,opt,name=do_not_convert,json=doNotConvert,proto3" json:"do_not_convert,omitempty"`
	// pagination defines optional pagination parameters for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMsgFeesRequest) Reset()         { *m = QueryAllMsgFeesRequest{} }
func (m *QueryAllMsgFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMsgFeesRequest) ProtoMessage()    {}
func (*QueryAllMsgFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{2}
}
func (m *QueryAllMsgFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMsgFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMsgFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMsgFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMsgFeesRequest.Merge(m, src)
}
func (m *QueryAllMsgFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMsgFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMsgFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMsgFeesRequest proto.InternalMessageInfo

func (m *QueryAllMsgFeesRequest) GetDoNotConvert() bool {
	if m != nil {
		return m.DoNotConvert
	}
	return false
}

func (m *QueryAllMsgFeesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllMsgFeesResponse is the response type for the AllMsgFees query.
type QueryAllMsgFeesResponse struct {
	// msg_fees contains the requested information.
	MsgFees []*MsgFee `protobuf:"bytes,1,rep,name=msg_fees,json=msgFees,proto3" json:"msg_fees,omitempty"`
	// default_cost is the amount a msg costs when there is no specific msg-fee defined for it.
	DefaultCost types.Coin `protobuf:"bytes,2,opt,name=default_cost,json=defaultCost,proto3" json:"default_cost"`
	// pagination defines the pagination parameters of the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMsgFeesResponse) Reset()         { *m = QueryAllMsgFeesResponse{} }
func (m *QueryAllMsgFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMsgFeesResponse) ProtoMessage()    {}
func (*QueryAllMsgFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{3}
}
func (m *QueryAllMsgFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMsgFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMsgFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMsgFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMsgFeesResponse.Merge(m, src)
}
func (m *QueryAllMsgFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMsgFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMsgFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMsgFeesResponse proto.InternalMessageInfo

func (m *QueryAllMsgFeesResponse) GetMsgFees() []*MsgFee {
	if m != nil {
		return m.MsgFees
	}
	return nil
}

func (m *QueryAllMsgFeesResponse) GetDefaultCost() types.Coin {
	if m != nil {
		return m.DefaultCost
	}
	return types.Coin{}
}

func (m *QueryAllMsgFeesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryMsgFeeRequest is the request type for the MsgFee query.
type QueryMsgFeeRequest struct {
	// msg_type_url is the is the type-url of the message, e.g. "/cosmos.bank.v1beta1.MsgSend".
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	// do_not_convert, if true, will return the fees as defined (instead of as converted).
	DoNotConvert bool `protobuf:"varint,2,opt,name=do_not_convert,json=doNotConvert,proto3" json:"do_not_convert,omitempty"`
}

func (m *QueryMsgFeeRequest) Reset()         { *m = QueryMsgFeeRequest{} }
func (m *QueryMsgFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMsgFeeRequest) ProtoMessage()    {}
func (*QueryMsgFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{4}
}
func (m *QueryMsgFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMsgFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMsgFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMsgFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMsgFeeRequest.Merge(m, src)
}
func (m *QueryMsgFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMsgFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMsgFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMsgFeeRequest proto.InternalMessageInfo

func (m *QueryMsgFeeRequest) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *QueryMsgFeeRequest) GetDoNotConvert() bool {
	if m != nil {
		return m.DoNotConvert
	}
	return false
}

// QueryMsgFeeResponse is the response type for the MsgFee query.
type QueryMsgFeeResponse struct {
	// msg_fee is the requested entry.
	MsgFee *MsgFee `protobuf:"bytes,1,opt,name=msg_fee,json=msgFee,proto3" json:"msg_fee,omitempty"`
}

func (m *QueryMsgFeeResponse) Reset()         { *m = QueryMsgFeeResponse{} }
func (m *QueryMsgFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMsgFeeResponse) ProtoMessage()    {}
func (*QueryMsgFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{5}
}
func (m *QueryMsgFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMsgFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMsgFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMsgFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMsgFeeResponse.Merge(m, src)
}
func (m *QueryMsgFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMsgFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMsgFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMsgFeeResponse proto.InternalMessageInfo

func (m *QueryMsgFeeResponse) GetMsgFee() *MsgFee {
	if m != nil {
		return m.MsgFee
	}
	return nil
}

// QueryCalculateTxFeesRequest is the request type for the CalculateTxFees query.
type QueryCalculateTxFeesRequest struct {
	// tx_bytes is the transaction to simulate.
	TxBytes []byte `protobuf:"bytes,1,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	// gas_adjustment is a multiplier applied to the gas used while simulating the tx.
	// This only affects the estimated gas (since the fee is flat).
	// The default is 1.0. Valid range is 0.0 (exclusive) to 10.0 (inclusive).
	GasAdjustment float32 `protobuf:"fixed32,2,opt,name=gas_adjustment,json=gasAdjustment,proto3" json:"gas_adjustment,omitempty"`
}

func (m *QueryCalculateTxFeesRequest) Reset()         { *m = QueryCalculateTxFeesRequest{} }
func (m *QueryCalculateTxFeesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateTxFeesRequest) ProtoMessage()    {}
func (*QueryCalculateTxFeesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{6}
}
func (m *QueryCalculateTxFeesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateTxFeesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateTxFeesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateTxFeesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateTxFeesRequest.Merge(m, src)
}
func (m *QueryCalculateTxFeesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateTxFeesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateTxFeesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateTxFeesRequest proto.InternalMessageInfo

func (m *QueryCalculateTxFeesRequest) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *QueryCalculateTxFeesRequest) GetGasAdjustment() float32 {
	if m != nil {
		return m.GasAdjustment
	}
	return 0
}

// QueryCalculateTxFeesResponse is the response type for the CalculateTxFees query.
type QueryCalculateTxFeesResponse struct {
	// total_fees is the amount of fees needed for the Tx.
	TotalFees github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_fees,json=totalFees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_fees"`
	// estimated_gas is the amount of gas needed for the Tx.
	EstimatedGas uint64 `protobuf:"varint,2,opt,name=estimated_gas,json=estimatedGas,proto3" json:"estimated_gas,omitempty"`
}

func (m *QueryCalculateTxFeesResponse) Reset()         { *m = QueryCalculateTxFeesResponse{} }
func (m *QueryCalculateTxFeesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateTxFeesResponse) ProtoMessage()    {}
func (*QueryCalculateTxFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f04bea6da8efdf5c, []int{7}
}
func (m *QueryCalculateTxFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateTxFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateTxFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateTxFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateTxFeesResponse.Merge(m, src)
}
func (m *QueryCalculateTxFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateTxFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateTxFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateTxFeesResponse proto.InternalMessageInfo

func (m *QueryCalculateTxFeesResponse) GetTotalFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalFees
	}
	return nil
}

func (m *QueryCalculateTxFeesResponse) GetEstimatedGas() uint64 {
	if m != nil {
		return m.EstimatedGas
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "provenance.flatfees.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "provenance.flatfees.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAllMsgFeesRequest)(nil), "provenance.flatfees.v1.QueryAllMsgFeesRequest")
	proto.RegisterType((*QueryAllMsgFeesResponse)(nil), "provenance.flatfees.v1.QueryAllMsgFeesResponse")
	proto.RegisterType((*QueryMsgFeeRequest)(nil), "provenance.flatfees.v1.QueryMsgFeeRequest")
	proto.RegisterType((*QueryMsgFeeResponse)(nil), "provenance.flatfees.v1.QueryMsgFeeResponse")
	proto.RegisterType((*QueryCalculateTxFeesRequest)(nil), "provenance.flatfees.v1.QueryCalculateTxFeesRequest")
	proto.RegisterType((*QueryCalculateTxFeesResponse)(nil), "provenance.flatfees.v1.QueryCalculateTxFeesResponse")
}

func init() {
	proto.RegisterFile("provenance/flatfees/v1/query.proto", fileDescriptor_f04bea6da8efdf5c)
}

var fileDescriptor_f04bea6da8efdf5c = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x4f, 0x3b, 0x45,
	0x18, 0xee, 0x54, 0x2c, 0xfc, 0x86, 0x82, 0x71, 0x24, 0x58, 0x0a, 0x59, 0x9a, 0x15, 0x14, 0x4b,
	0xd8, 0x49, 0x81, 0xc4, 0x68, 0xbc, 0xd0, 0x26, 0x70, 0x92, 0xe0, 0x8a, 0x17, 0x63, 0xb2, 0x99,
	0x6e, 0xa7, 0xeb, 0xca, 0xee, 0xce, 0xd2, 0x99, 0x36, 0xed, 0xcd, 0x78, 0x30, 0x9e, 0x8c, 0x89,
	0x37, 0x0f, 0x9e, 0x8d, 0x89, 0x09, 0x7f, 0x85, 0xe1, 0x48, 0xe2, 0xc5, 0x93, 0x1f, 0x60, 0xc2,
	0xff, 0xe0, 0xc9, 0xec, 0xcc, 0x2c, 0xdd, 0xda, 0x2f, 0xbc, 0xc0, 0xee, 0xcc, 0xfb, 0xf1, 0x3c,
	0xcf, 0xfb, 0x3e, 0x5b, 0x68, 0xc6, 0x1d, 0xd6, 0xa3, 0x11, 0x89, 0x5c, 0x8a, 0xdb, 0x01, 0x11,
	0x6d, 0x4a, 0x39, 0xee, 0xd5, 0xf0, 0x75, 0x97, 0x76, 0x06, 0x56, 0xdc, 0x61, 0x82, 0xa1, 0xf5,
	0x61, 0x8c, 0x95, 0xc6, 0x58, 0xbd, 0x5a, 0xf9, 0x55, 0x12, 0xfa, 0x11, 0xc3, 0xf2, 0xaf, 0x0a,
	0x2d, 0xaf, 0x79, 0xcc, 0x63, 0xf2, 0x11, 0x27, 0x4f, 0xfa, 0x74, 0xcb, 0x63, 0xcc, 0x0b, 0x28,
	0x26, 0xb1, 0x8f, 0x49, 0x14, 0x31, 0x41, 0x84, 0xcf, 0x22, 0xae, 0x6f, 0x77, 0xa7, 0x40, 0x78,
	0x6a, 0xa5, 0xc2, 0xaa, 0x2e, 0xe3, 0x21, 0xe3, 0xb8, 0x49, 0x38, 0x55, 0xf0, 0x70, 0xaf, 0xd6,
	0xa4, 0x82, 0xd4, 0x70, 0x4c, 0x3c, 0x3f, 0x92, 0x35, 0x75, 0xac, 0x91, 0x8d, 0x4d, 0xa3, 0x5c,
	0xe6, 0xa7, 0xf7, 0x9b, 0xfa, 0x3e, 0x2d, 0x93, 0xa5, 0x6b, 0xae, 0x41, 0xf4, 0x61, 0xf2, 0x7a,
	0x41, 0x3a, 0x24, 0xe4, 0x36, 0xbd, 0xee, 0x52, 0x2e, 0xcc, 0x8f, 0xe0, 0x6b, 0x23, 0xa7, 0x3c,
	0x66, 0x11, 0xa7, 0xe8, 0x7d, 0x58, 0x88, 0xe5, 0x49, 0x09, 0x54, 0xc0, 0xde, 0xf2, 0xa1, 0x61,
	0x4d, 0x16, 0xcb, 0x52, 0x79, 0xf5, 0x85, 0xdb, 0xdf, 0xb7, 0x73, 0xb6, 0xce, 0x31, 0xbf, 0x02,
	0x70, 0x5d, 0x56, 0x3d, 0x09, 0x82, 0x0f, 0xb8, 0x77, 0x4a, 0x69, 0xda, 0x0f, 0xed, 0xc0, 0xd5,
	0x16, 0x73, 0x22, 0x26, 0x1c, 0x97, 0x45, 0x3d, 0xda, 0x11, 0xb2, 0xc1, 0x92, 0x5d, 0x6c, 0xb1,
	0x73, 0x26, 0x1a, 0xea, 0x0c, 0x9d, 0x42, 0x38, 0x24, 0x5f, 0x72, 0x25, 0x84, 0x37, 0x2d, 0xc5,
	0xce, 0x4a, 0xd8, 0x5b, 0x8a, 0x99, 0xd6, 0xc0, 0xba, 0x20, 0x1e, 0xd5, 0x1d, 0xec, 0x4c, 0xa6,
	0xf9, 0x17, 0x80, 0xaf, 0x8f, 0x01, 0xd1, 0x14, 0xdf, 0x85, 0x4b, 0x21, 0xf7, 0x9c, 0x84, 0x48,
	0x09, 0x54, 0x5e, 0x9a, 0x45, 0x52, 0xa5, 0xda, 0x8b, 0xa1, 0x2a, 0x81, 0xea, 0xb0, 0xd8, 0xa2,
	0x6d, 0xd2, 0x0d, 0x12, 0x16, 0x5c, 0x94, 0xf2, 0x12, 0xe0, 0xc6, 0x08, 0xc0, 0x14, 0x5a, 0x83,
	0xf9, 0x91, 0x96, 0x67, 0x59, 0x27, 0x35, 0x18, 0x17, 0xe8, 0x6c, 0x02, 0xc5, 0xb7, 0xe6, 0x52,
	0x54, 0xd8, 0x47, 0x38, 0x7e, 0xaa, 0xe7, 0xaa, 0x41, 0x6a, 0x9d, 0x2b, 0xb0, 0x98, 0xb0, 0x13,
	0x83, 0x98, 0x3a, 0xdd, 0x4e, 0x20, 0x55, 0x7e, 0x61, 0xc3, 0x90, 0x7b, 0x97, 0x83, 0x98, 0x7e,
	0xdc, 0x09, 0x26, 0x4c, 0x22, 0x3f, 0x3e, 0x09, 0xf3, 0x5c, 0xef, 0x47, 0x5a, 0x5d, 0x8b, 0xf7,
	0x0e, 0x5c, 0xd4, 0xe2, 0xcd, 0x5b, 0x10, 0x9d, 0x58, 0x50, 0xda, 0x99, 0x0e, 0xdc, 0x94, 0xf5,
	0x1a, 0x24, 0x70, 0xbb, 0x01, 0x11, 0xf4, 0xb2, 0x9f, 0x5d, 0x8f, 0x0d, 0xb8, 0x24, 0xfa, 0x4e,
	0x73, 0x20, 0xa8, 0xda, 0xbc, 0xa2, 0xbd, 0x28, 0xfa, 0xf5, 0xe4, 0x15, 0xed, 0xc2, 0x55, 0x8f,
	0x70, 0x87, 0xb4, 0x3e, 0xef, 0x72, 0x11, 0xd2, 0x48, 0xe1, 0xcd, 0xdb, 0x2b, 0x1e, 0xe1, 0x27,
	0x4f, 0x87, 0xe6, 0x2f, 0x00, 0x6e, 0x4d, 0xee, 0xa0, 0xa1, 0x7f, 0x01, 0x20, 0x14, 0x4c, 0x90,
	0x20, 0x3b, 0xfa, 0x19, 0xb3, 0x3b, 0x4d, 0x66, 0xf7, 0xd3, 0x1f, 0xdb, 0x7b, 0x9e, 0x2f, 0x3e,
	0xeb, 0x36, 0x2d, 0x97, 0x85, 0x58, 0xfb, 0x4c, 0xfd, 0x3b, 0xe0, 0xad, 0x2b, 0x9c, 0x08, 0xcd,
	0x65, 0x02, 0xff, 0xfe, 0xf1, 0xa6, 0x5a, 0x0c, 0xa8, 0x47, 0xdc, 0x81, 0x93, 0x98, 0x93, 0xff,
	0xf8, 0x78, 0x53, 0x05, 0xf6, 0x0b, 0xd9, 0x54, 0xee, 0xcf, 0x1b, 0x70, 0x85, 0x72, 0xe1, 0x87,
	0x44, 0xd0, 0x96, 0xe3, 0x11, 0x2e, 0x99, 0x2c, 0xd8, 0xc5, 0xa7, 0xc3, 0x33, 0xc2, 0x0f, 0xff,
	0x59, 0x80, 0x2f, 0x4b, 0x22, 0xe8, 0x1b, 0x00, 0x0b, 0xca, 0x67, 0xa8, 0x3a, 0x4d, 0xe6, 0x71,
	0x6b, 0x97, 0xf7, 0x9f, 0x15, 0xab, 0x54, 0x31, 0xf7, 0xbf, 0x4e, 0x40, 0x7e, 0xf9, 0xeb, 0xdf,
	0xdf, 0xe5, 0x2b, 0xc8, 0xc0, 0x53, 0xbe, 0x5d, 0xca, 0xdf, 0xe8, 0x07, 0x00, 0xe1, 0xd0, 0x51,
	0xc8, 0x9a, 0xd9, 0x68, 0xec, 0x1b, 0x50, 0xc6, 0xcf, 0x8e, 0xd7, 0xe0, 0xf0, 0x10, 0xdc, 0x0e,
	0x32, 0xa7, 0x81, 0x0b, 0xb9, 0xd7, 0xa6, 0x14, 0x93, 0x20, 0x90, 0x8a, 0xa9, 0x22, 0x73, 0x14,
	0x1b, 0x31, 0xcd, 0x1c, 0xc5, 0x46, 0x2d, 0xf0, 0x4c, 0xc5, 0x14, 0x28, 0xf4, 0x33, 0x80, 0xaf,
	0xfc, 0x67, 0x21, 0xd1, 0xd1, 0xcc, 0x6e, 0x93, 0x0d, 0x52, 0x3e, 0xfe, 0x7f, 0x49, 0xa9, 0x80,
	0x12, 0xe6, 0xdb, 0xef, 0x81, 0xaa, 0xb9, 0x93, 0x45, 0x2a, 0xfa, 0x09, 0x46, 0x37, 0xcd, 0x72,
	0x92, 0x82, 0x89, 0x2d, 0xea, 0x57, 0xb7, 0xf7, 0x06, 0xb8, 0xbb, 0x37, 0xc0, 0x9f, 0xf7, 0x06,
	0xf8, 0xf6, 0xc1, 0xc8, 0xdd, 0x3d, 0x18, 0xb9, 0xdf, 0x1e, 0x8c, 0x1c, 0xdc, 0xf0, 0xd9, 0x14,
	0x08, 0x17, 0xe0, 0x93, 0xe3, 0x8c, 0x47, 0x86, 0x41, 0x07, 0x3e, 0xcb, 0x36, 0xed, 0x0f, 0x05,
	0x92, 0xae, 0x69, 0x16, 0xe4, 0x0f, 0xd4, 0xd1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0x8a,
	0x04, 0x43, 0xb5, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the parameters for the x/flatfees module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AllMsgFees returns info on all msg types that have a customized msg fee.
	AllMsgFees(ctx context.Context, in *QueryAllMsgFeesRequest, opts ...grpc.CallOption) (*QueryAllMsgFeesResponse, error)
	// MsgFee will return information about what it will cost to execute a given msg type.
	// If the provided msg type does not have a specific fee defined, the default is returned.
	MsgFee(ctx context.Context, in *QueryMsgFeeRequest, opts ...grpc.CallOption) (*QueryMsgFeeResponse, error)
	// CalculateTxFees simulates executing a transaction for estimating gas usage and fees.
	CalculateTxFees(ctx context.Context, in *QueryCalculateTxFeesRequest, opts ...grpc.CallOption) (*QueryCalculateTxFeesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllMsgFees(ctx context.Context, in *QueryAllMsgFeesRequest, opts ...grpc.CallOption) (*QueryAllMsgFeesResponse, error) {
	out := new(QueryAllMsgFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Query/AllMsgFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MsgFee(ctx context.Context, in *QueryMsgFeeRequest, opts ...grpc.CallOption) (*QueryMsgFeeResponse, error) {
	out := new(QueryMsgFeeResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Query/MsgFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateTxFees(ctx context.Context, in *QueryCalculateTxFeesRequest, opts ...grpc.CallOption) (*QueryCalculateTxFeesResponse, error) {
	out := new(QueryCalculateTxFeesResponse)
	err := c.cc.Invoke(ctx, "/provenance.flatfees.v1.Query/CalculateTxFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the parameters for the x/flatfees module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AllMsgFees returns info on all msg types that have a customized msg fee.
	AllMsgFees(context.Context, *QueryAllMsgFeesRequest) (*QueryAllMsgFeesResponse, error)
	// MsgFee will return information about what it will cost to execute a given msg type.
	// If the provided msg type does not have a specific fee defined, the default is returned.
	MsgFee(context.Context, *QueryMsgFeeRequest) (*QueryMsgFeeResponse, error)
	// CalculateTxFees simulates executing a transaction for estimating gas usage and fees.
	CalculateTxFees(context.Context, *QueryCalculateTxFeesRequest) (*QueryCalculateTxFeesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AllMsgFees(ctx context.Context, req *QueryAllMsgFeesRequest) (*QueryAllMsgFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMsgFees not implemented")
}
func (*UnimplementedQueryServer) MsgFee(ctx context.Context, req *QueryMsgFeeRequest) (*QueryMsgFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgFee not implemented")
}
func (*UnimplementedQueryServer) CalculateTxFees(ctx context.Context, req *QueryCalculateTxFeesRequest) (*QueryCalculateTxFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTxFees not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllMsgFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMsgFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllMsgFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Query/AllMsgFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllMsgFees(ctx, req.(*QueryAllMsgFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MsgFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMsgFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MsgFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Query/MsgFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MsgFee(ctx, req.(*QueryMsgFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateTxFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateTxFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateTxFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.flatfees.v1.Query/CalculateTxFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateTxFees(ctx, req.(*QueryCalculateTxFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.flatfees.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AllMsgFees",
			Handler:    _Query_AllMsgFees_Handler,
		},
		{
			MethodName: "MsgFee",
			Handler:    _Query_MsgFee_Handler,
		},
		{
			MethodName: "CalculateTxFees",
			Handler:    _Query_CalculateTxFees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/flatfees/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMsgFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMsgFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMsgFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if m.DoNotConvert {
		i--
		if m.DoNotConvert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMsgFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMsgFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMsgFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	{
		size, err := m.DefaultCost.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MsgFees) > 0 {
		for iNdEx := len(m.MsgFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMsgFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMsgFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMsgFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DoNotConvert {
		i--
		if m.DoNotConvert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMsgFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMsgFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMsgFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgFee != nil {
		{
			size, err := m.MsgFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateTxFeesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateTxFeesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateTxFeesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasAdjustment != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GasAdjustment))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateTxFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateTxFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateTxFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EstimatedGas != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EstimatedGas))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TotalFees) > 0 {
		for iNdEx := len(m.TotalFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMsgFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoNotConvert {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMsgFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MsgFees) > 0 {
		for _, e := range m.MsgFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.DefaultCost.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMsgFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DoNotConvert {
		n += 2
	}
	return n
}

func (m *QueryMsgFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgFee != nil {
		l = m.MsgFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCalculateTxFeesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GasAdjustment != 0 {
		n += 5
	}
	return n
}

func (m *QueryCalculateTxFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalFees) > 0 {
		for _, e := range m.TotalFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.EstimatedGas != 0 {
		n += 1 + sovQuery(uint64(m.EstimatedGas))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMsgFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMsgFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMsgFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotConvert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotConvert = bool(v != 0)
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMsgFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMsgFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMsgFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgFees = append(m.MsgFees, &MsgFee{})
			if err := m.MsgFees[len(m.MsgFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMsgFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMsgFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMsgFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotConvert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotConvert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMsgFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMsgFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMsgFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgFee == nil {
				m.MsgFee = &MsgFee{}
			}
			if err := m.MsgFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateTxFeesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateTxFeesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateTxFeesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytes == nil {
				m.TxBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasAdjustment", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GasAdjustment = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateTxFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateTxFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateTxFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFees = append(m.TotalFees, types.Coin{})
			if err := m.TotalFees[len(m.TotalFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedGas", wireType)
			}
			m.EstimatedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EstimatedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
