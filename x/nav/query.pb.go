// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/nav/v1/query.proto

package nav

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetNAVRequest is the request type for the GetNAV query.
type QueryGetNAVRequest struct {
	// asset_denom is the denomination of the assets that you want the NAV for.
	AssetDenom string `protobuf:"bytes,1,opt,name=asset_denom,json=assetDenom,proto3" json:"asset_denom,omitempty"`
	// price_denom is the denomination of the price that you want the NAV for.
	PriceDenom string `protobuf:"bytes,2,opt,name=price_denom,json=priceDenom,proto3" json:"price_denom,omitempty"`
}

func (m *QueryGetNAVRequest) Reset()         { *m = QueryGetNAVRequest{} }
func (m *QueryGetNAVRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNAVRequest) ProtoMessage()    {}
func (*QueryGetNAVRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b707f11cb3357, []int{0}
}
func (m *QueryGetNAVRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNAVRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNAVRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNAVRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNAVRequest.Merge(m, src)
}
func (m *QueryGetNAVRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNAVRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNAVRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNAVRequest proto.InternalMessageInfo

func (m *QueryGetNAVRequest) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

func (m *QueryGetNAVRequest) GetPriceDenom() string {
	if m != nil {
		return m.PriceDenom
	}
	return ""
}

// QueryGetNAVResponse is the response type of the GetNAV query.
type QueryGetNAVResponse struct {
	// nav is the requested net asset value.
	Nav *NetAssetValueRecord `protobuf:"bytes,1,opt,name=nav,proto3" json:"nav,omitempty"`
}

func (m *QueryGetNAVResponse) Reset()         { *m = QueryGetNAVResponse{} }
func (m *QueryGetNAVResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNAVResponse) ProtoMessage()    {}
func (*QueryGetNAVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b707f11cb3357, []int{1}
}
func (m *QueryGetNAVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNAVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNAVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNAVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNAVResponse.Merge(m, src)
}
func (m *QueryGetNAVResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNAVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNAVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNAVResponse proto.InternalMessageInfo

func (m *QueryGetNAVResponse) GetNav() *NetAssetValueRecord {
	if m != nil {
		return m.Nav
	}
	return nil
}

// QueryGetAllNAVsRequest is the request type for the GetAllNAVs query.
type QueryGetAllNAVsRequest struct {
	// asset_denom is an optional denom. If provided, the query will only return
	// NAVs that have this asset_denom. Otherwise, all NAVs will be returned.
	AssetDenom string `protobuf:"bytes,1,opt,name=asset_denom,json=assetDenom,proto3" json:"asset_denom,omitempty"`
	// pagination defines optional pagination parameters for the query.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNAVsRequest) Reset()         { *m = QueryGetAllNAVsRequest{} }
func (m *QueryGetAllNAVsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNAVsRequest) ProtoMessage()    {}
func (*QueryGetAllNAVsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b707f11cb3357, []int{2}
}
func (m *QueryGetAllNAVsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNAVsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNAVsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNAVsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNAVsRequest.Merge(m, src)
}
func (m *QueryGetAllNAVsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNAVsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNAVsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNAVsRequest proto.InternalMessageInfo

func (m *QueryGetAllNAVsRequest) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

func (m *QueryGetAllNAVsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllNAVsResponse is the response type of the GetAllNAVs query.
type QueryGetAllNAVsResponse struct {
	// navs is a page of the requested net asset value entries.
	Navs []*NetAssetValueRecord `protobuf:"bytes,1,rep,name=navs,proto3" json:"navs,omitempty"`
	// pagination is the resulting pagination parameters.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNAVsResponse) Reset()         { *m = QueryGetAllNAVsResponse{} }
func (m *QueryGetAllNAVsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNAVsResponse) ProtoMessage()    {}
func (*QueryGetAllNAVsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b707f11cb3357, []int{3}
}
func (m *QueryGetAllNAVsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNAVsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNAVsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNAVsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNAVsResponse.Merge(m, src)
}
func (m *QueryGetAllNAVsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNAVsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNAVsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNAVsResponse proto.InternalMessageInfo

func (m *QueryGetAllNAVsResponse) GetNavs() []*NetAssetValueRecord {
	if m != nil {
		return m.Navs
	}
	return nil
}

func (m *QueryGetAllNAVsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetNAVRequest)(nil), "provenance.nav.v1.QueryGetNAVRequest")
	proto.RegisterType((*QueryGetNAVResponse)(nil), "provenance.nav.v1.QueryGetNAVResponse")
	proto.RegisterType((*QueryGetAllNAVsRequest)(nil), "provenance.nav.v1.QueryGetAllNAVsRequest")
	proto.RegisterType((*QueryGetAllNAVsResponse)(nil), "provenance.nav.v1.QueryGetAllNAVsResponse")
}

func init() { proto.RegisterFile("provenance/nav/v1/query.proto", fileDescriptor_763b707f11cb3357) }

var fileDescriptor_763b707f11cb3357 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x29, 0x54, 0x62, 0x7a, 0x62, 0x41, 0x6d, 0x88, 0xc0, 0x54, 0x96, 0x5a, 0x68,
	0x25, 0x76, 0x95, 0xf6, 0x82, 0xb8, 0xa5, 0x42, 0x94, 0x53, 0x5a, 0x2c, 0x91, 0x43, 0x38, 0xa0,
	0x8d, 0x3b, 0x32, 0x96, 0x92, 0x5d, 0xd7, 0xbb, 0x59, 0x51, 0x55, 0x3d, 0xc0, 0x13, 0x20, 0x71,
	0xe7, 0x0d, 0xe0, 0x39, 0x38, 0x56, 0xe2, 0xc2, 0x11, 0x25, 0x1c, 0x78, 0x0c, 0xe4, 0xb5, 0x51,
	0x5c, 0xd9, 0x90, 0x70, 0x9d, 0xf9, 0x67, 0xfe, 0x6f, 0xff, 0xb1, 0xe1, 0x5e, 0x92, 0x2a, 0x8b,
	0x52, 0xc8, 0x10, 0xb9, 0x14, 0x96, 0xdb, 0x0e, 0x3f, 0x9d, 0x60, 0x7a, 0xc6, 0x92, 0x54, 0x19,
	0x45, 0x6f, 0xce, 0xdb, 0x4c, 0x0a, 0xcb, 0x6c, 0xa7, 0xbd, 0x1b, 0x2a, 0x3d, 0x56, 0x9a, 0x0f,
	0x85, 0xc6, 0x5c, 0xcb, 0x6d, 0x67, 0x88, 0x46, 0x74, 0x78, 0x22, 0xa2, 0x58, 0x0a, 0x13, 0x2b,
	0x99, 0x8f, 0xb7, 0xef, 0x46, 0x4a, 0x45, 0x23, 0xe4, 0x22, 0x89, 0xb9, 0x90, 0x52, 0x19, 0xd7,
	0xd4, 0x45, 0xb7, 0xc6, 0xdb, 0x9c, 0x25, 0x58, 0xb4, 0xfd, 0x3e, 0xd0, 0x17, 0xd9, 0xfa, 0x43,
	0x34, 0xbd, 0x6e, 0x3f, 0xc0, 0xd3, 0x09, 0x6a, 0x43, 0xef, 0xc3, 0x9a, 0xd0, 0x1a, 0xcd, 0xeb,
	0x13, 0x94, 0x6a, 0xdc, 0x22, 0x9b, 0xe4, 0xe1, 0x8d, 0x00, 0x5c, 0xe9, 0x69, 0x56, 0xc9, 0x04,
	0x49, 0x1a, 0x87, 0x58, 0x08, 0x9a, 0xb9, 0xc0, 0x95, 0x9c, 0xc0, 0x3f, 0x82, 0x5b, 0x57, 0xf6,
	0xea, 0x44, 0x49, 0x8d, 0xf4, 0x31, 0xac, 0x48, 0x61, 0xdd, 0xc2, 0xb5, 0xbd, 0x6d, 0x56, 0x79,
	0x38, 0xeb, 0xa1, 0xe9, 0x66, 0x36, 0x7d, 0x31, 0x9a, 0x60, 0x80, 0xa1, 0x4a, 0x4f, 0x82, 0x6c,
	0xc4, 0x7f, 0x47, 0x60, 0xfd, 0xcf, 0xc6, 0xee, 0x68, 0xd4, 0xeb, 0xf6, 0xf5, 0xd2, 0xb4, 0xcf,
	0x00, 0xe6, 0xa9, 0xb5, 0xc2, 0xc2, 0x3c, 0x8f, 0x98, 0x65, 0x11, 0xb3, 0xfc, 0x1c, 0x45, 0xc4,
	0xec, 0x58, 0x44, 0x58, 0x2c, 0x0f, 0x4a, 0x93, 0xfe, 0x27, 0x02, 0x1b, 0x15, 0x86, 0xe2, 0x65,
	0x4f, 0xe0, 0x9a, 0x14, 0x56, 0xb7, 0xc8, 0xe6, 0xca, 0x7f, 0x3c, 0xcd, 0xcd, 0xd0, 0xc3, 0x1a,
	0xbe, 0x07, 0x0b, 0xf9, 0x72, 0xe3, 0x32, 0xe0, 0xde, 0xaf, 0x26, 0x5c, 0x77, 0x80, 0xf4, 0x0b,
	0x81, 0xd5, 0x3c, 0x7b, 0xba, 0x55, 0xc3, 0x52, 0xbd, 0x79, 0x7b, 0x7b, 0x91, 0x2c, 0xf7, 0xf3,
	0x5f, 0xbe, 0xff, 0xf6, 0xf3, 0x63, 0xf3, 0x68, 0xd0, 0xa2, 0xeb, 0xbc, 0xfa, 0x6d, 0x49, 0x61,
	0xe9, 0x7e, 0x7d, 0x5d, 0xf3, 0xf3, 0xd2, 0x99, 0x2e, 0xf8, 0x79, 0xe9, 0x0b, 0xba, 0xa0, 0x9f,
	0x09, 0xc0, 0x3c, 0x56, 0xba, 0xf3, 0x0f, 0x9a, 0xab, 0xe7, 0x6f, 0xef, 0x2e, 0x23, 0x2d, 0xe0,
	0x9f, 0x3b, 0xf8, 0x83, 0xc1, 0x1d, 0xba, 0xf1, 0x17, 0x48, 0xba, 0xb5, 0x14, 0xfd, 0xc1, 0xab,
	0xaf, 0x53, 0x8f, 0x5c, 0x4e, 0x3d, 0xf2, 0x63, 0xea, 0x91, 0x0f, 0x33, 0xaf, 0x71, 0x39, 0xf3,
	0x1a, 0xdf, 0x67, 0x5e, 0x03, 0x6e, 0xc7, 0xaa, 0x4a, 0x74, 0x4c, 0x06, 0x3b, 0x51, 0x6c, 0xde,
	0x4c, 0x86, 0x2c, 0x54, 0xe3, 0x92, 0xc5, 0xa3, 0x58, 0x95, 0x0d, 0xdf, 0x66, 0x5e, 0xc3, 0x55,
	0xf7, 0x73, 0xee, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x08, 0x0e, 0xb1, 0x9a, 0x39, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetNAV returns the single Net Asset Value entry requested.
	GetNAV(ctx context.Context, in *QueryGetNAVRequest, opts ...grpc.CallOption) (*QueryGetNAVResponse, error)
	// GetAllNAVs returns a page of all Net Asset Value entries, possibly limited
	// to a single asset denom.
	GetAllNAVs(ctx context.Context, in *QueryGetAllNAVsRequest, opts ...grpc.CallOption) (*QueryGetAllNAVsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetNAV(ctx context.Context, in *QueryGetNAVRequest, opts ...grpc.CallOption) (*QueryGetNAVResponse, error) {
	out := new(QueryGetNAVResponse)
	err := c.cc.Invoke(ctx, "/provenance.nav.v1.Query/GetNAV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllNAVs(ctx context.Context, in *QueryGetAllNAVsRequest, opts ...grpc.CallOption) (*QueryGetAllNAVsResponse, error) {
	out := new(QueryGetAllNAVsResponse)
	err := c.cc.Invoke(ctx, "/provenance.nav.v1.Query/GetAllNAVs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetNAV returns the single Net Asset Value entry requested.
	GetNAV(context.Context, *QueryGetNAVRequest) (*QueryGetNAVResponse, error)
	// GetAllNAVs returns a page of all Net Asset Value entries, possibly limited
	// to a single asset denom.
	GetAllNAVs(context.Context, *QueryGetAllNAVsRequest) (*QueryGetAllNAVsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetNAV(ctx context.Context, req *QueryGetNAVRequest) (*QueryGetNAVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAV not implemented")
}
func (*UnimplementedQueryServer) GetAllNAVs(ctx context.Context, req *QueryGetAllNAVsRequest) (*QueryGetAllNAVsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNAVs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetNAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNAVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.nav.v1.Query/GetNAV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNAV(ctx, req.(*QueryGetNAVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllNAVs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNAVsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllNAVs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.nav.v1.Query/GetAllNAVs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllNAVs(ctx, req.(*QueryGetAllNAVsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.nav.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNAV",
			Handler:    _Query_GetNAV_Handler,
		},
		{
			MethodName: "GetAllNAVs",
			Handler:    _Query_GetAllNAVs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/nav/v1/query.proto",
}

func (m *QueryGetNAVRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNAVRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNAVRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceDenom) > 0 {
		i -= len(m.PriceDenom)
		copy(dAtA[i:], m.PriceDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PriceDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNAVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNAVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNAVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nav != nil {
		{
			size, err := m.Nav.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNAVsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNAVsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNAVsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNAVsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNAVsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNAVsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Navs) > 0 {
		for iNdEx := len(m.Navs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Navs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetNAVRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PriceDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNAVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nav != nil {
		l = m.Nav.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNAVsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNAVsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Navs) > 0 {
		for _, e := range m.Navs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetNAVRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNAVRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNAVRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNAVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNAVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNAVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nav", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nav == nil {
				m.Nav = &NetAssetValueRecord{}
			}
			if err := m.Nav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNAVsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNAVsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNAVsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNAVsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNAVsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNAVsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Navs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Navs = append(m.Navs, &NetAssetValueRecord{})
			if err := m.Navs[len(m.Navs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
