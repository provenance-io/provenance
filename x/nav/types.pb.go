// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/nav/v1/types.proto

package nav

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NetAssetValue defines the price of assets. Modules that want to record NAV
// info should use this type in their Tx endpoints.
type NetAssetValue struct {
	// assets are the volume and denom that has value.
	Assets types.Coin `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets"`
	// price is the amount that the assets are worth.
	Price types.Coin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
}

func (m *NetAssetValue) Reset()      { *m = NetAssetValue{} }
func (*NetAssetValue) ProtoMessage() {}
func (*NetAssetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_102b31885aca08a6, []int{0}
}
func (m *NetAssetValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetAssetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetAssetValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetAssetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAssetValue.Merge(m, src)
}
func (m *NetAssetValue) XXX_Size() int {
	return m.Size()
}
func (m *NetAssetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAssetValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetAssetValue proto.InternalMessageInfo

func (m *NetAssetValue) GetAssets() types.Coin {
	if m != nil {
		return m.Assets
	}
	return types.Coin{}
}

func (m *NetAssetValue) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

// NetAssetValueRecord defines the price of assets as well as the height and
// who/what was responsible for creating the record. This is used to actually
// store the info in state, and also as the return type for the queries.
type NetAssetValueRecord struct {
	// assets are the volume and denom that has value.
	Assets types.Coin `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets"`
	// price is the amount that the assets are worth.
	Price types.Coin `protobuf:"bytes,2,opt,name=price,proto3" json:"price"`
	// height is the block height of the chain when this record was recorded.
	Height uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	// source describes who or what created this record. It might contain
	// an address, but might also be some sort of descriptor string.
	// Max Length = 100 bytes.
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *NetAssetValueRecord) Reset()      { *m = NetAssetValueRecord{} }
func (*NetAssetValueRecord) ProtoMessage() {}
func (*NetAssetValueRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_102b31885aca08a6, []int{1}
}
func (m *NetAssetValueRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetAssetValueRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetAssetValueRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetAssetValueRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetAssetValueRecord.Merge(m, src)
}
func (m *NetAssetValueRecord) XXX_Size() int {
	return m.Size()
}
func (m *NetAssetValueRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_NetAssetValueRecord.DiscardUnknown(m)
}

var xxx_messageInfo_NetAssetValueRecord proto.InternalMessageInfo

func (m *NetAssetValueRecord) GetAssets() types.Coin {
	if m != nil {
		return m.Assets
	}
	return types.Coin{}
}

func (m *NetAssetValueRecord) GetPrice() types.Coin {
	if m != nil {
		return m.Price
	}
	return types.Coin{}
}

func (m *NetAssetValueRecord) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NetAssetValueRecord) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

// GenesisState is the data that should be loaded into the nav module during genesis.
type GenesisState struct {
	// navs are all the net asset values to put into state at genesis.
	Navs []*NetAssetValueRecord `protobuf:"bytes,1,rep,name=navs,proto3" json:"navs,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_102b31885aca08a6, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

// EventSetNetAssetValue is an event emitted when a Net Asset Value is updated or added.
type EventSetNetAssetValue struct {
	// assets is a coin string of the volume and denom that has value
	Assets string `protobuf:"bytes,1,opt,name=assets,proto3" json:"assets,omitempty"`
	// price is the coin string of what the assets are worth.
	Price string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	// source is a string indicating who or what created this record.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *EventSetNetAssetValue) Reset()         { *m = EventSetNetAssetValue{} }
func (m *EventSetNetAssetValue) String() string { return proto.CompactTextString(m) }
func (*EventSetNetAssetValue) ProtoMessage()    {}
func (*EventSetNetAssetValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_102b31885aca08a6, []int{3}
}
func (m *EventSetNetAssetValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetNetAssetValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetNetAssetValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetNetAssetValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetNetAssetValue.Merge(m, src)
}
func (m *EventSetNetAssetValue) XXX_Size() int {
	return m.Size()
}
func (m *EventSetNetAssetValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetNetAssetValue.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetNetAssetValue proto.InternalMessageInfo

func (m *EventSetNetAssetValue) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *EventSetNetAssetValue) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *EventSetNetAssetValue) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*NetAssetValue)(nil), "provenance.nav.v1.NetAssetValue")
	proto.RegisterType((*NetAssetValueRecord)(nil), "provenance.nav.v1.NetAssetValueRecord")
	proto.RegisterType((*GenesisState)(nil), "provenance.nav.v1.GenesisState")
	proto.RegisterType((*EventSetNetAssetValue)(nil), "provenance.nav.v1.EventSetNetAssetValue")
}

func init() { proto.RegisterFile("provenance/nav/v1/types.proto", fileDescriptor_102b31885aca08a6) }

var fileDescriptor_102b31885aca08a6 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x11, 0x13, 0x25, 0x17, 0x18, 0x30, 0x21, 0x32, 0x91, 0x70, 0xa2, 0x0c, 0xc8, 0x0c,
	0xdc, 0xc9, 0x41, 0x08, 0x29, 0x1b, 0x41, 0x88, 0x0d, 0x21, 0x07, 0x31, 0x80, 0x18, 0xce, 0xe6,
	0xc9, 0x39, 0x89, 0xdc, 0x59, 0xbe, 0xcb, 0xa9, 0xfd, 0x07, 0xed, 0xd6, 0xb1, 0x63, 0xfe, 0x49,
	0xd7, 0x8c, 0x19, 0x3b, 0x55, 0x55, 0xb2, 0xf4, 0x67, 0x54, 0x8e, 0xad, 0xc6, 0x51, 0x3a, 0x74,
	0xea, 0x76, 0xdf, 0x7b, 0xef, 0xfb, 0xf4, 0x7d, 0xf7, 0x1e, 0x7e, 0x93, 0x66, 0xd2, 0x80, 0x60,
	0x22, 0x06, 0x2a, 0x98, 0xa1, 0x26, 0xa0, 0xfa, 0x38, 0x05, 0x45, 0xd2, 0x4c, 0x6a, 0xe9, 0xbc,
	0xd8, 0xb5, 0x89, 0x60, 0x86, 0x98, 0xa0, 0xeb, 0xc5, 0x52, 0xcd, 0xa4, 0xa2, 0x11, 0x53, 0x40,
	0x4d, 0x10, 0x81, 0x66, 0x01, 0x8d, 0x25, 0x17, 0x05, 0xa5, 0xdb, 0x4e, 0x64, 0x22, 0xb7, 0x4f,
	0x9a, 0xbf, 0x8a, 0xea, 0xe0, 0x14, 0xe1, 0xe7, 0xdf, 0x41, 0x7f, 0x56, 0x0a, 0xf4, 0x2f, 0xf6,
	0x7f, 0x0e, 0xce, 0x27, 0x5c, 0x67, 0x39, 0x52, 0x2e, 0xea, 0x23, 0xbf, 0x35, 0x7c, 0x4d, 0x0a,
	0x61, 0x92, 0x0b, 0x93, 0x52, 0x98, 0x7c, 0x91, 0x5c, 0x8c, 0xed, 0xe5, 0x55, 0xcf, 0x0a, 0xcb,
	0x71, 0xe7, 0x23, 0x7e, 0x9a, 0x66, 0x3c, 0x06, 0xf7, 0xc9, 0xc3, 0x78, 0xc5, 0xf4, 0xa8, 0x71,
	0xbe, 0xe8, 0x59, 0x37, 0x8b, 0x1e, 0x1a, 0x5c, 0x20, 0xfc, 0x72, 0xcf, 0x4b, 0x08, 0xb1, 0xcc,
	0xfe, 0x3d, 0xb6, 0x23, 0xa7, 0x83, 0xeb, 0x53, 0xe0, 0xc9, 0x54, 0xbb, 0xb5, 0x3e, 0xf2, 0xed,
	0xb0, 0x44, 0x79, 0x5d, 0xc9, 0x79, 0x16, 0x83, 0x6b, 0xf7, 0x91, 0xdf, 0x0c, 0x4b, 0x54, 0x49,
	0xf0, 0x13, 0x3f, 0xfb, 0x06, 0x02, 0x14, 0x57, 0x13, 0xcd, 0x34, 0x38, 0x23, 0x6c, 0x0b, 0x66,
	0x72, 0xdf, 0x35, 0xbf, 0x35, 0x7c, 0x4b, 0x0e, 0xb6, 0x46, 0xee, 0xc9, 0x1b, 0x6e, 0x39, 0xa3,
	0xc6, 0x49, 0xa1, 0x6a, 0x0d, 0xfe, 0xe2, 0x57, 0x5f, 0x0d, 0x08, 0x3d, 0x01, 0xbd, 0xbf, 0xaa,
	0xce, 0xde, 0xc7, 0x34, 0xef, 0x72, 0xb7, 0xab, 0xb9, 0x9b, 0x95, 0x58, 0xa5, 0xfd, 0x5a, 0xd5,
	0xfe, 0xf8, 0xcf, 0x72, 0xed, 0xa1, 0xd5, 0xda, 0x43, 0xd7, 0x6b, 0x0f, 0x9d, 0x6d, 0x3c, 0x6b,
	0xb5, 0xf1, 0xac, 0xcb, 0x8d, 0x67, 0xe1, 0x36, 0x97, 0x87, 0x96, 0x7f, 0xa0, 0xdf, 0xef, 0x12,
	0xae, 0xa7, 0xf3, 0x88, 0xc4, 0x72, 0x46, 0x77, 0xfd, 0xf7, 0x5c, 0x56, 0x10, 0x3d, 0xca, 0xef,
	0x36, 0xaa, 0x6f, 0xcf, 0xec, 0xc3, 0x6d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xdc, 0xa3, 0xdc,
	0xd0, 0x02, 0x00, 0x00,
}

func (this *NetAssetValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetAssetValue)
	if !ok {
		that2, ok := that.(NetAssetValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assets.Equal(&that1.Assets) {
		return false
	}
	if !this.Price.Equal(&that1.Price) {
		return false
	}
	return true
}
func (this *NetAssetValueRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetAssetValueRecord)
	if !ok {
		that2, ok := that.(NetAssetValueRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assets.Equal(&that1.Assets) {
		return false
	}
	if !this.Price.Equal(&that1.Price) {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (m *NetAssetValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetAssetValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetAssetValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NetAssetValueRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetAssetValueRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetAssetValueRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Assets.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Navs) > 0 {
		for iNdEx := len(m.Navs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Navs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventSetNetAssetValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetNetAssetValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetNetAssetValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Assets) > 0 {
		i -= len(m.Assets)
		copy(dAtA[i:], m.Assets)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Assets)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetAssetValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Assets.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *NetAssetValueRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Assets.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Navs) > 0 {
		for _, e := range m.Navs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *EventSetNetAssetValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Assets)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetAssetValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetAssetValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetAssetValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetAssetValueRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetAssetValueRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetAssetValueRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Assets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Navs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Navs = append(m.Navs, &NetAssetValueRecord{})
			if err := m.Navs[len(m.Navs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetNetAssetValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetNetAssetValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetNetAssetValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
