// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/trigger/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTriggerByIDRequest queries for the Trigger with an identifier of id.
type QueryTriggerByIDRequest struct {
	// The id of the trigger to query.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTriggerByIDRequest) Reset()         { *m = QueryTriggerByIDRequest{} }
func (m *QueryTriggerByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTriggerByIDRequest) ProtoMessage()    {}
func (*QueryTriggerByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afd3e0fb69cf60c3, []int{0}
}
func (m *QueryTriggerByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTriggerByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTriggerByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTriggerByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTriggerByIDRequest.Merge(m, src)
}
func (m *QueryTriggerByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTriggerByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTriggerByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTriggerByIDRequest proto.InternalMessageInfo

func (m *QueryTriggerByIDRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryTriggerByIDResponse contains the requested Trigger.
type QueryTriggerByIDResponse struct {
	// The trigger object that was queried for.
	Trigger *Trigger `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
}

func (m *QueryTriggerByIDResponse) Reset()         { *m = QueryTriggerByIDResponse{} }
func (m *QueryTriggerByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTriggerByIDResponse) ProtoMessage()    {}
func (*QueryTriggerByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afd3e0fb69cf60c3, []int{1}
}
func (m *QueryTriggerByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTriggerByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTriggerByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTriggerByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTriggerByIDResponse.Merge(m, src)
}
func (m *QueryTriggerByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTriggerByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTriggerByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTriggerByIDResponse proto.InternalMessageInfo

func (m *QueryTriggerByIDResponse) GetTrigger() *Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

// QueryTriggersRequest queries for all triggers.
type QueryTriggersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTriggersRequest) Reset()         { *m = QueryTriggersRequest{} }
func (m *QueryTriggersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTriggersRequest) ProtoMessage()    {}
func (*QueryTriggersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afd3e0fb69cf60c3, []int{2}
}
func (m *QueryTriggersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTriggersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTriggersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTriggersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTriggersRequest.Merge(m, src)
}
func (m *QueryTriggersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTriggersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTriggersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTriggersRequest proto.InternalMessageInfo

func (m *QueryTriggersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTriggersResponse contains the list of Triggers.
type QueryTriggersResponse struct {
	// List of Trigger objects.
	Triggers []Trigger `protobuf:"bytes,1,rep,name=triggers,proto3" json:"triggers"`
	// pagination defines an optional pagination for the response.
	Pagination *query.PageResponse `protobuf:"bytes,99,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTriggersResponse) Reset()         { *m = QueryTriggersResponse{} }
func (m *QueryTriggersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTriggersResponse) ProtoMessage()    {}
func (*QueryTriggersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afd3e0fb69cf60c3, []int{3}
}
func (m *QueryTriggersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTriggersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTriggersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTriggersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTriggersResponse.Merge(m, src)
}
func (m *QueryTriggersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTriggersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTriggersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTriggersResponse proto.InternalMessageInfo

func (m *QueryTriggersResponse) GetTriggers() []Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *QueryTriggersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTriggerByIDRequest)(nil), "provenance.trigger.v1.QueryTriggerByIDRequest")
	proto.RegisterType((*QueryTriggerByIDResponse)(nil), "provenance.trigger.v1.QueryTriggerByIDResponse")
	proto.RegisterType((*QueryTriggersRequest)(nil), "provenance.trigger.v1.QueryTriggersRequest")
	proto.RegisterType((*QueryTriggersResponse)(nil), "provenance.trigger.v1.QueryTriggersResponse")
}

func init() { proto.RegisterFile("provenance/trigger/v1/query.proto", fileDescriptor_afd3e0fb69cf60c3) }

var fileDescriptor_afd3e0fb69cf60c3 = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0x87, 0x33, 0xb1, 0x6a, 0x99, 0x82, 0x87, 0xa1, 0xc5, 0x10, 0x24, 0x6d, 0xa3, 0xb4, 0xfe,
	0xa9, 0x33, 0xa4, 0xbd, 0x78, 0x94, 0x45, 0x14, 0x6f, 0x35, 0xf4, 0xe4, 0x41, 0x98, 0x24, 0xc3,
	0x38, 0x60, 0x33, 0x69, 0x66, 0x36, 0xba, 0x88, 0x17, 0x3f, 0x80, 0x08, 0x5e, 0x3d, 0xf9, 0x25,
	0xfc, 0x0a, 0x3d, 0x16, 0xbc, 0x78, 0x12, 0xd9, 0xf5, 0x83, 0xc8, 0x4e, 0x26, 0xbb, 0x83, 0x66,
	0xbb, 0x7b, 0x0b, 0xc9, 0xf3, 0xbe, 0xbf, 0xe7, 0x7d, 0x27, 0x03, 0x77, 0xab, 0x5a, 0x36, 0xac,
	0xa4, 0x65, 0xce, 0x88, 0xae, 0x05, 0xe7, 0xac, 0x26, 0x4d, 0x42, 0xce, 0x86, 0xac, 0x1e, 0xe1,
	0xaa, 0x96, 0x5a, 0xa2, 0xad, 0x39, 0x82, 0x2d, 0x82, 0x9b, 0x24, 0xdc, 0xe4, 0x92, 0x4b, 0x43,
	0x90, 0xe9, 0x53, 0x0b, 0x87, 0xb7, 0xb8, 0x94, 0xfc, 0x0d, 0x23, 0xb4, 0x12, 0x84, 0x96, 0xa5,
	0xd4, 0x54, 0x0b, 0x59, 0x2a, 0xfb, 0xf5, 0x7e, 0x2e, 0xd5, 0xa9, 0x54, 0x24, 0xa3, 0x8a, 0xb5,
	0x19, 0xa4, 0x49, 0x32, 0xa6, 0x69, 0x42, 0x2a, 0xca, 0x45, 0x69, 0x60, 0xcb, 0xde, 0xee, 0x37,
	0xeb, 0x0c, 0x0c, 0x14, 0xdf, 0x83, 0x37, 0x5f, 0x4c, 0xdb, 0x9c, 0xb4, 0x6f, 0x07, 0xa3, 0xe7,
	0x4f, 0x52, 0x76, 0x36, 0x64, 0x4a, 0xa3, 0x1b, 0xd0, 0x17, 0x45, 0x00, 0x76, 0xc0, 0xdd, 0xb5,
	0xd4, 0x17, 0x45, 0x7c, 0x02, 0x83, 0xff, 0x51, 0x55, 0xc9, 0x52, 0x31, 0xf4, 0x08, 0x5e, 0xb7,
	0x7d, 0x4d, 0xc1, 0xc6, 0x61, 0x84, 0x7b, 0x87, 0xc6, 0xb6, 0x38, 0xed, 0xf0, 0xf8, 0x15, 0xdc,
	0x74, 0xbb, 0xaa, 0x2e, 0xfd, 0x29, 0x84, 0xf3, 0x89, 0x82, 0xdc, 0x34, 0xdd, 0xc3, 0xed, 0xf8,
	0x78, 0x3a, 0x3e, 0x6e, 0x57, 0x6c, 0xc7, 0xc7, 0xc7, 0x94, 0x33, 0x5b, 0x9b, 0x3a, 0x95, 0xf1,
	0x37, 0x00, 0xb7, 0xfe, 0x09, 0xb0, 0xce, 0x8f, 0xe1, 0xba, 0x95, 0x50, 0x01, 0xd8, 0xb9, 0xb2,
	0x5c, 0x7a, 0xb0, 0x76, 0xfe, 0x6b, 0xdb, 0x4b, 0x67, 0x55, 0xe8, 0x59, 0x8f, 0xe3, 0xfe, 0x52,
	0xc7, 0x36, 0xde, 0x95, 0x3c, 0xfc, 0xee, 0xc3, 0xab, 0x46, 0x12, 0x7d, 0x05, 0x70, 0xc3, 0x59,
	0x30, 0xc2, 0x0b, 0x94, 0x16, 0x1c, 0x5a, 0x48, 0x56, 0xe6, 0x5b, 0x8d, 0xf8, 0xe0, 0xe3, 0x8f,
	0x3f, 0x5f, 0xfc, 0x3d, 0x74, 0x87, 0x5c, 0xfa, 0xbb, 0x28, 0xf2, 0x5e, 0x14, 0x1f, 0xd0, 0x27,
	0x00, 0xd7, 0xbb, 0x45, 0xa2, 0x07, 0x2b, 0x64, 0x75, 0xe7, 0x19, 0x1e, 0xac, 0x06, 0x5b, 0xab,
	0x7d, 0x63, 0xb5, 0x8b, 0xb6, 0x5d, 0xab, 0x9a, 0xbd, 0xa5, 0x75, 0xa1, 0x5c, 0xab, 0x81, 0x38,
	0x1f, 0x47, 0xe0, 0x62, 0x1c, 0x81, 0xdf, 0xe3, 0x08, 0x7c, 0x9e, 0x44, 0xde, 0xc5, 0x24, 0xf2,
	0x7e, 0x4e, 0x22, 0x0f, 0x06, 0x42, 0xf6, 0x47, 0x1e, 0x83, 0x97, 0x47, 0x5c, 0xe8, 0xd7, 0xc3,
	0x0c, 0xe7, 0xf2, 0xd4, 0x09, 0x78, 0x28, 0xa4, 0x1b, 0xf7, 0x6e, 0xb6, 0x06, 0x3d, 0xaa, 0x98,
	0xca, 0xae, 0x99, 0x1b, 0x73, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x39, 0x0f, 0x72, 0xf2,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TriggerByID returns a trigger matching the ID.
	TriggerByID(ctx context.Context, in *QueryTriggerByIDRequest, opts ...grpc.CallOption) (*QueryTriggerByIDResponse, error)
	// Triggers returns the list of triggers.
	Triggers(ctx context.Context, in *QueryTriggersRequest, opts ...grpc.CallOption) (*QueryTriggersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TriggerByID(ctx context.Context, in *QueryTriggerByIDRequest, opts ...grpc.CallOption) (*QueryTriggerByIDResponse, error) {
	out := new(QueryTriggerByIDResponse)
	err := c.cc.Invoke(ctx, "/provenance.trigger.v1.Query/TriggerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Triggers(ctx context.Context, in *QueryTriggersRequest, opts ...grpc.CallOption) (*QueryTriggersResponse, error) {
	out := new(QueryTriggersResponse)
	err := c.cc.Invoke(ctx, "/provenance.trigger.v1.Query/Triggers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TriggerByID returns a trigger matching the ID.
	TriggerByID(context.Context, *QueryTriggerByIDRequest) (*QueryTriggerByIDResponse, error)
	// Triggers returns the list of triggers.
	Triggers(context.Context, *QueryTriggersRequest) (*QueryTriggersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TriggerByID(ctx context.Context, req *QueryTriggerByIDRequest) (*QueryTriggerByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerByID not implemented")
}
func (*UnimplementedQueryServer) Triggers(ctx context.Context, req *QueryTriggersRequest) (*QueryTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Triggers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TriggerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTriggerByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TriggerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.trigger.v1.Query/TriggerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TriggerByID(ctx, req.(*QueryTriggerByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Triggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Triggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.trigger.v1.Query/Triggers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Triggers(ctx, req.(*QueryTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.trigger.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerByID",
			Handler:    _Query_TriggerByID_Handler,
		},
		{
			MethodName: "Triggers",
			Handler:    _Query_Triggers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/trigger/v1/query.proto",
}

func (m *QueryTriggerByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTriggerByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTriggerByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTriggerByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTriggerByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTriggerByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trigger != nil {
		{
			size, err := m.Trigger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTriggersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTriggersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTriggersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}

func (m *QueryTriggersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTriggersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTriggersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Triggers) > 0 {
		for iNdEx := len(m.Triggers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Triggers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTriggerByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTriggerByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trigger != nil {
		l = m.Trigger.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTriggersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTriggersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Triggers) > 0 {
		for _, e := range m.Triggers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTriggerByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTriggerByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTriggerByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTriggerByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTriggerByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTriggerByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trigger == nil {
				m.Trigger = &Trigger{}
			}
			if err := m.Trigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTriggersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTriggersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTriggersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTriggersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTriggersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTriggersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triggers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Triggers = append(m.Triggers, Trigger{})
			if err := m.Triggers[len(m.Triggers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
