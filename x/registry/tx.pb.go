// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/registry/v1/tx.proto

package registry

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAddress represents a message to register a new address with roles
type MsgRegisterAddress struct {
	// authority is the address that is authorized to register addresses
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// address is the blockchain address to register
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// roles is a map of role names to lists of addresses that can perform that role
	Roles map[string]RoleAddresses `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MsgRegisterAddress) Reset()         { *m = MsgRegisterAddress{} }
func (m *MsgRegisterAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAddress) ProtoMessage()    {}
func (*MsgRegisterAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{0}
}
func (m *MsgRegisterAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAddress.Merge(m, src)
}
func (m *MsgRegisterAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAddress proto.InternalMessageInfo

func (m *MsgRegisterAddress) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRegisterAddress) GetRoles() map[string]RoleAddresses {
	if m != nil {
		return m.Roles
	}
	return nil
}

// MsgRegisterAddressResponse defines the response for RegisterAddress
type MsgRegisterAddressResponse struct {
}

func (m *MsgRegisterAddressResponse) Reset()         { *m = MsgRegisterAddressResponse{} }
func (m *MsgRegisterAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAddressResponse) ProtoMessage()    {}
func (*MsgRegisterAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{1}
}
func (m *MsgRegisterAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAddressResponse.Merge(m, src)
}
func (m *MsgRegisterAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAddressResponse proto.InternalMessageInfo

// MsgUpdateRoles represents a message to update roles for an existing address
type MsgUpdateRoles struct {
	// authority is the address that is authorized to update roles
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// address is the blockchain address to update
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// roles is a map of role names to lists of addresses that can perform that role
	Roles map[string]RoleAddresses `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MsgUpdateRoles) Reset()         { *m = MsgUpdateRoles{} }
func (m *MsgUpdateRoles) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRoles) ProtoMessage()    {}
func (*MsgUpdateRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{2}
}
func (m *MsgUpdateRoles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRoles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRoles.Merge(m, src)
}
func (m *MsgUpdateRoles) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRoles.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRoles proto.InternalMessageInfo

func (m *MsgUpdateRoles) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateRoles) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgUpdateRoles) GetRoles() map[string]RoleAddresses {
	if m != nil {
		return m.Roles
	}
	return nil
}

// MsgUpdateRolesResponse defines the response for UpdateRoles
type MsgUpdateRolesResponse struct {
}

func (m *MsgUpdateRolesResponse) Reset()         { *m = MsgUpdateRolesResponse{} }
func (m *MsgUpdateRolesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRolesResponse) ProtoMessage()    {}
func (*MsgUpdateRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{3}
}
func (m *MsgUpdateRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRolesResponse.Merge(m, src)
}
func (m *MsgUpdateRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRolesResponse proto.InternalMessageInfo

// MsgRemoveAddress represents a message to remove an address from the registry
type MsgRemoveAddress struct {
	// authority is the address that is authorized to remove addresses
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// address is the blockchain address to remove
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgRemoveAddress) Reset()         { *m = MsgRemoveAddress{} }
func (m *MsgRemoveAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAddress) ProtoMessage()    {}
func (*MsgRemoveAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{4}
}
func (m *MsgRemoveAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAddress.Merge(m, src)
}
func (m *MsgRemoveAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAddress proto.InternalMessageInfo

func (m *MsgRemoveAddress) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRemoveAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// MsgRemoveAddressResponse defines the response for RemoveAddress
type MsgRemoveAddressResponse struct {
}

func (m *MsgRemoveAddressResponse) Reset()         { *m = MsgRemoveAddressResponse{} }
func (m *MsgRemoveAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAddressResponse) ProtoMessage()    {}
func (*MsgRemoveAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afab3f18b6d8353c, []int{5}
}
func (m *MsgRemoveAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAddressResponse.Merge(m, src)
}
func (m *MsgRemoveAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAddress)(nil), "provenance.registry.v1.MsgRegisterAddress")
	proto.RegisterMapType((map[string]RoleAddresses)(nil), "provenance.registry.v1.MsgRegisterAddress.RolesEntry")
	proto.RegisterType((*MsgRegisterAddressResponse)(nil), "provenance.registry.v1.MsgRegisterAddressResponse")
	proto.RegisterType((*MsgUpdateRoles)(nil), "provenance.registry.v1.MsgUpdateRoles")
	proto.RegisterMapType((map[string]RoleAddresses)(nil), "provenance.registry.v1.MsgUpdateRoles.RolesEntry")
	proto.RegisterType((*MsgUpdateRolesResponse)(nil), "provenance.registry.v1.MsgUpdateRolesResponse")
	proto.RegisterType((*MsgRemoveAddress)(nil), "provenance.registry.v1.MsgRemoveAddress")
	proto.RegisterType((*MsgRemoveAddressResponse)(nil), "provenance.registry.v1.MsgRemoveAddressResponse")
}

func init() { proto.RegisterFile("provenance/registry/v1/tx.proto", fileDescriptor_afab3f18b6d8353c) }

var fileDescriptor_afab3f18b6d8353c = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x63, 0x9b, 0x82, 0xfa, 0x46, 0x94, 0xea, 0x54, 0x15, 0x73, 0x42, 0x6e, 0x15, 0xa9,
	0x28, 0xaa, 0xd4, 0x33, 0x31, 0x02, 0xa1, 0x32, 0x11, 0x09, 0x89, 0xc5, 0x03, 0x46, 0x2c, 0x2c,
	0x95, 0x9b, 0x9c, 0xae, 0x56, 0x6b, 0x9f, 0xb9, 0xbb, 0x58, 0xcd, 0xca, 0x07, 0x40, 0x7c, 0x14,
	0x06, 0x46, 0x46, 0x86, 0x0e, 0x0c, 0x15, 0x13, 0x13, 0x42, 0xc9, 0xc0, 0xd7, 0x40, 0xfe, 0xef,
	0x34, 0xb4, 0x78, 0x02, 0xb6, 0xbb, 0xbc, 0xbf, 0x7b, 0x9f, 0xe7, 0x9e, 0xbc, 0x3e, 0xd8, 0x8a,
	0x05, 0x4f, 0x68, 0xe4, 0x47, 0x23, 0x6a, 0x0b, 0xca, 0x02, 0xa9, 0xc4, 0xd4, 0x4e, 0x06, 0xb6,
	0x3a, 0x25, 0xb1, 0xe0, 0x8a, 0xa3, 0xcd, 0x1a, 0x20, 0x25, 0x40, 0x92, 0x01, 0xde, 0x60, 0x9c,
	0xf1, 0x0c, 0xb1, 0xd3, 0x55, 0x4e, 0xe3, 0x3b, 0x23, 0x2e, 0x43, 0x2e, 0x0f, 0xf2, 0x42, 0xbe,
	0x29, 0x4a, 0xb7, 0xf3, 0x9d, 0x1d, 0x4a, 0x96, 0x0a, 0x84, 0x92, 0x15, 0x85, 0x9d, 0x4b, 0x2c,
	0x54, 0x6a, 0x19, 0xd6, 0xfb, 0xac, 0x03, 0x72, 0x25, 0xf3, 0xb2, 0x5f, 0xa9, 0x78, 0x3a, 0x1e,
	0x0b, 0x2a, 0x25, 0x7a, 0x04, 0xab, 0xfe, 0x44, 0x1d, 0x71, 0x11, 0xa8, 0xa9, 0xa9, 0x6d, 0x6b,
	0xfd, 0xd5, 0xa1, 0xf9, 0xf5, 0xe3, 0xde, 0x46, 0xa1, 0x5d, 0x60, 0x2f, 0x95, 0x08, 0x22, 0xe6,
	0xd5, 0x28, 0x72, 0xe0, 0x86, 0x9f, 0xd7, 0x4c, 0xfd, 0x0f, 0xa7, 0x4a, 0x10, 0xbd, 0x80, 0x15,
	0xc1, 0x4f, 0xa8, 0x34, 0x8d, 0x6d, 0xa3, 0xdf, 0x75, 0x1e, 0x92, 0xdf, 0x67, 0x43, 0x96, 0x6d,
	0x12, 0x2f, 0x3d, 0xf7, 0x2c, 0x52, 0x62, 0x3a, 0xbc, 0x76, 0xf6, 0x7d, 0xab, 0xe3, 0xe5, 0x9d,
	0xf0, 0x01, 0x40, 0x5d, 0x42, 0xeb, 0x60, 0x1c, 0xd3, 0xe2, 0x1a, 0x5e, 0xba, 0x44, 0x4f, 0x60,
	0x25, 0xf1, 0x4f, 0x26, 0x34, 0x33, 0xd9, 0x75, 0x76, 0x2e, 0x93, 0x4c, 0x9b, 0x14, 0x5a, 0x54,
	0x7a, 0xf9, 0x99, 0x7d, 0xfd, 0xb1, 0xb6, 0xbf, 0xf6, 0xf6, 0xe7, 0x87, 0xdd, 0xfa, 0xde, 0xbd,
	0xbb, 0x80, 0x97, 0xed, 0x79, 0x54, 0xc6, 0x3c, 0x92, 0xb4, 0xf7, 0x49, 0x87, 0x35, 0x57, 0xb2,
	0x57, 0xf1, 0xd8, 0x57, 0x34, 0x33, 0xf6, 0x57, 0x03, 0x76, 0x17, 0x03, 0x1e, 0x5c, 0x11, 0x70,
	0xc3, 0xe2, 0xff, 0x13, 0xae, 0x09, 0x9b, 0x8b, 0xd6, 0xaa, 0x60, 0xdf, 0x69, 0xb0, 0x9e, 0xe5,
	0x1e, 0xf2, 0x84, 0xfe, 0x83, 0xd9, 0x5d, 0xb2, 0x8a, 0xc1, 0xbc, 0xe8, 0xa7, 0x34, 0xeb, 0x7c,
	0xd1, 0xc1, 0x70, 0x25, 0x43, 0x6f, 0xe0, 0xd6, 0xc5, 0xcf, 0x6d, 0xb7, 0xfd, 0xcc, 0x63, 0xa7,
	0x3d, 0x5b, 0x4a, 0x23, 0x0a, 0xdd, 0xe6, 0xf0, 0xdd, 0x6b, 0x37, 0x01, 0x98, 0xb4, 0xe3, 0x2a,
	0x99, 0x63, 0xb8, 0xb9, 0xf8, 0x57, 0xf4, 0xaf, 0xf4, 0xda, 0x20, 0xf1, 0xfd, 0xb6, 0x64, 0x29,
	0x36, 0x7c, 0x7e, 0x36, 0xb3, 0xb4, 0xf3, 0x99, 0xa5, 0xfd, 0x98, 0x59, 0xda, 0xfb, 0xb9, 0xd5,
	0x39, 0x9f, 0x5b, 0x9d, 0x6f, 0x73, 0xab, 0xf3, 0x9a, 0xb0, 0x40, 0x1d, 0x4d, 0x0e, 0xc9, 0x88,
	0x87, 0x76, 0xdd, 0x75, 0x2f, 0xe0, 0x8d, 0x9d, 0x7d, 0x5a, 0xbd, 0x84, 0x87, 0xd7, 0xb3, 0xa7,
	0xf0, 0xc1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xad, 0x84, 0x9a, 0xb6, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAddress registers a new address with roles
	RegisterAddress(ctx context.Context, in *MsgRegisterAddress, opts ...grpc.CallOption) (*MsgRegisterAddressResponse, error)
	// UpdateRoles updates the roles for an existing address
	UpdateRoles(ctx context.Context, in *MsgUpdateRoles, opts ...grpc.CallOption) (*MsgUpdateRolesResponse, error)
	// RemoveAddress removes an address from the registry
	RemoveAddress(ctx context.Context, in *MsgRemoveAddress, opts ...grpc.CallOption) (*MsgRemoveAddressResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAddress(ctx context.Context, in *MsgRegisterAddress, opts ...grpc.CallOption) (*MsgRegisterAddressResponse, error) {
	out := new(MsgRegisterAddressResponse)
	err := c.cc.Invoke(ctx, "/provenance.registry.v1.Msg/RegisterAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRoles(ctx context.Context, in *MsgUpdateRoles, opts ...grpc.CallOption) (*MsgUpdateRolesResponse, error) {
	out := new(MsgUpdateRolesResponse)
	err := c.cc.Invoke(ctx, "/provenance.registry.v1.Msg/UpdateRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAddress(ctx context.Context, in *MsgRemoveAddress, opts ...grpc.CallOption) (*MsgRemoveAddressResponse, error) {
	out := new(MsgRemoveAddressResponse)
	err := c.cc.Invoke(ctx, "/provenance.registry.v1.Msg/RemoveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAddress registers a new address with roles
	RegisterAddress(context.Context, *MsgRegisterAddress) (*MsgRegisterAddressResponse, error)
	// UpdateRoles updates the roles for an existing address
	UpdateRoles(context.Context, *MsgUpdateRoles) (*MsgUpdateRolesResponse, error)
	// RemoveAddress removes an address from the registry
	RemoveAddress(context.Context, *MsgRemoveAddress) (*MsgRemoveAddressResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAddress(ctx context.Context, req *MsgRegisterAddress) (*MsgRegisterAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAddress not implemented")
}
func (*UnimplementedMsgServer) UpdateRoles(ctx context.Context, req *MsgUpdateRoles) (*MsgUpdateRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoles not implemented")
}
func (*UnimplementedMsgServer) RemoveAddress(ctx context.Context, req *MsgRemoveAddress) (*MsgRemoveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddress not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.registry.v1.Msg/RegisterAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAddress(ctx, req.(*MsgRegisterAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.registry.v1.Msg/UpdateRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRoles(ctx, req.(*MsgUpdateRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.registry.v1.Msg/RemoveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAddress(ctx, req.(*MsgRemoveAddress))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.registry.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAddress",
			Handler:    _Msg_RegisterAddress_Handler,
		},
		{
			MethodName: "UpdateRoles",
			Handler:    _Msg_UpdateRoles_Handler,
		},
		{
			MethodName: "RemoveAddress",
			Handler:    _Msg_RemoveAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/registry/v1/tx.proto",
}

func (m *MsgRegisterAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for k := range m.Roles {
			v := m.Roles[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRoles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRoles) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRoles) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for k := range m.Roles {
			v := m.Roles[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Roles) > 0 {
		for k, v := range m.Roles {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + l + sovTx(uint64(l))
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgRegisterAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRoles) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Roles) > 0 {
		for k, v := range m.Roles {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + 1 + l + sovTx(uint64(l))
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgUpdateRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roles == nil {
				m.Roles = make(map[string]RoleAddresses)
			}
			var mapkey string
			mapvalue := &RoleAddresses{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoleAddresses{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Roles[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRoles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRoles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRoles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roles == nil {
				m.Roles = make(map[string]RoleAddresses)
			}
			var mapkey string
			mapvalue := &RoleAddresses{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTx
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoleAddresses{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Roles[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
