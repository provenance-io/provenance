// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/registry/v1/registry.proto

package registry

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Role defines the different types of roles that can be assigned to addresses
type RegistryRole int32

const (
	// REGISTRY_ROLE_UNSPECIFIED indicates no role is assigned
	RegistryRole_REGISTRY_ROLE_UNSPECIFIED RegistryRole = 0
	// REGISTRY_ROLE_SERVICER indicates the address has servicer privileges
	RegistryRole_REGISTRY_ROLE_SERVICER RegistryRole = 1
	// REGISTRY_ROLE_SUBSERVICER indicates the address has subservicer privileges
	RegistryRole_REGISTRY_ROLE_SUBSERVICER RegistryRole = 2
	// REGISTRY_ROLE_CONTROLLER indicates the address has controller privileges
	RegistryRole_REGISTRY_ROLE_CONTROLLER RegistryRole = 3
	// REGISTRY_ROLE_CUSTODIAN indicates the address has custodian privileges
	RegistryRole_REGISTRY_ROLE_CUSTODIAN RegistryRole = 4
	// REGISTRY_ROLE_BORROWER indicates the address has borrower privileges
	RegistryRole_REGISTRY_ROLE_BORROWER RegistryRole = 5
	// REGISTRY_ROLE_ORIGINATOR indicates the address has originator privileges
	RegistryRole_REGISTRY_ROLE_ORIGINATOR RegistryRole = 6
)

var RegistryRole_name = map[int32]string{
	0: "REGISTRY_ROLE_UNSPECIFIED",
	1: "REGISTRY_ROLE_SERVICER",
	2: "REGISTRY_ROLE_SUBSERVICER",
	3: "REGISTRY_ROLE_CONTROLLER",
	4: "REGISTRY_ROLE_CUSTODIAN",
	5: "REGISTRY_ROLE_BORROWER",
	6: "REGISTRY_ROLE_ORIGINATOR",
}

var RegistryRole_value = map[string]int32{
	"REGISTRY_ROLE_UNSPECIFIED": 0,
	"REGISTRY_ROLE_SERVICER":    1,
	"REGISTRY_ROLE_SUBSERVICER": 2,
	"REGISTRY_ROLE_CONTROLLER":  3,
	"REGISTRY_ROLE_CUSTODIAN":   4,
	"REGISTRY_ROLE_BORROWER":    5,
	"REGISTRY_ROLE_ORIGINATOR":  6,
}

func (x RegistryRole) String() string {
	return proto.EnumName(RegistryRole_name, int32(x))
}

func (RegistryRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{0}
}

type RegistryKey struct {
	// Identifier for the nft that this ledger is linked to.
	// This could be a `x/metadata` scope id or an `x/nft` nft id.
	// In order to create a ledger for an nft, the nft class must be registered in the ledger module as a LedgerClass.
	NftId string `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	// Scope Specification ID or NFT Class ID
	AssetClassId string `protobuf:"bytes,2,opt,name=asset_class_id,json=assetClassId,proto3" json:"asset_class_id,omitempty"`
}

func (m *RegistryKey) Reset()         { *m = RegistryKey{} }
func (m *RegistryKey) String() string { return proto.CompactTextString(m) }
func (*RegistryKey) ProtoMessage()    {}
func (*RegistryKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{0}
}
func (m *RegistryKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryKey.Merge(m, src)
}
func (m *RegistryKey) XXX_Size() int {
	return m.Size()
}
func (m *RegistryKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryKey.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryKey proto.InternalMessageInfo

func (m *RegistryKey) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *RegistryKey) GetAssetClassId() string {
	if m != nil {
		return m.AssetClassId
	}
	return ""
}

// RegistryEntry represents a single entry in the registry, mapping a blockchain address to its roles
type RegistryEntry struct {
	// Key ties the registry entry to an asset class and nft id
	Key *RegistryKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// roles is a list of roles and addresses that can perform that role
	Roles []RolesEntry `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles"`
}

func (m *RegistryEntry) Reset()         { *m = RegistryEntry{} }
func (m *RegistryEntry) String() string { return proto.CompactTextString(m) }
func (*RegistryEntry) ProtoMessage()    {}
func (*RegistryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{1}
}
func (m *RegistryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryEntry.Merge(m, src)
}
func (m *RegistryEntry) XXX_Size() int {
	return m.Size()
}
func (m *RegistryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryEntry proto.InternalMessageInfo

func (m *RegistryEntry) GetKey() *RegistryKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RegistryEntry) GetRoles() []RolesEntry {
	if m != nil {
		return m.Roles
	}
	return nil
}

type RolesEntry struct {
	Role RegistryRole `protobuf:"varint,1,opt,name=role,proto3,enum=provenance.registry.v1.RegistryRole" json:"role,omitempty"`
	// addresses is the list of blockchain addresses that can perform this role
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *RolesEntry) Reset()         { *m = RolesEntry{} }
func (m *RolesEntry) String() string { return proto.CompactTextString(m) }
func (*RolesEntry) ProtoMessage()    {}
func (*RolesEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{2}
}
func (m *RolesEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolesEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolesEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolesEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolesEntry.Merge(m, src)
}
func (m *RolesEntry) XXX_Size() int {
	return m.Size()
}
func (m *RolesEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RolesEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RolesEntry proto.InternalMessageInfo

func (m *RolesEntry) GetRole() RegistryRole {
	if m != nil {
		return m.Role
	}
	return RegistryRole_REGISTRY_ROLE_UNSPECIFIED
}

func (m *RolesEntry) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// GenesisState defines the registry module's genesis state
type GenesisState struct {
	// entries is the list of registry entries
	Entries []RegistryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetEntries() []RegistryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("provenance.registry.v1.RegistryRole", RegistryRole_name, RegistryRole_value)
	proto.RegisterType((*RegistryKey)(nil), "provenance.registry.v1.RegistryKey")
	proto.RegisterType((*RegistryEntry)(nil), "provenance.registry.v1.RegistryEntry")
	proto.RegisterType((*RolesEntry)(nil), "provenance.registry.v1.RolesEntry")
	proto.RegisterType((*GenesisState)(nil), "provenance.registry.v1.GenesisState")
}

func init() {
	proto.RegisterFile("provenance/registry/v1/registry.proto", fileDescriptor_2fa7a0b4d34d0208)
}

var fileDescriptor_2fa7a0b4d34d0208 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0xcd, 0x1f, 0x94, 0x49, 0xa8, 0xac, 0x55, 0x29, 0x49, 0x00, 0x53, 0x99, 0x56,
	0xaa, 0x90, 0x6a, 0xab, 0x41, 0x20, 0x4e, 0x48, 0x71, 0xba, 0x44, 0x86, 0x28, 0xae, 0xd6, 0x09,
	0x08, 0x2e, 0x96, 0x1b, 0x6f, 0x8d, 0x45, 0xeb, 0xad, 0xbc, 0x4b, 0x44, 0x2e, 0x1c, 0x39, 0xf3,
	0x30, 0x3c, 0x44, 0x8f, 0x15, 0x27, 0x2e, 0x20, 0x94, 0xbc, 0x08, 0xb2, 0x9d, 0x26, 0x29, 0xa1,
	0xea, 0x6d, 0x77, 0x7e, 0xdf, 0x37, 0xfb, 0xcd, 0xc8, 0x86, 0x9d, 0xb3, 0x98, 0x8f, 0x58, 0xe4,
	0x45, 0x43, 0x66, 0xc4, 0x2c, 0x08, 0x85, 0x8c, 0xc7, 0xc6, 0x68, 0x7f, 0x7e, 0xd6, 0xcf, 0x62,
	0x2e, 0x39, 0xde, 0x5c, 0xc8, 0xf4, 0x39, 0x1a, 0xed, 0x37, 0x36, 0x02, 0x1e, 0xf0, 0x54, 0x62,
	0x24, 0xa7, 0x4c, 0xdd, 0xa8, 0x0f, 0xb9, 0x38, 0xe5, 0xc2, 0xcd, 0x40, 0x76, 0xc9, 0x90, 0xf6,
	0x0a, 0x2a, 0x74, 0xe6, 0x7f, 0xcd, 0xc6, 0xf8, 0x0e, 0x94, 0xa2, 0x63, 0xe9, 0x86, 0x7e, 0x0d,
	0x6d, 0xa1, 0xdd, 0x32, 0x2d, 0x46, 0xc7, 0xd2, 0xf2, 0xf1, 0x36, 0xac, 0x7b, 0x42, 0x30, 0xe9,
	0x0e, 0x4f, 0x3c, 0x21, 0x12, 0xbc, 0x96, 0xe2, 0x6a, 0x5a, 0x6d, 0x27, 0x45, 0xcb, 0xd7, 0xbe,
	0x22, 0xb8, 0x7d, 0xd9, 0x8c, 0x44, 0x32, 0x1e, 0xe3, 0xa7, 0x90, 0xff, 0xc8, 0xc6, 0x69, 0xaf,
	0x4a, 0xf3, 0x91, 0xfe, 0xff, 0xd0, 0xfa, 0x52, 0x00, 0x9a, 0xe8, 0xf1, 0x0b, 0x28, 0xc6, 0xfc,
	0x84, 0x89, 0xda, 0xda, 0x56, 0x7e, 0xb7, 0xd2, 0xd4, 0xae, 0x35, 0x26, 0xa2, 0xf4, 0x25, 0xb3,
	0x70, 0xfe, 0xfb, 0x61, 0x8e, 0x66, 0x36, 0xed, 0x0b, 0xc0, 0x02, 0xe1, 0xe7, 0x50, 0x48, 0xca,
	0x69, 0x8a, 0xf5, 0xe6, 0xf6, 0x4d, 0x29, 0x12, 0x27, 0x4d, 0x1d, 0xf8, 0x19, 0x94, 0x3d, 0xdf,
	0x8f, 0x99, 0x10, 0xb3, 0x2c, 0x65, 0xb3, 0xf6, 0xe3, 0xfb, 0xde, 0xc6, 0x6c, 0x83, 0xad, 0x8c,
	0x39, 0x32, 0x0e, 0xa3, 0x80, 0x2e, 0xa4, 0xda, 0x00, 0xaa, 0x1d, 0x16, 0x31, 0x11, 0x0a, 0x47,
	0x7a, 0x92, 0x61, 0x02, 0xb7, 0x58, 0x24, 0xe3, 0x90, 0x89, 0x1a, 0x4a, 0x27, 0xda, 0xb9, 0x29,
	0xc4, 0xf2, 0x50, 0x97, 0xde, 0xc7, 0xbf, 0x10, 0x54, 0x97, 0x53, 0xe2, 0x07, 0x50, 0xa7, 0xa4,
	0x63, 0x39, 0x7d, 0xfa, 0xce, 0xa5, 0x76, 0x97, 0xb8, 0x83, 0x9e, 0x73, 0x48, 0xda, 0xd6, 0x4b,
	0x8b, 0x1c, 0x28, 0x39, 0xdc, 0x80, 0xcd, 0xab, 0xd8, 0x21, 0xf4, 0x8d, 0xd5, 0x26, 0x54, 0x41,
	0xab, 0x56, 0x67, 0x60, 0xce, 0xf1, 0x1a, 0xbe, 0x0f, 0xb5, 0xab, 0xb8, 0x6d, 0xf7, 0xfa, 0xd4,
	0xee, 0x76, 0x09, 0x55, 0xf2, 0xf8, 0x1e, 0xdc, 0xfd, 0x87, 0x0e, 0x9c, 0xbe, 0x7d, 0x60, 0xb5,
	0x7a, 0x4a, 0x61, 0xf5, 0x55, 0xd3, 0xa6, 0xd4, 0x7e, 0x4b, 0xa8, 0x52, 0x5c, 0x6d, 0x6b, 0x53,
	0xab, 0x63, 0xf5, 0x5a, 0x7d, 0x9b, 0x2a, 0x25, 0x93, 0x9d, 0x4f, 0x54, 0x74, 0x31, 0x51, 0xd1,
	0x9f, 0x89, 0x8a, 0xbe, 0x4d, 0xd5, 0xdc, 0xc5, 0x54, 0xcd, 0xfd, 0x9c, 0xaa, 0x39, 0xa8, 0x87,
	0xfc, 0x9a, 0x8d, 0x1d, 0xa2, 0xf7, 0x7a, 0x10, 0xca, 0x0f, 0x9f, 0x8e, 0xf4, 0x21, 0x3f, 0x35,
	0x16, 0xa2, 0xbd, 0x90, 0x2f, 0xdd, 0x8c, 0xcf, 0xf3, 0x3f, 0xe8, 0xa8, 0x94, 0x7e, 0xf9, 0x4f,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xf2, 0x6a, 0x33, 0x6b, 0x03, 0x00, 0x00,
}

func (m *RegistryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetClassId) > 0 {
		i -= len(m.AssetClassId)
		copy(dAtA[i:], m.AssetClassId)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.AssetClassId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Roles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRegistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolesEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolesEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolesEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Role != 0 {
		i = encodeVarintRegistry(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistryKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	l = len(m.AssetClassId)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	return n
}

func (m *RegistryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, e := range m.Roles {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *RolesEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovRegistry(uint64(m.Role))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegistryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &RegistryKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, RolesEntry{})
			if err := m.Roles[len(m.Roles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolesEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolesEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolesEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= RegistryRole(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, RegistryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistry = fmt.Errorf("proto: unexpected end of group")
)
