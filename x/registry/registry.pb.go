// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/registry/v1/registry.proto

package registry

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Role defines the different types of roles that can be assigned to addresses
type RegistryRole int32

const (
	// REGISTRY_ROLE_UNSPECIFIED indicates no role is assigned
	RegistryRole_REGISTRY_ROLE_UNSPECIFIED RegistryRole = 0
	// REGISTRY_ROLE_SERVICER indicates the address has servicer privileges
	RegistryRole_REGISTRY_ROLE_SERVICER RegistryRole = 1
	// REGISTRY_ROLE_SUBSERVICER indicates the address has subservicer privileges
	RegistryRole_REGISTRY_ROLE_SUBSERVICER RegistryRole = 2
	// REGISTRY_ROLE_CONTROLLER indicates the address has controller privileges
	RegistryRole_REGISTRY_ROLE_CONTROLLER RegistryRole = 3
	// REGISTRY_ROLE_CUSTODIAN indicates the address has custodian privileges
	RegistryRole_REGISTRY_ROLE_CUSTODIAN RegistryRole = 4
	// REGISTRY_ROLE_BORROWER indicates the address has borrower privileges
	RegistryRole_REGISTRY_ROLE_BORROWER RegistryRole = 5
	// REGISTRY_ROLE_ORIGINATOR indicates the address has originator privileges
	RegistryRole_REGISTRY_ROLE_ORIGINATOR RegistryRole = 6
)

var RegistryRole_name = map[int32]string{
	0: "REGISTRY_ROLE_UNSPECIFIED",
	1: "REGISTRY_ROLE_SERVICER",
	2: "REGISTRY_ROLE_SUBSERVICER",
	3: "REGISTRY_ROLE_CONTROLLER",
	4: "REGISTRY_ROLE_CUSTODIAN",
	5: "REGISTRY_ROLE_BORROWER",
	6: "REGISTRY_ROLE_ORIGINATOR",
}

var RegistryRole_value = map[string]int32{
	"REGISTRY_ROLE_UNSPECIFIED": 0,
	"REGISTRY_ROLE_SERVICER":    1,
	"REGISTRY_ROLE_SUBSERVICER": 2,
	"REGISTRY_ROLE_CONTROLLER":  3,
	"REGISTRY_ROLE_CUSTODIAN":   4,
	"REGISTRY_ROLE_BORROWER":    5,
	"REGISTRY_ROLE_ORIGINATOR":  6,
}

func (x RegistryRole) String() string {
	return proto.EnumName(RegistryRole_name, int32(x))
}

func (RegistryRole) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{0}
}

// RegistryEntry represents a single entry in the registry, mapping a blockchain address to its roles
type RegistryEntry struct {
	// address is the blockchain address that owns this registry entry
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// roles is a map of role names to lists of addresses that can perform that role
	Roles map[string]RoleAddresses `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RegistryEntry) Reset()         { *m = RegistryEntry{} }
func (m *RegistryEntry) String() string { return proto.CompactTextString(m) }
func (*RegistryEntry) ProtoMessage()    {}
func (*RegistryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{0}
}
func (m *RegistryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryEntry.Merge(m, src)
}
func (m *RegistryEntry) XXX_Size() int {
	return m.Size()
}
func (m *RegistryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryEntry proto.InternalMessageInfo

func (m *RegistryEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RegistryEntry) GetRoles() map[string]RoleAddresses {
	if m != nil {
		return m.Roles
	}
	return nil
}

// RoleAddresses contains a list of addresses that can perform a specific role
type RoleAddresses struct {
	// addresses is the list of blockchain addresses that can perform this role
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *RoleAddresses) Reset()         { *m = RoleAddresses{} }
func (m *RoleAddresses) String() string { return proto.CompactTextString(m) }
func (*RoleAddresses) ProtoMessage()    {}
func (*RoleAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{1}
}
func (m *RoleAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleAddresses.Merge(m, src)
}
func (m *RoleAddresses) XXX_Size() int {
	return m.Size()
}
func (m *RoleAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_RoleAddresses proto.InternalMessageInfo

func (m *RoleAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// GenesisState defines the registry module's genesis state
type GenesisState struct {
	// entries is the list of registry entries
	Entries []RegistryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fa7a0b4d34d0208, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetEntries() []RegistryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("provenance.registry.v1.RegistryRole", RegistryRole_name, RegistryRole_value)
	proto.RegisterType((*RegistryEntry)(nil), "provenance.registry.v1.RegistryEntry")
	proto.RegisterMapType((map[string]RoleAddresses)(nil), "provenance.registry.v1.RegistryEntry.RolesEntry")
	proto.RegisterType((*RoleAddresses)(nil), "provenance.registry.v1.RoleAddresses")
	proto.RegisterType((*GenesisState)(nil), "provenance.registry.v1.GenesisState")
}

func init() {
	proto.RegisterFile("provenance/registry/v1/registry.proto", fileDescriptor_2fa7a0b4d34d0208)
}

var fileDescriptor_2fa7a0b4d34d0208 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x51, 0x6b, 0xd3, 0x50,
	0x14, 0xc7, 0x73, 0xdb, 0x75, 0x63, 0x67, 0x1b, 0x84, 0xcb, 0x98, 0x59, 0xd5, 0x58, 0x0a, 0x83,
	0x22, 0x2c, 0x71, 0x15, 0x44, 0xf4, 0xa9, 0xe9, 0xae, 0x35, 0x50, 0x1a, 0x39, 0x69, 0x15, 0x7d,
	0x29, 0x59, 0x77, 0x89, 0xc1, 0x2e, 0x77, 0xdc, 0x9b, 0x15, 0xfb, 0x2d, 0xfc, 0x30, 0x7e, 0x88,
	0x3d, 0x0e, 0x9f, 0x7c, 0x51, 0xa4, 0xfd, 0x06, 0x7e, 0x02, 0x69, 0x93, 0xb6, 0x8b, 0xd5, 0xbd,
	0x9d, 0xc3, 0xef, 0xff, 0x3f, 0xe7, 0x7f, 0x0f, 0x09, 0x1c, 0x5d, 0x4a, 0x31, 0xe2, 0x71, 0x10,
	0x0f, 0xb8, 0x2d, 0x79, 0x18, 0xa9, 0x44, 0x8e, 0xed, 0xd1, 0xc9, 0xb2, 0xb6, 0x2e, 0xa5, 0x48,
	0x04, 0x3d, 0x58, 0xc9, 0xac, 0x25, 0x1a, 0x9d, 0x94, 0xf7, 0x43, 0x11, 0x8a, 0xb9, 0xc4, 0x9e,
	0x55, 0xa9, 0xba, 0x7c, 0x38, 0x10, 0xea, 0x42, 0xa8, 0x7e, 0x0a, 0xd2, 0x26, 0x45, 0xd5, 0xdf,
	0x04, 0xf6, 0x30, 0x1b, 0xc0, 0xe2, 0x44, 0x8e, 0x69, 0x1d, 0xb6, 0x82, 0xf3, 0x73, 0xc9, 0x95,
	0x32, 0x48, 0x85, 0xd4, 0xb6, 0x1d, 0xe3, 0xdb, 0xd7, 0xe3, 0xfd, 0xcc, 0xd4, 0x48, 0x89, 0x9f,
	0xc8, 0x28, 0x0e, 0x71, 0x21, 0xa4, 0x6d, 0x28, 0x49, 0x31, 0xe4, 0xca, 0x28, 0x54, 0x8a, 0xb5,
	0x9d, 0xfa, 0x13, 0xeb, 0xdf, 0xf1, 0xac, 0xdc, 0x26, 0x0b, 0x67, 0x96, 0x79, 0xe9, 0x6c, 0x5c,
	0xff, 0x7c, 0xa4, 0x61, 0x3a, 0xa4, 0xdc, 0x07, 0x58, 0x21, 0xaa, 0x43, 0xf1, 0x13, 0x1f, 0xa7,
	0x59, 0x70, 0x56, 0xd2, 0x97, 0x50, 0x1a, 0x05, 0xc3, 0x2b, 0x6e, 0x14, 0x2a, 0xa4, 0xb6, 0x53,
	0x3f, 0xfa, 0xef, 0x36, 0x31, 0xe4, 0x59, 0x60, 0xae, 0x30, 0xf5, 0xbc, 0x28, 0x3c, 0x27, 0xd5,
	0x16, 0xec, 0xe5, 0x18, 0x7d, 0x06, 0xdb, 0xc1, 0xa2, 0x31, 0x48, 0xa5, 0x78, 0xe7, 0xab, 0x57,
	0xd2, 0x6a, 0x0f, 0x76, 0x5b, 0x3c, 0xe6, 0x2a, 0x52, 0x7e, 0x12, 0x24, 0x9c, 0x32, 0xd8, 0xe2,
	0x71, 0x22, 0xa3, 0x6c, 0xca, 0x5d, 0xd9, 0x6e, 0x5f, 0x22, 0x7b, 0xfe, 0xc2, 0xfb, 0xf8, 0x07,
	0x81, 0xdd, 0x85, 0x60, 0x16, 0x94, 0x3e, 0x84, 0x43, 0x64, 0x2d, 0xd7, 0xef, 0xe2, 0xfb, 0x3e,
	0x7a, 0x6d, 0xd6, 0xef, 0x75, 0xfc, 0x37, 0xac, 0xe9, 0xbe, 0x72, 0xd9, 0xa9, 0xae, 0xd1, 0x32,
	0x1c, 0xe4, 0xb1, 0xcf, 0xf0, 0xad, 0xdb, 0x64, 0xa8, 0x93, 0x75, 0xab, 0xdf, 0x73, 0x96, 0xb8,
	0x40, 0x1f, 0x80, 0x91, 0xc7, 0x4d, 0xaf, 0xd3, 0x45, 0xaf, 0xdd, 0x66, 0xa8, 0x17, 0xe9, 0x7d,
	0xb8, 0xf7, 0x17, 0xed, 0xf9, 0x5d, 0xef, 0xd4, 0x6d, 0x74, 0xf4, 0x8d, 0xf5, 0xad, 0x8e, 0x87,
	0xe8, 0xbd, 0x63, 0xa8, 0x97, 0xd6, 0xc7, 0x7a, 0xe8, 0xb6, 0xdc, 0x4e, 0xa3, 0xeb, 0xa1, 0xbe,
	0xe9, 0xbc, 0xbe, 0x9e, 0x98, 0xe4, 0x66, 0x62, 0x92, 0x5f, 0x13, 0x93, 0x7c, 0x99, 0x9a, 0xda,
	0xcd, 0xd4, 0xd4, 0xbe, 0x4f, 0x4d, 0xed, 0x83, 0x15, 0x46, 0xc9, 0xc7, 0xab, 0x33, 0x6b, 0x20,
	0x2e, 0xec, 0xd5, 0xe5, 0x8e, 0x23, 0x71, 0xab, 0xb3, 0x3f, 0x2f, 0xff, 0x86, 0xb3, 0xcd, 0xf9,
	0x57, 0xfc, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25, 0x58, 0xca, 0x1e, 0x37, 0x03, 0x00,
	0x00,
}

func (m *RegistryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		for k := range m.Roles {
			v := m.Roles[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRegistry(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRegistry(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRegistry(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RoleAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintRegistry(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRegistry(uint64(l))
	}
	if len(m.Roles) > 0 {
		for k, v := range m.Roles {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovRegistry(uint64(len(k))) + 1 + l + sovRegistry(uint64(l))
			n += mapEntrySize + 1 + sovRegistry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoleAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRegistry(uint64(l))
		}
	}
	return n
}

func sovRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistry(x uint64) (n int) {
	return sovRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegistryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roles == nil {
				m.Roles = make(map[string]RoleAddresses)
			}
			var mapkey string
			mapvalue := &RoleAddresses{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRegistry
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRegistry
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRegistry
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoleAddresses{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRegistry(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRegistry
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Roles[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, RegistryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistry = fmt.Errorf("proto: unexpected end of group")
)
