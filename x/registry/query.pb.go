// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/registry/v1/query.proto

package registry

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryGetRegistryEntryRequest is the request type for the Query/GetRegistryEntry RPC method
type QueryGetRegistryEntryRequest struct {
	// address is the blockchain address to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetRegistryEntryRequest) Reset()         { *m = QueryGetRegistryEntryRequest{} }
func (m *QueryGetRegistryEntryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryEntryRequest) ProtoMessage()    {}
func (*QueryGetRegistryEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c166c561e401a2eb, []int{0}
}
func (m *QueryGetRegistryEntryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryEntryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryEntryRequest.Merge(m, src)
}
func (m *QueryGetRegistryEntryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryEntryRequest proto.InternalMessageInfo

func (m *QueryGetRegistryEntryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryGetRegistryEntryResponse is the response type for the Query/GetRegistryEntry RPC method
type QueryGetRegistryEntryResponse struct {
	// entry is the registry entry for the requested address
	Entry RegistryEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry"`
}

func (m *QueryGetRegistryEntryResponse) Reset()         { *m = QueryGetRegistryEntryResponse{} }
func (m *QueryGetRegistryEntryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRegistryEntryResponse) ProtoMessage()    {}
func (*QueryGetRegistryEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c166c561e401a2eb, []int{1}
}
func (m *QueryGetRegistryEntryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRegistryEntryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRegistryEntryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRegistryEntryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRegistryEntryResponse.Merge(m, src)
}
func (m *QueryGetRegistryEntryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRegistryEntryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRegistryEntryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRegistryEntryResponse proto.InternalMessageInfo

func (m *QueryGetRegistryEntryResponse) GetEntry() RegistryEntry {
	if m != nil {
		return m.Entry
	}
	return RegistryEntry{}
}

// QueryListRegistryEntriesRequest is the request type for the Query/ListRegistryEntries RPC method
type QueryListRegistryEntriesRequest struct {
	// pagination defines an optional pagination for the request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRegistryEntriesRequest) Reset()         { *m = QueryListRegistryEntriesRequest{} }
func (m *QueryListRegistryEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListRegistryEntriesRequest) ProtoMessage()    {}
func (*QueryListRegistryEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c166c561e401a2eb, []int{2}
}
func (m *QueryListRegistryEntriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRegistryEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRegistryEntriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRegistryEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRegistryEntriesRequest.Merge(m, src)
}
func (m *QueryListRegistryEntriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRegistryEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRegistryEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRegistryEntriesRequest proto.InternalMessageInfo

func (m *QueryListRegistryEntriesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListRegistryEntriesResponse is the response type for the Query/ListRegistryEntries RPC method
type QueryListRegistryEntriesResponse struct {
	// entries is the list of registry entries
	Entries []RegistryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries"`
	// pagination defines the pagination in the response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListRegistryEntriesResponse) Reset()         { *m = QueryListRegistryEntriesResponse{} }
func (m *QueryListRegistryEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListRegistryEntriesResponse) ProtoMessage()    {}
func (*QueryListRegistryEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c166c561e401a2eb, []int{3}
}
func (m *QueryListRegistryEntriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListRegistryEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListRegistryEntriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListRegistryEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListRegistryEntriesResponse.Merge(m, src)
}
func (m *QueryListRegistryEntriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListRegistryEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListRegistryEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListRegistryEntriesResponse proto.InternalMessageInfo

func (m *QueryListRegistryEntriesResponse) GetEntries() []RegistryEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *QueryListRegistryEntriesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetRegistryEntryRequest)(nil), "provenance.registry.v1.QueryGetRegistryEntryRequest")
	proto.RegisterType((*QueryGetRegistryEntryResponse)(nil), "provenance.registry.v1.QueryGetRegistryEntryResponse")
	proto.RegisterType((*QueryListRegistryEntriesRequest)(nil), "provenance.registry.v1.QueryListRegistryEntriesRequest")
	proto.RegisterType((*QueryListRegistryEntriesResponse)(nil), "provenance.registry.v1.QueryListRegistryEntriesResponse")
}

func init() {
	proto.RegisterFile("provenance/registry/v1/query.proto", fileDescriptor_c166c561e401a2eb)
}

var fileDescriptor_c166c561e401a2eb = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xe3, 0x40, 0xa9, 0x30, 0x17, 0x64, 0x2a, 0x14, 0xa2, 0xb2, 0x09, 0x2b, 0x95, 0x00,
	0x52, 0x6d, 0x25, 0x80, 0xe0, 0xda, 0x48, 0xa5, 0x1c, 0x38, 0xc0, 0x72, 0xe3, 0x82, 0xbc, 0xe9,
	0xc8, 0x58, 0xa2, 0xf6, 0xd6, 0x76, 0x22, 0x22, 0xc4, 0x85, 0x27, 0x40, 0xe2, 0x45, 0x00, 0xf1,
	0x10, 0x3d, 0x56, 0x70, 0xe1, 0x84, 0x50, 0xc2, 0x99, 0x67, 0x40, 0xb1, 0x9d, 0x76, 0x83, 0xba,
	0x41, 0xb9, 0x25, 0x9e, 0xff, 0x9f, 0xff, 0xf3, 0x78, 0x16, 0xa7, 0x85, 0xd1, 0x23, 0x50, 0x5c,
	0x0d, 0x80, 0x19, 0x10, 0xd2, 0x3a, 0x33, 0x66, 0xa3, 0x2e, 0x3b, 0x1c, 0x82, 0x19, 0xd3, 0xc2,
	0x68, 0xa7, 0xc9, 0xd5, 0x53, 0x0d, 0x9d, 0x6b, 0xe8, 0xa8, 0xdb, 0xdc, 0x10, 0x5a, 0x68, 0x2f,
	0x61, 0xb3, 0x5f, 0x41, 0xdd, 0xbc, 0x36, 0xd0, 0xf6, 0x40, 0xdb, 0x97, 0xa1, 0x10, 0xfe, 0xc4,
	0xd2, 0x56, 0x45, 0xd8, 0x49, 0xd3, 0x20, 0xbb, 0x13, 0x4c, 0x2c, 0xe7, 0x16, 0x02, 0x08, 0x1b,
	0x75, 0x73, 0x70, 0xbc, 0xcb, 0x0a, 0x2e, 0xa4, 0xe2, 0x4e, 0x6a, 0x15, 0xb5, 0x9b, 0x42, 0x6b,
	0xf1, 0x1a, 0x18, 0x2f, 0x24, 0xe3, 0x4a, 0x69, 0xe7, 0x8b, 0x31, 0x30, 0xcd, 0xf0, 0xe6, 0xb3,
	0x99, 0x7f, 0x0f, 0x5c, 0x16, 0x33, 0x76, 0x95, 0x33, 0xe3, 0x0c, 0x0e, 0x87, 0x60, 0x1d, 0xe9,
	0xe1, 0x75, 0xbe, 0xbf, 0x6f, 0xc0, 0xda, 0x06, 0x6a, 0xa3, 0x5b, 0x17, 0xfb, 0x8d, 0x6f, 0x5f,
	0xb7, 0x37, 0x22, 0xf3, 0x4e, 0xa8, 0x3c, 0x77, 0x46, 0x2a, 0x91, 0xcd, 0x85, 0x69, 0x8e, 0xaf,
	0x57, 0xf4, 0xb4, 0x85, 0x56, 0x16, 0xc8, 0x0e, 0x5e, 0x83, 0xd9, 0x81, 0x6f, 0x79, 0xa9, 0xb7,
	0x45, 0xcf, 0x1e, 0x1f, 0x5d, 0x70, 0xf7, 0xcf, 0x1f, 0xfd, 0x6c, 0xd5, 0xb2, 0xe0, 0x4c, 0x25,
	0x6e, 0xf9, 0x8c, 0x27, 0xd2, 0x2e, 0x84, 0x48, 0xb0, 0x73, 0xf4, 0x47, 0x18, 0x9f, 0x0e, 0x23,
	0x46, 0xdd, 0xa4, 0x11, 0x7d, 0x36, 0x39, 0x1a, 0x9e, 0x30, 0x4e, 0x8e, 0x3e, 0xe5, 0x02, 0xa2,
	0x37, 0x2b, 0x39, 0xd3, 0x2f, 0x08, 0xb7, 0xab, 0xb3, 0xe2, 0x95, 0x76, 0xf1, 0x3a, 0x84, 0xa3,
	0x06, 0x6a, 0x9f, 0x5b, 0xf5, 0x52, 0x73, 0x2f, 0xd9, 0x5b, 0x60, 0xae, 0x7b, 0xe6, 0xce, 0x7f,
	0x99, 0x03, 0x43, 0x19, 0xba, 0xf7, 0xa7, 0x8e, 0xd7, 0x3c, 0x34, 0xf9, 0x84, 0xf0, 0xe5, 0x7f,
	0x5f, 0x82, 0xdc, 0xab, 0xa2, 0x5b, 0xb6, 0x0c, 0xcd, 0xfb, 0x2b, 0xba, 0x02, 0x57, 0xca, 0xde,
	0x7f, 0xff, 0xfd, 0xb1, 0x7e, 0x9b, 0x74, 0x58, 0xc5, 0x76, 0xfb, 0x27, 0x65, 0x6f, 0xe3, 0xfe,
	0xbc, 0x23, 0x9f, 0x11, 0xbe, 0x72, 0xc6, 0xb0, 0xc9, 0x83, 0xa5, 0xf9, 0xd5, 0xab, 0xd0, 0x7c,
	0xb8, 0xba, 0x31, 0xb2, 0x77, 0x3c, 0xfb, 0x0d, 0xd2, 0x5a, 0xc6, 0x2e, 0xc1, 0xf6, 0x1f, 0x1f,
	0x4d, 0x12, 0x74, 0x3c, 0x49, 0xd0, 0xaf, 0x49, 0x82, 0x3e, 0x4c, 0x93, 0xda, 0xf1, 0x34, 0xa9,
	0xfd, 0x98, 0x26, 0xb5, 0x17, 0x54, 0x48, 0xf7, 0x6a, 0x98, 0xd3, 0x81, 0x3e, 0x28, 0x35, 0xd9,
	0x96, 0xba, 0xdc, 0xf2, 0xcd, 0x49, 0xd3, 0xfc, 0x82, 0xff, 0x32, 0xef, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0xc1, 0x87, 0xc7, 0x18, 0x79, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetRegistryEntry returns the registry entry for a given address
	GetRegistryEntry(ctx context.Context, in *QueryGetRegistryEntryRequest, opts ...grpc.CallOption) (*QueryGetRegistryEntryResponse, error)
	// ListRegistryEntries returns all registry entries
	ListRegistryEntries(ctx context.Context, in *QueryListRegistryEntriesRequest, opts ...grpc.CallOption) (*QueryListRegistryEntriesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetRegistryEntry(ctx context.Context, in *QueryGetRegistryEntryRequest, opts ...grpc.CallOption) (*QueryGetRegistryEntryResponse, error) {
	out := new(QueryGetRegistryEntryResponse)
	err := c.cc.Invoke(ctx, "/provenance.registry.v1.Query/GetRegistryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRegistryEntries(ctx context.Context, in *QueryListRegistryEntriesRequest, opts ...grpc.CallOption) (*QueryListRegistryEntriesResponse, error) {
	out := new(QueryListRegistryEntriesResponse)
	err := c.cc.Invoke(ctx, "/provenance.registry.v1.Query/ListRegistryEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetRegistryEntry returns the registry entry for a given address
	GetRegistryEntry(context.Context, *QueryGetRegistryEntryRequest) (*QueryGetRegistryEntryResponse, error)
	// ListRegistryEntries returns all registry entries
	ListRegistryEntries(context.Context, *QueryListRegistryEntriesRequest) (*QueryListRegistryEntriesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetRegistryEntry(ctx context.Context, req *QueryGetRegistryEntryRequest) (*QueryGetRegistryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryEntry not implemented")
}
func (*UnimplementedQueryServer) ListRegistryEntries(ctx context.Context, req *QueryListRegistryEntriesRequest) (*QueryListRegistryEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryEntries not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetRegistryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRegistryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRegistryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.registry.v1.Query/GetRegistryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRegistryEntry(ctx, req.(*QueryGetRegistryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRegistryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRegistryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRegistryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provenance.registry.v1.Query/ListRegistryEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRegistryEntries(ctx, req.(*QueryListRegistryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provenance.registry.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegistryEntry",
			Handler:    _Query_GetRegistryEntry_Handler,
		},
		{
			MethodName: "ListRegistryEntries",
			Handler:    _Query_ListRegistryEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provenance/registry/v1/query.proto",
}

func (m *QueryGetRegistryEntryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryEntryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryEntryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRegistryEntryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRegistryEntryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRegistryEntryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Entry.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListRegistryEntriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRegistryEntriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRegistryEntriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListRegistryEntriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListRegistryEntriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListRegistryEntriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetRegistryEntryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRegistryEntryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Entry.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListRegistryEntriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListRegistryEntriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetRegistryEntryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryEntryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryEntryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRegistryEntryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRegistryEntryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRegistryEntryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRegistryEntriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRegistryEntriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRegistryEntriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListRegistryEntriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListRegistryEntriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListRegistryEntriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, RegistryEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
