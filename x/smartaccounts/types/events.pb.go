// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/smartaccounts/v1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Events
type EventSmartAccountInit struct {
	Address         string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CredentialCount uint64 `protobuf:"varint,2,opt,name=credential_count,json=credentialCount,proto3" json:"credential_count,omitempty"`
}

func (m *EventSmartAccountInit) Reset()         { *m = EventSmartAccountInit{} }
func (m *EventSmartAccountInit) String() string { return proto.CompactTextString(m) }
func (*EventSmartAccountInit) ProtoMessage()    {}
func (*EventSmartAccountInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1341371c8c5f5, []int{0}
}
func (m *EventSmartAccountInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSmartAccountInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSmartAccountInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSmartAccountInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSmartAccountInit.Merge(m, src)
}
func (m *EventSmartAccountInit) XXX_Size() int {
	return m.Size()
}
func (m *EventSmartAccountInit) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSmartAccountInit.DiscardUnknown(m)
}

var xxx_messageInfo_EventSmartAccountInit proto.InternalMessageInfo

func (m *EventSmartAccountInit) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventSmartAccountInit) GetCredentialCount() uint64 {
	if m != nil {
		return m.CredentialCount
	}
	return 0
}

// Event emitted when a WebAuthn credential is added to a smart account
type EventFido2CredentialAdd struct {
	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CredentialNumber uint64 `protobuf:"varint,2,opt,name=credential_number,json=credentialNumber,proto3" json:"credential_number,omitempty"`
	CredentialId     string `protobuf:"bytes,3,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
}

func (m *EventFido2CredentialAdd) Reset()         { *m = EventFido2CredentialAdd{} }
func (m *EventFido2CredentialAdd) String() string { return proto.CompactTextString(m) }
func (*EventFido2CredentialAdd) ProtoMessage()    {}
func (*EventFido2CredentialAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1341371c8c5f5, []int{1}
}
func (m *EventFido2CredentialAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFido2CredentialAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFido2CredentialAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFido2CredentialAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFido2CredentialAdd.Merge(m, src)
}
func (m *EventFido2CredentialAdd) XXX_Size() int {
	return m.Size()
}
func (m *EventFido2CredentialAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFido2CredentialAdd.DiscardUnknown(m)
}

var xxx_messageInfo_EventFido2CredentialAdd proto.InternalMessageInfo

func (m *EventFido2CredentialAdd) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventFido2CredentialAdd) GetCredentialNumber() uint64 {
	if m != nil {
		return m.CredentialNumber
	}
	return 0
}

func (m *EventFido2CredentialAdd) GetCredentialId() string {
	if m != nil {
		return m.CredentialId
	}
	return ""
}

// Event emitted when a Cosmos credential is added to a smart account
type EventCosmosCredentialAdd struct {
	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CredentialNumber uint64 `protobuf:"varint,2,opt,name=credential_number,json=credentialNumber,proto3" json:"credential_number,omitempty"`
}

func (m *EventCosmosCredentialAdd) Reset()         { *m = EventCosmosCredentialAdd{} }
func (m *EventCosmosCredentialAdd) String() string { return proto.CompactTextString(m) }
func (*EventCosmosCredentialAdd) ProtoMessage()    {}
func (*EventCosmosCredentialAdd) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1341371c8c5f5, []int{2}
}
func (m *EventCosmosCredentialAdd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCosmosCredentialAdd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCosmosCredentialAdd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCosmosCredentialAdd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCosmosCredentialAdd.Merge(m, src)
}
func (m *EventCosmosCredentialAdd) XXX_Size() int {
	return m.Size()
}
func (m *EventCosmosCredentialAdd) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCosmosCredentialAdd.DiscardUnknown(m)
}

var xxx_messageInfo_EventCosmosCredentialAdd proto.InternalMessageInfo

func (m *EventCosmosCredentialAdd) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventCosmosCredentialAdd) GetCredentialNumber() uint64 {
	if m != nil {
		return m.CredentialNumber
	}
	return 0
}

// Event emitted when a credential is deleted from a smart account
type EventCredentialDelete struct {
	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CredentialNumber uint64 `protobuf:"varint,2,opt,name=credential_number,json=credentialNumber,proto3" json:"credential_number,omitempty"`
}

func (m *EventCredentialDelete) Reset()         { *m = EventCredentialDelete{} }
func (m *EventCredentialDelete) String() string { return proto.CompactTextString(m) }
func (*EventCredentialDelete) ProtoMessage()    {}
func (*EventCredentialDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ae1341371c8c5f5, []int{3}
}
func (m *EventCredentialDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCredentialDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCredentialDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCredentialDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCredentialDelete.Merge(m, src)
}
func (m *EventCredentialDelete) XXX_Size() int {
	return m.Size()
}
func (m *EventCredentialDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCredentialDelete.DiscardUnknown(m)
}

var xxx_messageInfo_EventCredentialDelete proto.InternalMessageInfo

func (m *EventCredentialDelete) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventCredentialDelete) GetCredentialNumber() uint64 {
	if m != nil {
		return m.CredentialNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*EventSmartAccountInit)(nil), "provenance.smartaccounts.v1.EventSmartAccountInit")
	proto.RegisterType((*EventFido2CredentialAdd)(nil), "provenance.smartaccounts.v1.EventFido2CredentialAdd")
	proto.RegisterType((*EventCosmosCredentialAdd)(nil), "provenance.smartaccounts.v1.EventCosmosCredentialAdd")
	proto.RegisterType((*EventCredentialDelete)(nil), "provenance.smartaccounts.v1.EventCredentialDelete")
}

func init() {
	proto.RegisterFile("provenance/smartaccounts/v1/events.proto", fileDescriptor_8ae1341371c8c5f5)
}

var fileDescriptor_8ae1341371c8c5f5 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x28, 0xca, 0x2f,
	0x4b, 0xcd, 0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0x2f, 0xce, 0x4d, 0x2c, 0x2a, 0x49, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x29, 0xd6, 0x2f, 0x33, 0xd4, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0x29, 0xd6, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x46, 0xa8, 0xd4, 0x43, 0x51, 0xa9, 0x57, 0x66, 0x28, 0x25,
	0x99, 0x9c, 0x5f, 0x9c, 0x9b, 0x5f, 0x1c, 0x0f, 0x56, 0xaa, 0x0f, 0xe1, 0x40, 0xf4, 0x29, 0x95,
	0x71, 0x89, 0xba, 0x82, 0xcc, 0x09, 0x06, 0xe9, 0x71, 0x84, 0xe8, 0xf1, 0xcc, 0xcb, 0x2c, 0x11,
	0x32, 0xe2, 0x62, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x74, 0x92, 0xb8, 0xb4, 0x45, 0x57, 0x04, 0xaa, 0xd7, 0x11, 0x22, 0x13, 0x5c, 0x52, 0x94, 0x99,
	0x97, 0x1e, 0x04, 0x53, 0x28, 0xa4, 0xc9, 0x25, 0x90, 0x5c, 0x94, 0x9a, 0x92, 0x9a, 0x57, 0x92,
	0x99, 0x98, 0x13, 0x0f, 0x36, 0x4b, 0x82, 0x49, 0x81, 0x51, 0x83, 0x25, 0x88, 0x1f, 0x21, 0xee,
	0x0c, 0x12, 0x56, 0x9a, 0xcf, 0xc8, 0x25, 0x0e, 0xb6, 0xd8, 0x2d, 0x33, 0x25, 0xdf, 0xc8, 0x19,
	0x2e, 0xeb, 0x98, 0x92, 0x42, 0x96, 0xd5, 0xda, 0x5c, 0x82, 0x48, 0x56, 0xe7, 0x95, 0xe6, 0x26,
	0xa5, 0x16, 0x41, 0xed, 0x46, 0x72, 0x93, 0x1f, 0x58, 0x5c, 0x48, 0x99, 0x8b, 0x17, 0x49, 0x71,
	0x66, 0x8a, 0x04, 0x33, 0xc8, 0x9a, 0x20, 0x1e, 0x84, 0xa0, 0x67, 0x8a, 0x52, 0x35, 0x97, 0x04,
	0xd8, 0x81, 0xce, 0x60, 0x7b, 0xe9, 0xeb, 0x42, 0xa5, 0x0a, 0x68, 0xb4, 0x20, 0xac, 0x75, 0x49,
	0xcd, 0x49, 0x2d, 0x49, 0xa5, 0xb9, 0xcd, 0x4e, 0xc1, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78,
	0x2c, 0xc7, 0x10, 0x65, 0x99, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x8f,
	0x48, 0x6d, 0xba, 0x99, 0xf9, 0x48, 0x3c, 0xfd, 0x0a, 0xb4, 0x74, 0x5a, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0x4e, 0x6c, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xda, 0x3c, 0x4d,
	0xd0, 0x02, 0x00, 0x00,
}

func (m *EventSmartAccountInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSmartAccountInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSmartAccountInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CredentialCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventFido2CredentialAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFido2CredentialAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFido2CredentialAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialId) > 0 {
		i -= len(m.CredentialId)
		copy(dAtA[i:], m.CredentialId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CredentialId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CredentialNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCosmosCredentialAdd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCosmosCredentialAdd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCosmosCredentialAdd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CredentialNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCredentialDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCredentialDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCredentialDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CredentialNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSmartAccountInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CredentialCount != 0 {
		n += 1 + sovEvents(uint64(m.CredentialCount))
	}
	return n
}

func (m *EventFido2CredentialAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CredentialNumber != 0 {
		n += 1 + sovEvents(uint64(m.CredentialNumber))
	}
	l = len(m.CredentialId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCosmosCredentialAdd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CredentialNumber != 0 {
		n += 1 + sovEvents(uint64(m.CredentialNumber))
	}
	return n
}

func (m *EventCredentialDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CredentialNumber != 0 {
		n += 1 + sovEvents(uint64(m.CredentialNumber))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSmartAccountInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSmartAccountInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSmartAccountInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialCount", wireType)
			}
			m.CredentialCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CredentialCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFido2CredentialAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFido2CredentialAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFido2CredentialAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialNumber", wireType)
			}
			m.CredentialNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CredentialNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCosmosCredentialAdd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCosmosCredentialAdd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCosmosCredentialAdd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialNumber", wireType)
			}
			m.CredentialNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CredentialNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCredentialDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCredentialDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCredentialDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialNumber", wireType)
			}
			m.CredentialNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CredentialNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
