// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: provenance/smartaccounts/v1/webauthn_key_types.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PublicKeyData represents the public key data for WebAuthn credentials.
type PublicKeyData struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	KeyType   int64  `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Algorithm int64  `protobuf:"varint,3,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (m *PublicKeyData) Reset()         { *m = PublicKeyData{} }
func (m *PublicKeyData) String() string { return proto.CompactTextString(m) }
func (*PublicKeyData) ProtoMessage()    {}
func (*PublicKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d56b1cfcbfef6a5f, []int{0}
}
func (m *PublicKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyData.Merge(m, src)
}
func (m *PublicKeyData) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyData proto.InternalMessageInfo

func (m *PublicKeyData) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PublicKeyData) GetKeyType() int64 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *PublicKeyData) GetAlgorithm() int64 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

// EC2PublicKeyData represents the EC2 public key data for WebAuthn credentials.
type EC2PublicKeyData struct {
	PublicKeyData *PublicKeyData `protobuf:"bytes,1,opt,name=public_key_data,json=publicKeyData,proto3" json:"public_key_data,omitempty"`
	Curve         int64          `protobuf:"varint,2,opt,name=curve,proto3" json:"curve,omitempty"`
	XCoord        []byte         `protobuf:"bytes,3,opt,name=x_coord,json=xCoord,proto3" json:"x_coord,omitempty"`
	YCoord        []byte         `protobuf:"bytes,4,opt,name=y_coord,json=yCoord,proto3" json:"y_coord,omitempty"`
}

func (m *EC2PublicKeyData) Reset()         { *m = EC2PublicKeyData{} }
func (m *EC2PublicKeyData) String() string { return proto.CompactTextString(m) }
func (*EC2PublicKeyData) ProtoMessage()    {}
func (*EC2PublicKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d56b1cfcbfef6a5f, []int{1}
}
func (m *EC2PublicKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EC2PublicKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EC2PublicKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EC2PublicKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EC2PublicKeyData.Merge(m, src)
}
func (m *EC2PublicKeyData) XXX_Size() int {
	return m.Size()
}
func (m *EC2PublicKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_EC2PublicKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_EC2PublicKeyData proto.InternalMessageInfo

func (m *EC2PublicKeyData) GetPublicKeyData() *PublicKeyData {
	if m != nil {
		return m.PublicKeyData
	}
	return nil
}

func (m *EC2PublicKeyData) GetCurve() int64 {
	if m != nil {
		return m.Curve
	}
	return 0
}

func (m *EC2PublicKeyData) GetXCoord() []byte {
	if m != nil {
		return m.XCoord
	}
	return nil
}

func (m *EC2PublicKeyData) GetYCoord() []byte {
	if m != nil {
		return m.YCoord
	}
	return nil
}

// EdDSAPublicKeyData represents the EdDSA public key data for WebAuthn credentials.
type EdDSAPublicKeyData struct {
	PublicKeyData *PublicKeyData `protobuf:"bytes,1,opt,name=public_key_data,json=publicKeyData,proto3" json:"public_key_data,omitempty"`
	Curve         int64          `protobuf:"varint,2,opt,name=curve,proto3" json:"curve,omitempty"`
	XCoord        []byte         `protobuf:"bytes,3,opt,name=x_coord,json=xCoord,proto3" json:"x_coord,omitempty"`
}

func (m *EdDSAPublicKeyData) Reset()         { *m = EdDSAPublicKeyData{} }
func (m *EdDSAPublicKeyData) String() string { return proto.CompactTextString(m) }
func (*EdDSAPublicKeyData) ProtoMessage()    {}
func (*EdDSAPublicKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d56b1cfcbfef6a5f, []int{2}
}
func (m *EdDSAPublicKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EdDSAPublicKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EdDSAPublicKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EdDSAPublicKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdDSAPublicKeyData.Merge(m, src)
}
func (m *EdDSAPublicKeyData) XXX_Size() int {
	return m.Size()
}
func (m *EdDSAPublicKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_EdDSAPublicKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_EdDSAPublicKeyData proto.InternalMessageInfo

func (m *EdDSAPublicKeyData) GetPublicKeyData() *PublicKeyData {
	if m != nil {
		return m.PublicKeyData
	}
	return nil
}

func (m *EdDSAPublicKeyData) GetCurve() int64 {
	if m != nil {
		return m.Curve
	}
	return 0
}

func (m *EdDSAPublicKeyData) GetXCoord() []byte {
	if m != nil {
		return m.XCoord
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicKeyData)(nil), "provenance.smartaccounts.v1.PublicKeyData")
	proto.RegisterType((*EC2PublicKeyData)(nil), "provenance.smartaccounts.v1.EC2PublicKeyData")
	proto.RegisterType((*EdDSAPublicKeyData)(nil), "provenance.smartaccounts.v1.EdDSAPublicKeyData")
}

func init() {
	proto.RegisterFile("provenance/smartaccounts/v1/webauthn_key_types.proto", fileDescriptor_d56b1cfcbfef6a5f)
}

var fileDescriptor_d56b1cfcbfef6a5f = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x29, 0x28, 0xca, 0x2f,
	0x4b, 0xcd, 0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0x2f, 0xce, 0x4d, 0x2c, 0x2a, 0x49, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x29, 0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x4f, 0x4d, 0x4a, 0x2c, 0x2d, 0xc9, 0xc8,
	0x8b, 0xcf, 0x4e, 0xad, 0x8c, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x92, 0x46, 0xe8, 0xd2, 0x43, 0xd1, 0xa5, 0x57, 0x66, 0xa8, 0x94, 0xce, 0xc5, 0x1b, 0x50,
	0x9a, 0x94, 0x93, 0x99, 0xec, 0x9d, 0x5a, 0xe9, 0x92, 0x58, 0x92, 0x28, 0x24, 0xcb, 0xc5, 0x55,
	0x00, 0x16, 0x00, 0x99, 0x23, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0xc4, 0x59, 0x00, 0x53, 0x22,
	0x24, 0xc9, 0xc5, 0x01, 0x33, 0x5f, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x88, 0x3d, 0x3b, 0xb5,
	0x32, 0xa4, 0xb2, 0x20, 0x55, 0x48, 0x86, 0x8b, 0x33, 0x31, 0x27, 0x3d, 0xbf, 0x28, 0xb3, 0x24,
	0x23, 0x57, 0x82, 0x19, 0x2c, 0x87, 0x10, 0x50, 0x5a, 0xc7, 0xc8, 0x25, 0xe0, 0xea, 0x6c, 0x84,
	0x6a, 0x59, 0x10, 0x17, 0x3f, 0xc2, 0xb2, 0xf8, 0x94, 0xc4, 0x92, 0x44, 0xb0, 0x8d, 0xdc, 0x46,
	0x5a, 0x7a, 0x78, 0x1c, 0xad, 0x87, 0x62, 0x48, 0x10, 0x6f, 0x01, 0x8a, 0x99, 0x22, 0x5c, 0xac,
	0xc9, 0xa5, 0x45, 0x65, 0x30, 0xe7, 0x41, 0x38, 0x42, 0xe2, 0x5c, 0xec, 0x15, 0xf1, 0xc9, 0xf9,
	0xf9, 0x45, 0x29, 0x60, 0xa7, 0xf1, 0x04, 0xb1, 0x55, 0x38, 0x83, 0x78, 0x20, 0x89, 0x4a, 0xa8,
	0x04, 0x0b, 0x44, 0xa2, 0x12, 0x2c, 0xa1, 0x34, 0x9d, 0x91, 0x4b, 0xc8, 0x35, 0xc5, 0x25, 0xd8,
	0x71, 0xb0, 0x39, 0xd9, 0x29, 0xf8, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c,
	0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2,
	0x2c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x11, 0xae, 0xd1, 0xcd,
	0xcc, 0x47, 0xe2, 0xe9, 0x57, 0xa0, 0xa5, 0x1d, 0x70, 0x5a, 0x49, 0x62, 0x03, 0x27, 0x16, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x88, 0x03, 0x31, 0x64, 0x02, 0x00, 0x00,
}

func (m *PublicKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicKeyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algorithm != 0 {
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyType != 0 {
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EC2PublicKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EC2PublicKeyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EC2PublicKeyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.YCoord) > 0 {
		i -= len(m.YCoord)
		copy(dAtA[i:], m.YCoord)
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(len(m.YCoord)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.XCoord) > 0 {
		i -= len(m.XCoord)
		copy(dAtA[i:], m.XCoord)
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(len(m.XCoord)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Curve != 0 {
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(m.Curve))
		i--
		dAtA[i] = 0x10
	}
	if m.PublicKeyData != nil {
		{
			size, err := m.PublicKeyData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EdDSAPublicKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdDSAPublicKeyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EdDSAPublicKeyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XCoord) > 0 {
		i -= len(m.XCoord)
		copy(dAtA[i:], m.XCoord)
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(len(m.XCoord)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Curve != 0 {
		i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(m.Curve))
		i--
		dAtA[i] = 0x10
	}
	if m.PublicKeyData != nil {
		{
			size, err := m.PublicKeyData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebauthnKeyTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebauthnKeyTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebauthnKeyTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublicKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	if m.KeyType != 0 {
		n += 1 + sovWebauthnKeyTypes(uint64(m.KeyType))
	}
	if m.Algorithm != 0 {
		n += 1 + sovWebauthnKeyTypes(uint64(m.Algorithm))
	}
	return n
}

func (m *EC2PublicKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKeyData != nil {
		l = m.PublicKeyData.Size()
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	if m.Curve != 0 {
		n += 1 + sovWebauthnKeyTypes(uint64(m.Curve))
	}
	l = len(m.XCoord)
	if l > 0 {
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	l = len(m.YCoord)
	if l > 0 {
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	return n
}

func (m *EdDSAPublicKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PublicKeyData != nil {
		l = m.PublicKeyData.Size()
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	if m.Curve != 0 {
		n += 1 + sovWebauthnKeyTypes(uint64(m.Curve))
	}
	l = len(m.XCoord)
	if l > 0 {
		n += 1 + l + sovWebauthnKeyTypes(uint64(l))
	}
	return n
}

func sovWebauthnKeyTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebauthnKeyTypes(x uint64) (n int) {
	return sovWebauthnKeyTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauthnKeyTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKeyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKeyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebauthnKeyTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EC2PublicKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauthnKeyTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EC2PublicKeyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EC2PublicKeyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKeyData == nil {
				m.PublicKeyData = &PublicKeyData{}
			}
			if err := m.PublicKeyData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curve", wireType)
			}
			m.Curve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curve |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XCoord", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XCoord = append(m.XCoord[:0], dAtA[iNdEx:postIndex]...)
			if m.XCoord == nil {
				m.XCoord = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YCoord", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YCoord = append(m.YCoord[:0], dAtA[iNdEx:postIndex]...)
			if m.YCoord == nil {
				m.YCoord = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauthnKeyTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EdDSAPublicKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebauthnKeyTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdDSAPublicKeyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdDSAPublicKeyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKeyData == nil {
				m.PublicKeyData = &PublicKeyData{}
			}
			if err := m.PublicKeyData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Curve", wireType)
			}
			m.Curve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Curve |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XCoord", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XCoord = append(m.XCoord[:0], dAtA[iNdEx:postIndex]...)
			if m.XCoord == nil {
				m.XCoord = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebauthnKeyTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWebauthnKeyTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebauthnKeyTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebauthnKeyTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebauthnKeyTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebauthnKeyTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebauthnKeyTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebauthnKeyTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebauthnKeyTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebauthnKeyTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebauthnKeyTypes = fmt.Errorf("proto: unexpected end of group")
)
